
exokeleton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006938  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c84  08006c84  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c8c  08006c8c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000078  08006d0c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006d0c  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001380c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280d  00000000  00000000  000338b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  000360c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  000371c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024aa9  00000000  00000000  000381d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bb4  00000000  00000000  0005cc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e030e  00000000  00000000  00073835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  00153b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006af0 	.word	0x08006af0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006af0 	.word	0x08006af0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <control_run>:
{
}

//script for running two joints
void control_run()
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b0af      	sub	sp, #188	; 0xbc
 80005b8:	af00      	add	r7, sp, #0
	*/

	uint8_t encPos[6]; //array for encoder positions
	//uint8_t encStartPos[] = {80, 0, 0, 0, 0, 0}; //array for encoder positions
	//uint8_t encStandPos[] = {80, 0, 0, 0, 0, 0}; //array for encoder positions
	int8_t enc_start_pos[] = {93, 116}; //array for encoder positions. MOTOR 1 IS RIGHT KNEE, MOTOR 2 IS RIGHT HIP
 80005ba:	f247 435d 	movw	r3, #29789	; 0x745d
 80005be:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int8_t enc_stand_pos[] = {111, 116}; //array for encoder positions.
 80005c2:	f247 436f 	movw	r3, #29807	; 0x746f
 80005c6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	int8_t enc_final_pos[] = {6, 85}; //array for encoder positions
 80005ca:	f245 5306 	movw	r3, #21766	; 0x5506
 80005ce:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	int8_t pos_step[] = {0, 0};
 80005d2:	2300      	movs	r3, #0
 80005d4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	uint32_t emg[4];  //array for EMG values for DMA to store values in

	uint8_t msg[100]; //buffer for UART message
	uint8_t num_steps = 5;
 80005d8:	2305      	movs	r3, #5
 80005da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	int msgSize;		//variable for UART message size in bytes

	HAL_ADC_Start_DMA(&hadc1, emg, 4); //start DMA to update EMG values
 80005de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005e2:	2204      	movs	r2, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	48d8      	ldr	r0, [pc, #864]	; (8000948 <control_run+0x394>)
 80005e8:	f001 fbc6 	bl	8001d78 <HAL_ADC_Start_DMA>

	//move motors to initial conditions

	while(!check_balanced()){
 80005ec:	e03c      	b.n	8000668 <control_run+0xb4>
		for(int i = 0; i < 2; i ++){
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80005f4:	e034      	b.n	8000660 <control_run+0xac>
				encPos[i] = enc_read_pos(i+1);
 80005f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	3301      	adds	r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f000 ff43 	bl	800148c <enc_read_pos>
 8000606:	4603      	mov	r3, r0
 8000608:	4619      	mov	r1, r3
 800060a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800060e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000612:	4413      	add	r3, r2
 8000614:	460a      	mov	r2, r1
 8000616:	701a      	strb	r2, [r3, #0]
				balance(encPos[i], enc_start_pos[i]-3, enc_start_pos[i]+3, i + 1);
 8000618:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800061c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000620:	4413      	add	r3, r2
 8000622:	7818      	ldrb	r0, [r3, #0]
 8000624:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800062c:	4413      	add	r3, r2
 800062e:	f993 3000 	ldrsb.w	r3, [r3]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	3b03      	subs	r3, #3
 8000636:	b2d9      	uxtb	r1, r3
 8000638:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800063c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000640:	4413      	add	r3, r2
 8000642:	f993 3000 	ldrsb.w	r3, [r3]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	3303      	adds	r3, #3
 800064a:	b2da      	uxtb	r2, r3
 800064c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000650:	3301      	adds	r3, #1
 8000652:	f000 f9eb 	bl	8000a2c <balance>
		for(int i = 0; i < 2; i ++){
 8000656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800065a:	3301      	adds	r3, #1
 800065c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000664:	2b01      	cmp	r3, #1
 8000666:	ddc6      	ble.n	80005f6 <control_run+0x42>
	while(!check_balanced()){
 8000668:	f000 fa1c 	bl	8000aa4 <check_balanced>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0bd      	beq.n	80005ee <control_run+0x3a>
		HAL_UART_Transmit(&huart2, msg, msgSize, 10); //Send UART message to UART2
		HAL_Delay(100);
	}
	*/
	//calculate angle to move by given a number of steps
	for(int i = 0; i < 2; i ++){
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000678:	e038      	b.n	80006ec <control_run+0x138>
		if(enc_stand_pos[i] != enc_start_pos[i])
 800067a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800067e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000682:	4413      	add	r3, r2
 8000684:	f993 2000 	ldrsb.w	r2, [r3]
 8000688:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800068c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000690:	440b      	add	r3, r1
 8000692:	f993 3000 	ldrsb.w	r3, [r3]
 8000696:	429a      	cmp	r2, r3
 8000698:	d01c      	beq.n	80006d4 <control_run+0x120>
		{
			pos_step[i] = (enc_stand_pos[i] - enc_start_pos[i])/num_steps;
 800069a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800069e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006a2:	4413      	add	r3, r2
 80006a4:	f993 3000 	ldrsb.w	r3, [r3]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80006ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006b2:	4413      	add	r3, r2
 80006b4:	f993 3000 	ldrsb.w	r3, [r3]
 80006b8:	1aca      	subs	r2, r1, r3
 80006ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006be:	fb92 f3f3 	sdiv	r3, r2, r3
 80006c2:	b259      	sxtb	r1, r3
 80006c4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80006c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006cc:	4413      	add	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e006      	b.n	80006e2 <control_run+0x12e>
		}else{
			pos_step[i]=0;
 80006d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80006d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006dc:	4413      	add	r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2; i ++){
 80006e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006e6:	3301      	adds	r3, #1
 80006e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80006ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	ddc2      	ble.n	800067a <control_run+0xc6>
		}
	}

	//move to standing position in steps
	for(int steps = 1; steps <= num_steps; steps++)
 80006f4:	2301      	movs	r3, #1
 80006f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80006fa:	e071      	b.n	80007e0 <control_run+0x22c>
	{
		do{
			for(int i = 0; i < 2; i ++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000702:	e05a      	b.n	80007ba <control_run+0x206>
				encPos[i] = enc_read_pos(i+1);
 8000704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000708:	b2db      	uxtb	r3, r3
 800070a:	3301      	adds	r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 febc 	bl	800148c <enc_read_pos>
 8000714:	4603      	mov	r3, r0
 8000716:	4619      	mov	r1, r3
 8000718:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800071c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000720:	4413      	add	r3, r2
 8000722:	460a      	mov	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
				balance(encPos[i], (enc_start_pos[i] + pos_step[i] * steps) - 2, (enc_start_pos[i] + pos_step[i] * steps) + 2, i + 1);
 8000726:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800072a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800072e:	4413      	add	r3, r2
 8000730:	7818      	ldrb	r0, [r3, #0]
 8000732:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800073a:	4413      	add	r3, r2
 800073c:	f993 3000 	ldrsb.w	r3, [r3]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800074a:	440b      	add	r3, r1
 800074c:	f993 3000 	ldrsb.w	r3, [r3]
 8000750:	b2d9      	uxtb	r1, r3
 8000752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000756:	b2db      	uxtb	r3, r3
 8000758:	fb11 f303 	smulbb	r3, r1, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	3b02      	subs	r3, #2
 8000764:	b2dc      	uxtb	r4, r3
 8000766:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800076a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800076e:	4413      	add	r3, r2
 8000770:	f993 3000 	ldrsb.w	r3, [r3]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800077a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800077e:	440b      	add	r3, r1
 8000780:	f993 3000 	ldrsb.w	r3, [r3]
 8000784:	b2d9      	uxtb	r1, r3
 8000786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800078a:	b2db      	uxtb	r3, r3
 800078c:	fb11 f303 	smulbb	r3, r1, r3
 8000790:	b2db      	uxtb	r3, r3
 8000792:	4413      	add	r3, r2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	3302      	adds	r3, #2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800079e:	3301      	adds	r3, #1
 80007a0:	4621      	mov	r1, r4
 80007a2:	f000 f943 	bl	8000a2c <balance>

				//if all motors are balanced, break
				if(check_balanced())
 80007a6:	f000 f97d 	bl	8000aa4 <check_balanced>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d109      	bne.n	80007c4 <control_run+0x210>
			for(int i = 0; i < 2; i ++){
 80007b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007b4:	3301      	adds	r3, #1
 80007b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007be:	2b01      	cmp	r3, #1
 80007c0:	dda0      	ble.n	8000704 <control_run+0x150>
 80007c2:	e000      	b.n	80007c6 <control_run+0x212>
				{
					break;
 80007c4:	bf00      	nop
				}
			}
		}while(!check_balanced());
 80007c6:	f000 f96d 	bl	8000aa4 <check_balanced>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d095      	beq.n	80006fc <control_run+0x148>
		HAL_Delay(10);
 80007d0:	200a      	movs	r0, #10
 80007d2:	f001 fa69 	bl	8001ca8 <HAL_Delay>
	for(int steps = 1; steps <= num_steps; steps++)
 80007d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007da:	3301      	adds	r3, #1
 80007dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80007e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80007e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dd87      	ble.n	80006fc <control_run+0x148>
	}

	HAL_Delay(5000);
 80007ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f0:	f001 fa5a 	bl	8001ca8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, msg, msgSize, 10); //Send UART message to UART2
		HAL_Delay(100);
	}
	*/
	//calculate angle to move by given a number of steps
	for(int i = 0; i < 2; i ++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80007fa:	e038      	b.n	800086e <control_run+0x2ba>
		if(enc_stand_pos[i] != enc_start_pos[i])
 80007fc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000804:	4413      	add	r3, r2
 8000806:	f993 2000 	ldrsb.w	r2, [r3]
 800080a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800080e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000812:	440b      	add	r3, r1
 8000814:	f993 3000 	ldrsb.w	r3, [r3]
 8000818:	429a      	cmp	r2, r3
 800081a:	d01c      	beq.n	8000856 <control_run+0x2a2>
		{
			pos_step[i] = (enc_final_pos[i] - enc_stand_pos[i])/num_steps;
 800081c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000824:	4413      	add	r3, r2
 8000826:	f993 3000 	ldrsb.w	r3, [r3]
 800082a:	4619      	mov	r1, r3
 800082c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000830:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000834:	4413      	add	r3, r2
 8000836:	f993 3000 	ldrsb.w	r3, [r3]
 800083a:	1aca      	subs	r2, r1, r3
 800083c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000840:	fb92 f3f3 	sdiv	r3, r2, r3
 8000844:	b259      	sxtb	r1, r3
 8000846:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800084a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800084e:	4413      	add	r3, r2
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e006      	b.n	8000864 <control_run+0x2b0>
		}else{
			pos_step[i]=0;
 8000856:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800085a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800085e:	4413      	add	r3, r2
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2; i ++){
 8000864:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000868:	3301      	adds	r3, #1
 800086a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800086e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000872:	2b01      	cmp	r3, #1
 8000874:	ddc2      	ble.n	80007fc <control_run+0x248>
		}
	}

	//move to standing position in steps
	for(int steps = 1; steps <= num_steps; steps++)
 8000876:	2301      	movs	r3, #1
 8000878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800087c:	e074      	b.n	8000968 <control_run+0x3b4>
	{
		do{
			for(int i = 0; i < 2; i ++){
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000884:	e05a      	b.n	800093c <control_run+0x388>
				encPos[i] = enc_read_pos(i+1);
 8000886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800088a:	b2db      	uxtb	r3, r3
 800088c:	3301      	adds	r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fdfb 	bl	800148c <enc_read_pos>
 8000896:	4603      	mov	r3, r0
 8000898:	4619      	mov	r1, r3
 800089a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800089e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008a2:	4413      	add	r3, r2
 80008a4:	460a      	mov	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
				balance(encPos[i], (enc_stand_pos[i] + pos_step[i] * steps) - 2, (enc_stand_pos[i] + pos_step[i] * steps) + 2, i + 1);
 80008a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80008ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008b0:	4413      	add	r3, r2
 80008b2:	7818      	ldrb	r0, [r3, #0]
 80008b4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80008b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008bc:	4413      	add	r3, r2
 80008be:	f993 3000 	ldrsb.w	r3, [r3]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80008c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008cc:	440b      	add	r3, r1
 80008ce:	f993 3000 	ldrsb.w	r3, [r3]
 80008d2:	b2d9      	uxtb	r1, r3
 80008d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	fb11 f303 	smulbb	r3, r1, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4413      	add	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	3b02      	subs	r3, #2
 80008e6:	b2dc      	uxtb	r4, r3
 80008e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80008ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008f0:	4413      	add	r3, r2
 80008f2:	f993 3000 	ldrsb.w	r3, [r3]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80008fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000900:	440b      	add	r3, r1
 8000902:	f993 3000 	ldrsb.w	r3, [r3]
 8000906:	b2d9      	uxtb	r1, r3
 8000908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	fb11 f303 	smulbb	r3, r1, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4413      	add	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	3302      	adds	r3, #2
 800091a:	b2da      	uxtb	r2, r3
 800091c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000920:	3301      	adds	r3, #1
 8000922:	4621      	mov	r1, r4
 8000924:	f000 f882 	bl	8000a2c <balance>

				//if all motors are balanced, break
				if(check_balanced())
 8000928:	f000 f8bc 	bl	8000aa4 <check_balanced>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10c      	bne.n	800094c <control_run+0x398>
			for(int i = 0; i < 2; i ++){
 8000932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000936:	3301      	adds	r3, #1
 8000938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800093c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000940:	2b01      	cmp	r3, #1
 8000942:	dda0      	ble.n	8000886 <control_run+0x2d2>
 8000944:	e003      	b.n	800094e <control_run+0x39a>
 8000946:	bf00      	nop
 8000948:	2000009c 	.word	0x2000009c
				{
					break;
 800094c:	bf00      	nop
				}
			}
		}while(!check_balanced());
 800094e:	f000 f8a9 	bl	8000aa4 <check_balanced>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d092      	beq.n	800087e <control_run+0x2ca>
		HAL_Delay(10);
 8000958:	200a      	movs	r0, #10
 800095a:	f001 f9a5 	bl	8001ca8 <HAL_Delay>
	for(int steps = 1; steps <= num_steps; steps++)
 800095e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000962:	3301      	adds	r3, #1
 8000964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000968:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800096c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000970:	429a      	cmp	r2, r3
 8000972:	dd84      	ble.n	800087e <control_run+0x2ca>
	}

	HAL_Delay(5000);
 8000974:	f241 3088 	movw	r0, #5000	; 0x1388
 8000978:	f001 f996 	bl	8001ca8 <HAL_Delay>

	while(1)//stability loop, goes forever
	{
		for(int i = 0; i < 2; i ++){
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000982:	e034      	b.n	80009ee <control_run+0x43a>
			encPos[i] = enc_read_pos(i+1);
 8000984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000988:	b2db      	uxtb	r3, r3
 800098a:	3301      	adds	r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fd7c 	bl	800148c <enc_read_pos>
 8000994:	4603      	mov	r3, r0
 8000996:	4619      	mov	r1, r3
 8000998:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800099c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009a0:	4413      	add	r3, r2
 80009a2:	460a      	mov	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
			balance(encPos[i], enc_final_pos[i] - 2, enc_final_pos[i] + 2, i + 1);
 80009a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80009aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009ae:	4413      	add	r3, r2
 80009b0:	7818      	ldrb	r0, [r3, #0]
 80009b2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80009b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009ba:	4413      	add	r3, r2
 80009bc:	f993 3000 	ldrsb.w	r3, [r3]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3b02      	subs	r3, #2
 80009c4:	b2d9      	uxtb	r1, r3
 80009c6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80009ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009ce:	4413      	add	r3, r2
 80009d0:	f993 3000 	ldrsb.w	r3, [r3]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3302      	adds	r3, #2
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009de:	3301      	adds	r3, #1
 80009e0:	f000 f824 	bl	8000a2c <balance>
		for(int i = 0; i < 2; i ++){
 80009e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009e8:	3301      	adds	r3, #1
 80009ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80009ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	ddc6      	ble.n	8000984 <control_run+0x3d0>
		}
		msgSize = sprintf((char *)msg, "Encoder balancing: %u\r\n", encPos[0]); //store message in msg buffer
 80009f6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80009fa:	461a      	mov	r2, r3
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4909      	ldr	r1, [pc, #36]	; (8000a24 <control_run+0x470>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fc07 	bl	8006214 <siprintf>
 8000a06:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		HAL_UART_Transmit(&huart2, msg, msgSize, 10); //Send UART message to UART2
 8000a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	1d39      	adds	r1, r7, #4
 8000a12:	230a      	movs	r3, #10
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <control_run+0x474>)
 8000a16:	f005 f856 	bl	8005ac6 <HAL_UART_Transmit>
		HAL_Delay(10);
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f001 f944 	bl	8001ca8 <HAL_Delay>
		for(int i = 0; i < 2; i ++){
 8000a20:	e7ac      	b.n	800097c <control_run+0x3c8>
 8000a22:	bf00      	nop
 8000a24:	08006b08 	.word	0x08006b08
 8000a28:	200002fc 	.word	0x200002fc

08000a2c <balance>:
	}
}

void balance(uint8_t encPos, uint8_t threshLow, uint8_t threshHigh, int motor)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	71bb      	strb	r3, [r7, #6]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	717b      	strb	r3, [r7, #5]
	if(encPos > threshHigh)//smart reverse threshold works at 7%, will have to adjust
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	797b      	ldrb	r3, [r7, #5]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d90b      	bls.n	8000a60 <balance+0x34>
	{
		setMotorVel(motor, 1, 8);//move back slowly
 8000a48:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	6838      	ldr	r0, [r7, #0]
 8000a50:	f000 fca8 	bl	80013a4 <setMotorVel>
		motor_balanced[motor - 1] = 0;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <balance+0x74>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	54d1      	strb	r1, [r2, r3]
		{
			setMotorVel(motor, 1, 7.5);//STOP MOTOR
			motor_balanced[motor - 1] = 1;
		}
	}
}
 8000a5e:	e01a      	b.n	8000a96 <balance+0x6a>
		if(encPos < threshLow)
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d20b      	bcs.n	8000a80 <balance+0x54>
			setMotorVel(motor, 1, 7);//move forward slowly
 8000a68:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	6838      	ldr	r0, [r7, #0]
 8000a70:	f000 fc98 	bl	80013a4 <setMotorVel>
			motor_balanced[motor - 1] = 0;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <balance+0x74>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	54d1      	strb	r1, [r2, r3]
}
 8000a7e:	e00a      	b.n	8000a96 <balance+0x6a>
			setMotorVel(motor, 1, 7.5);//STOP MOTOR
 8000a80:	eeb1 0a0e 	vmov.f32	s0, #30	; 0x40f00000  7.5
 8000a84:	2101      	movs	r1, #1
 8000a86:	6838      	ldr	r0, [r7, #0]
 8000a88:	f000 fc8c 	bl	80013a4 <setMotorVel>
			motor_balanced[motor - 1] = 1;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <balance+0x74>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	54d1      	strb	r1, [r2, r3]
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000094 	.word	0x20000094

08000aa4 <check_balanced>:

/*
 * Returns 0 if at least one motor is not done balancing
 */
int check_balanced(){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i ++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	e00a      	b.n	8000ac6 <check_balanced+0x22>
	{
		if(motor_balanced[i] == 0){
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <check_balanced+0x38>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <check_balanced+0x1c>
			return 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e006      	b.n	8000ace <check_balanced+0x2a>
	for(int i = 0; i < 2; i ++)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	ddf1      	ble.n	8000ab0 <check_balanced+0xc>
		}
	}
	//return 1 if all motors are balanced
	return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000094 	.word	0x20000094

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b09c      	sub	sp, #112	; 0x70
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f001 f86d 	bl	8001bc4 <HAL_Init>

  uint8_t msg[100]; //buffer for UART message
  int msgSize;		//variable for UART message size in bytes
  uint8_t * i2cMsg;	//8-bit value of I2C message
  uint8_t buf;
  uint8_t val = 0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint8_t test = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  //extern con
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f851 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 fbd5 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000afe:	f000 fbb3 	bl	8001268 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b02:	f000 f933 	bl	8000d6c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b06:	f000 f95f 	bl	8000dc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b0a:	f000 f9c1 	bl	8000e90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b0e:	f000 fa41 	bl	8000f94 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b12:	f000 fab5 	bl	8001080 <MX_TIM8_Init>
  MX_UART4_Init();
 8000b16:	f000 fb53 	bl	80011c0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000b1a:	f000 fb7b 	bl	8001214 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b1e:	f000 f8a9 	bl	8000c74 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //Motor 1
 8000b22:	2104      	movs	r1, #4
 8000b24:	4817      	ldr	r0, [pc, #92]	; (8000b84 <main+0xa4>)
 8000b26:	f004 f951 	bl	8004dcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Motor 2
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4816      	ldr	r0, [pc, #88]	; (8000b88 <main+0xa8>)
 8000b2e:	f004 f94d 	bl	8004dcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); //Motor 3
 8000b32:	2104      	movs	r1, #4
 8000b34:	4815      	ldr	r0, [pc, #84]	; (8000b8c <main+0xac>)
 8000b36:	f004 f949 	bl	8004dcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //Motor 4
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <main+0xb0>)
 8000b3e:	f004 f945 	bl	8004dcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Motor 5
 8000b42:	2100      	movs	r1, #0
 8000b44:	480f      	ldr	r0, [pc, #60]	; (8000b84 <main+0xa4>)
 8000b46:	f004 f941 	bl	8004dcc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Motor 6
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4810      	ldr	r0, [pc, #64]	; (8000b90 <main+0xb0>)
 8000b4e:	f004 f93d 	bl	8004dcc <HAL_TIM_PWM_Start>
	  msgSize = sprintf((char *)msg, "Encoder 2 start: %u\r\n", encPos[1]); //store message in msg buffer
	  HAL_UART_Transmit(&huart2, msg, msgSize, 10); //Send UART message to UART2
	  HAL_Delay(100);
  }
  */
  control_run();
 8000b52:	f7ff fd2f 	bl	80005b4 <control_run>
	{
		setMotorVel(1, 1, (i));
		HAL_Delay(10);
	}
	*/
	msgSize = sprintf((char *)msg, "We livin: %u\r\n", enc_read_pos(1)); //store message in msg buffer
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 fc98 	bl	800148c <enc_read_pos>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <main+0xb4>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f005 fb55 	bl	8006214 <siprintf>
 8000b6a:	66b8      	str	r0, [r7, #104]	; 0x68
	HAL_UART_Transmit(&huart2, msg, msgSize, 10); //Send UART message to UART2
 8000b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	1d39      	adds	r1, r7, #4
 8000b72:	230a      	movs	r3, #10
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <main+0xb8>)
 8000b76:	f004 ffa6 	bl	8005ac6 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b7e:	f001 f893 	bl	8001ca8 <HAL_Delay>
	msgSize = sprintf((char *)msg, "We livin: %u\r\n", enc_read_pos(1)); //store message in msg buffer
 8000b82:	e7e8      	b.n	8000b56 <main+0x76>
 8000b84:	200001e0 	.word	0x200001e0
 8000b88:	20000228 	.word	0x20000228
 8000b8c:	20000270 	.word	0x20000270
 8000b90:	20000198 	.word	0x20000198
 8000b94:	08006b20 	.word	0x08006b20
 8000b98:	200002fc 	.word	0x200002fc

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	2234      	movs	r2, #52	; 0x34
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 fb2a 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <SystemClock_Config+0xd0>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <SystemClock_Config+0xd0>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <SystemClock_Config+0xd0>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <SystemClock_Config+0xd4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000be8:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <SystemClock_Config+0xd4>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <SystemClock_Config+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c04:	2310      	movs	r3, #16
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c10:	2308      	movs	r3, #8
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c14:	2354      	movs	r3, #84	; 0x54
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 fd93 	bl	8004754 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c34:	f000 fbb0 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2102      	movs	r1, #2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fa33 	bl	80040c0 <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c60:	f000 fb9a 	bl	8001398 <Error_Handler>
  }
}
 8000c64:	bf00      	nop
 8000c66:	3750      	adds	r7, #80	; 0x50
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c86:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000c88:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <MX_ADC1_Init+0xf0>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000c8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c94:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cb6:	4a2c      	ldr	r2, [pc, #176]	; (8000d68 <MX_ADC1_Init+0xf4>)
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	4822      	ldr	r0, [pc, #136]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cd6:	f001 f80b 	bl	8001cf0 <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f000 fb5a 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481a      	ldr	r0, [pc, #104]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000cf6:	f001 f96d 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d00:	f000 fb4a 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000d12:	f001 f95f 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d1c:	f000 fb3c 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d24:	2303      	movs	r3, #3
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000d2e:	f001 f951 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d38:	f000 fb2e 	bl	8001398 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d40:	2304      	movs	r3, #4
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_ADC1_Init+0xec>)
 8000d4a:	f001 f943 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d54:	f000 fb20 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000009c 	.word	0x2000009c
 8000d64:	40012000 	.word	0x40012000
 8000d68:	0f000001 	.word	0x0f000001

08000d6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <MX_I2C1_Init+0x54>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x58>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000daa:	f002 f9f3 	bl	8003194 <HAL_I2C_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000db4:	f000 faf0 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000144 	.word	0x20000144
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	000186a0 	.word	0x000186a0

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	f107 0320 	add.w	r3, r7, #32
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e12:	481e      	ldr	r0, [pc, #120]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e14:	f003 ff8b 	bl	8004d2e <HAL_TIM_PWM_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e1e:	f000 fabb 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e32:	f004 fd2d 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e3c:	f000 faac 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e40:	2360      	movs	r3, #96	; 0x60
 8000e42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2204      	movs	r2, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e58:	f004 f880 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e62:	f000 fa99 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2208      	movs	r2, #8
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e6e:	f004 f875 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e78:	f000 fa8e 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_TIM2_Init+0xc4>)
 8000e7e:	f000 fcb1 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000198 	.word	0x20000198

08000e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000ec2:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <MX_TIM3_Init+0x100>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000ec8:	2253      	movs	r2, #83	; 0x53
 8000eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19975;
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000ed4:	f644 6207 	movw	r2, #19975	; 0x4e07
 8000ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee6:	4829      	ldr	r0, [pc, #164]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000ee8:	f003 fed2 	bl	8004c90 <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ef2:	f000 fa51 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000f04:	f004 f8ec 	bl	80050e0 <HAL_TIM_ConfigClockSource>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f0e:	f000 fa43 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f12:	481e      	ldr	r0, [pc, #120]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000f14:	f003 ff0b 	bl	8004d2e <HAL_TIM_PWM_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f1e:	f000 fa3b 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000f32:	f004 fcad 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f3c:	f000 fa2c 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f40:	2360      	movs	r3, #96	; 0x60
 8000f42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000f58:	f004 f800 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f62:	f000 fa19 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000f6e:	f003 fff5 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f78:	f000 fa0e 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM3_Init+0xfc>)
 8000f7e:	f000 fc31 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3738      	adds	r7, #56	; 0x38
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001e0 	.word	0x200001e0
 8000f90:	40000400 	.word	0x40000400

08000f94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08e      	sub	sp, #56	; 0x38
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_TIM4_Init+0xe4>)
 8000fc6:	4a2d      	ldr	r2, [pc, #180]	; (800107c <MX_TIM4_Init+0xe8>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_TIM4_Init+0xe4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <MX_TIM4_Init+0xe4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_TIM4_Init+0xe4>)
 8000fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_TIM4_Init+0xe4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_TIM4_Init+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fea:	4823      	ldr	r0, [pc, #140]	; (8001078 <MX_TIM4_Init+0xe4>)
 8000fec:	f003 fe50 	bl	8004c90 <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ff6:	f000 f9cf 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001004:	4619      	mov	r1, r3
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <MX_TIM4_Init+0xe4>)
 8001008:	f004 f86a 	bl	80050e0 <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001012:	f000 f9c1 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <MX_TIM4_Init+0xe4>)
 8001018:	f003 fe89 	bl	8004d2e <HAL_TIM_PWM_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001022:	f000 f9b9 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	4619      	mov	r1, r3
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_TIM4_Init+0xe4>)
 8001036:	f004 fc2b 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001040:	f000 f9aa 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001044:	2360      	movs	r3, #96	; 0x60
 8001046:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <MX_TIM4_Init+0xe4>)
 800105c:	f003 ff7e 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001066:	f000 f997 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <MX_TIM4_Init+0xe4>)
 800106c:	f000 fbba 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8001070:	bf00      	nop
 8001072:	3738      	adds	r7, #56	; 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000228 	.word	0x20000228
 800107c:	40000800 	.word	0x40000800

08001080 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2220      	movs	r2, #32
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 f8a3 	bl	8006204 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010be:	4b3e      	ldr	r3, [pc, #248]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010c0:	4a3e      	ldr	r2, [pc, #248]	; (80011bc <MX_TIM8_Init+0x13c>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010de:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <MX_TIM8_Init+0x138>)
 80010ec:	f003 fdd0 	bl	8004c90 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80010f6:	f000 f94f 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001104:	4619      	mov	r1, r3
 8001106:	482c      	ldr	r0, [pc, #176]	; (80011b8 <MX_TIM8_Init+0x138>)
 8001108:	f003 ffea 	bl	80050e0 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001112:	f000 f941 	bl	8001398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001116:	4828      	ldr	r0, [pc, #160]	; (80011b8 <MX_TIM8_Init+0x138>)
 8001118:	f003 fe09 	bl	8004d2e <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001122:	f000 f939 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800112e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001132:	4619      	mov	r1, r3
 8001134:	4820      	ldr	r0, [pc, #128]	; (80011b8 <MX_TIM8_Init+0x138>)
 8001136:	f004 fbab 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001140:	f000 f92a 	bl	8001398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	; 0x60
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MX_TIM8_Init+0x138>)
 800116a:	f003 fef7 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001174:	f000 f910 	bl	8001398 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_TIM8_Init+0x138>)
 800119c:	f004 fbf4 	bl	8005988 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80011a6:	f000 f8f7 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <MX_TIM8_Init+0x138>)
 80011ac:	f000 fb1a 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 80011b0:	bf00      	nop
 80011b2:	3758      	adds	r7, #88	; 0x58
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000270 	.word	0x20000270
 80011bc:	40010400 	.word	0x40010400

080011c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_UART4_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_UART4_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_UART4_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_UART4_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_UART4_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_UART4_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_UART4_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_UART4_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_UART4_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_UART4_Init+0x4c>)
 80011f8:	f004 fc18 	bl	8005a2c <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f8c9 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002b8 	.word	0x200002b8
 8001210:	40004c00 	.word	0x40004c00

08001214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MX_USART2_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART2_UART_Init+0x4c>)
 800124c:	f004 fbee 	bl	8005a2c <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f000 f89f 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200002fc 	.word	0x200002fc
 8001264:	40004400 	.word	0x40004400

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2038      	movs	r0, #56	; 0x38
 8001290:	f001 fa2b 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001294:	2038      	movs	r0, #56	; 0x38
 8001296:	f001 fa44 	bl	8002722 <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <MX_GPIO_Init+0xe0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a30      	ldr	r2, [pc, #192]	; (8001388 <MX_GPIO_Init+0xe0>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <MX_GPIO_Init+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_GPIO_Init+0xe0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a29      	ldr	r2, [pc, #164]	; (8001388 <MX_GPIO_Init+0xe0>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_GPIO_Init+0xe0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <MX_GPIO_Init+0xe0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a22      	ldr	r2, [pc, #136]	; (8001388 <MX_GPIO_Init+0xe0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_GPIO_Init+0xe0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|M2DIR_Pin|M1DIR_Pin|M4DIR_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001318:	481c      	ldr	r0, [pc, #112]	; (800138c <MX_GPIO_Init+0xe4>)
 800131a:	f001 ff21 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M3DIR_GPIO_Port, M3DIR_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <MX_GPIO_Init+0xe8>)
 8001324:	f001 ff1c 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	4815      	ldr	r0, [pc, #84]	; (8001394 <MX_GPIO_Init+0xec>)
 8001340:	f001 fd7a 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin M2DIR_Pin M1DIR_Pin M4DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|M2DIR_Pin|M1DIR_Pin|M4DIR_Pin;
 8001344:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <MX_GPIO_Init+0xe4>)
 800135e:	f001 fd6b 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3DIR_Pin */
  GPIO_InitStruct.Pin = M3DIR_Pin;
 8001362:	2320      	movs	r3, #32
 8001364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(M3DIR_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_GPIO_Init+0xe8>)
 800137a:	f001 fd5d 	bl	8002e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <setMotorVel>:
 * none
 *
 *
 */
void setMotorVel(int motor, _Bool dir, float speed)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	460b      	mov	r3, r1
 80013ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80013b2:	72fb      	strb	r3, [r7, #11]
	float arr = COUNTARR;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <setMotorVel+0xcc>)
 80013b6:	617b      	str	r3, [r7, #20]
	int vel = (float)speed/100 * arr;
 80013b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013bc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001474 <setMotorVel+0xd0>
 80013c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d0:	ee17 3a90 	vmov	r3, s15
 80013d4:	613b      	str	r3, [r7, #16]

	switch(motor){
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3b01      	subs	r3, #1
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d843      	bhi.n	8001466 <setMotorVel+0xc2>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <setMotorVel+0x40>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001413 	.word	0x08001413
 80013ec:	08001429 	.word	0x08001429
 80013f0:	0800143d 	.word	0x0800143d
 80013f4:	08001455 	.word	0x08001455
 80013f8:	0800145d 	.word	0x0800145d
		case 1:
			M1PWMTIM->M1PWMCH = vel;
 80013fc:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <setMotorVel+0xd4>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6393      	str	r3, [r2, #56]	; 0x38
			HAL_GPIO_WritePin(M1DIR_GPIO_Port, M1DIR_Pin, dir);
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	461a      	mov	r2, r3
 8001406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140a:	481c      	ldr	r0, [pc, #112]	; (800147c <setMotorVel+0xd8>)
 800140c:	f001 fea8 	bl	8003160 <HAL_GPIO_WritePin>
			break;
 8001410:	e029      	b.n	8001466 <setMotorVel+0xc2>
		case 2:
			M2PWMTIM->M2PWMCH = vel;
 8001412:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <setMotorVel+0xdc>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_GPIO_WritePin(M2DIR_GPIO_Port, M2DIR_Pin, dir);
 8001418:	7afb      	ldrb	r3, [r7, #11]
 800141a:	461a      	mov	r2, r3
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <setMotorVel+0xd8>)
 8001422:	f001 fe9d 	bl	8003160 <HAL_GPIO_WritePin>
			break;
 8001426:	e01e      	b.n	8001466 <setMotorVel+0xc2>
		case 3:
			M3PWMTIM->M3PWMCH = vel;
 8001428:	4a16      	ldr	r2, [pc, #88]	; (8001484 <setMotorVel+0xe0>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6393      	str	r3, [r2, #56]	; 0x38
			HAL_GPIO_WritePin(M3DIR_GPIO_Port, M3DIR_Pin, dir);
 800142e:	7afb      	ldrb	r3, [r7, #11]
 8001430:	461a      	mov	r2, r3
 8001432:	2120      	movs	r1, #32
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <setMotorVel+0xe4>)
 8001436:	f001 fe93 	bl	8003160 <HAL_GPIO_WritePin>
			break;
 800143a:	e014      	b.n	8001466 <setMotorVel+0xc2>
		case 4:
			M4PWMTIM->M4PWMCH = vel;
 800143c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	63d3      	str	r3, [r2, #60]	; 0x3c
			HAL_GPIO_WritePin(M4DIR_GPIO_Port, M4DIR_Pin, dir);
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	461a      	mov	r2, r3
 8001448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <setMotorVel+0xd8>)
 800144e:	f001 fe87 	bl	8003160 <HAL_GPIO_WritePin>
			break;
 8001452:	e008      	b.n	8001466 <setMotorVel+0xc2>
		case 5:
			M5PWMTIM->M5PWMCH = vel;
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <setMotorVel+0xd4>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	6353      	str	r3, [r2, #52]	; 0x34
			//HAL_GPIO_WritePin(M5DIR_GPIO_Port, M5DIR_Pin, 1);
			break;
 800145a:	e004      	b.n	8001466 <setMotorVel+0xc2>
		case 6:
			M6PWMTIM->M6PWMCH = vel;
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6393      	str	r3, [r2, #56]	; 0x38
			//HAL_GPIO_WritePin(M6DIR_GPIO_Port, M6DIR_Pin, 1);
			break;
 8001464:	bf00      	nop
	}
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	469c4000 	.word	0x469c4000
 8001474:	42c80000 	.word	0x42c80000
 8001478:	40000400 	.word	0x40000400
 800147c:	40020000 	.word	0x40020000
 8001480:	40000800 	.word	0x40000800
 8001484:	40010400 	.word	0x40010400
 8001488:	40020400 	.word	0x40020400

0800148c <enc_read_pos>:

/*
 * Read position of the encoder
 */
uint8_t enc_read_pos(uint8_t enc_num)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;
	uint8_t raw;
	HAL_I2C_Master_Transmit(&hi2c1, (ENC1ADD + (enc_num - 1)) << 1, NULL, 0, HAL_MAX_DELAY);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	b29b      	uxth	r3, r3
 800149a:	331f      	adds	r3, #31
 800149c:	b29b      	uxth	r3, r3
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	b299      	uxth	r1, r3
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2300      	movs	r3, #0
 80014aa:	2200      	movs	r2, #0
 80014ac:	4811      	ldr	r0, [pc, #68]	; (80014f4 <enc_read_pos+0x68>)
 80014ae:	f001 ffb5 	bl	800341c <HAL_I2C_Master_Transmit>
	// Read data from the PCF8574
	HAL_I2C_Master_Receive(&hi2c1, (ENC1ADD + (enc_num - 1)) << 1, &buf, 1, HAL_MAX_DELAY);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	331f      	adds	r3, #31
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	b299      	uxth	r1, r3
 80014be:	f107 020e 	add.w	r2, r7, #14
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	480a      	ldr	r0, [pc, #40]	; (80014f4 <enc_read_pos+0x68>)
 80014cc:	f002 f8a4 	bl	8003618 <HAL_I2C_Master_Receive>
	raw = encoderMap_87654321[buf] - enc_cal[enc_num-1];
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <enc_read_pos+0x6c>)
 80014d6:	5c9a      	ldrb	r2, [r3, r2]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <enc_read_pos+0x70>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	73fb      	strb	r3, [r7, #15]
	return raw % 128 ;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ea:	b2db      	uxtb	r3, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000144 	.word	0x20000144
 80014f8:	08006b30 	.word	0x08006b30
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_MspInit+0x4c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800153e:	2007      	movs	r0, #7
 8001540:	f001 f8c8 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a3c      	ldr	r2, [pc, #240]	; (8001660 <HAL_ADC_MspInit+0x110>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d172      	bne.n	8001658 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_ADC_MspInit+0x114>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a3a      	ldr	r2, [pc, #232]	; (8001664 <HAL_ADC_MspInit+0x114>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_ADC_MspInit+0x114>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_ADC_MspInit+0x114>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a33      	ldr	r2, [pc, #204]	; (8001664 <HAL_ADC_MspInit+0x114>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_ADC_MspInit+0x114>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_ADC_MspInit+0x114>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <HAL_ADC_MspInit+0x114>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_ADC_MspInit+0x114>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80015c6:	2313      	movs	r3, #19
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4823      	ldr	r0, [pc, #140]	; (8001668 <HAL_ADC_MspInit+0x118>)
 80015da:	f001 fc2d 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e2:	2303      	movs	r3, #3
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	481e      	ldr	r0, [pc, #120]	; (800166c <HAL_ADC_MspInit+0x11c>)
 80015f2:	f001 fc21 	bl	8002e38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_ADC_MspInit+0x120>)
 80015f8:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <HAL_ADC_MspInit+0x124>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_ADC_MspInit+0x120>)
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_ADC_MspInit+0x120>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001614:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800161c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001620:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001624:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800162c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001630:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001634:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <HAL_ADC_MspInit+0x120>)
 800163e:	f001 f88b 	bl	8002758 <HAL_DMA_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001648:	f7ff fea6 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_ADC_MspInit+0x120>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400
 8001670:	200000e4 	.word	0x200000e4
 8001674:	40026410 	.word	0x40026410

08001678 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_I2C_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12c      	bne.n	80016f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_I2C_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_I2C_MspInit+0x88>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_I2C_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016bc:	2312      	movs	r3, #18
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c8:	2304      	movs	r3, #4
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <HAL_I2C_MspInit+0x8c>)
 80016d4:	f001 fbb0 	bl	8002e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_I2C_MspInit+0x88>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_I2C_MspInit+0x88>)
 80016e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_I2C_MspInit+0x88>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	; 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40005400 	.word	0x40005400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020400 	.word	0x40020400

08001708 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d10d      	bne.n	8001736 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_TIM_PWM_MspInit+0x3c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_TIM_PWM_MspInit+0x3c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_TIM_PWM_MspInit+0x3c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001776:	e026      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_TIM_Base_MspInit+0x94>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10e      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
}
 800179e:	e012      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM8)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_TIM_Base_MspInit+0x98>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10d      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_TIM_Base_MspInit+0x90>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d11f      	bne.n	8001846 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a54      	ldr	r2, [pc, #336]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b52      	ldr	r3, [pc, #328]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M4PWM_Pin|M6PWM_Pin;
 8001822:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001834:	2301      	movs	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	4849      	ldr	r0, [pc, #292]	; (8001964 <HAL_TIM_MspPostInit+0x180>)
 8001840:	f001 fafa 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001844:	e088      	b.n	8001958 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a47      	ldr	r2, [pc, #284]	; (8001968 <HAL_TIM_MspPostInit+0x184>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d13c      	bne.n	80018ca <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a41      	ldr	r2, [pc, #260]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a3a      	ldr	r2, [pc, #232]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001898:	2302      	movs	r3, #2
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4832      	ldr	r0, [pc, #200]	; (800196c <HAL_TIM_MspPostInit+0x188>)
 80018a4:	f001 fac8 	bl	8002e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M5PWM_Pin;
 80018a8:	2310      	movs	r3, #16
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b8:	2302      	movs	r3, #2
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M5PWM_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4828      	ldr	r0, [pc, #160]	; (8001964 <HAL_TIM_MspPostInit+0x180>)
 80018c4:	f001 fab8 	bl	8002e38 <HAL_GPIO_Init>
}
 80018c8:	e046      	b.n	8001958 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM4)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a28      	ldr	r2, [pc, #160]	; (8001970 <HAL_TIM_MspPostInit+0x18c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d11e      	bne.n	8001912 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2PWM_Pin;
 80018f0:	2340      	movs	r3, #64	; 0x40
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001900:	2302      	movs	r3, #2
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	4816      	ldr	r0, [pc, #88]	; (8001964 <HAL_TIM_MspPostInit+0x180>)
 800190c:	f001 fa94 	bl	8002e38 <HAL_GPIO_Init>
}
 8001910:	e022      	b.n	8001958 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM8)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_TIM_MspPostInit+0x190>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d11d      	bne.n	8001958 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_TIM_MspPostInit+0x17c>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3PWM_Pin;
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001948:	2303      	movs	r3, #3
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <HAL_TIM_MspPostInit+0x194>)
 8001954:	f001 fa70 	bl	8002e38 <HAL_GPIO_Init>
}
 8001958:	bf00      	nop
 800195a:	3730      	adds	r7, #48	; 0x30
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40020400 	.word	0x40020400
 8001968:	40000400 	.word	0x40000400
 800196c:	40020000 	.word	0x40020000
 8001970:	40000800 	.word	0x40000800
 8001974:	40010400 	.word	0x40010400
 8001978:	40020800 	.word	0x40020800

0800197c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	; 0x30
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a32      	ldr	r2, [pc, #200]	; (8001a64 <HAL_UART_MspInit+0xe8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d12d      	bne.n	80019fa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019e8:	2308      	movs	r3, #8
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	481e      	ldr	r0, [pc, #120]	; (8001a6c <HAL_UART_MspInit+0xf0>)
 80019f4:	f001 fa20 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f8:	e030      	b.n	8001a5c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d12b      	bne.n	8001a5c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_UART_MspInit+0xec>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_UART_MspInit+0xec>)
 8001a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_UART_MspInit+0xec>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_UART_MspInit+0xec>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_UART_MspInit+0xec>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_UART_MspInit+0xec>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <HAL_UART_MspInit+0xf8>)
 8001a58:	f001 f9ee 	bl	8002e38 <HAL_GPIO_Init>
}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40004c00 	.word	0x40004c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40004400 	.word	0x40004400
 8001a74:	40020000 	.word	0x40020000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f8d0 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <DMA2_Stream0_IRQHandler+0x10>)
 8001ad2:	f000 ff47 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200000e4 	.word	0x200000e4

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f004 fb4e 	bl	80061b0 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20020000 	.word	0x20020000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	20000340 	.word	0x20000340
 8001b48:	20000358 	.word	0x20000358

08001b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b76:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b8c:	4c0b      	ldr	r4, [pc, #44]	; (8001bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b9a:	f7ff ffd7 	bl	8001b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f004 fb0d 	bl	80061bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba2:	f7fe ff9d 	bl	8000ae0 <main>
  bx  lr    
 8001ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bb4:	08006c94 	.word	0x08006c94
  ldr r2, =_sbss
 8001bb8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bbc:	20000358 	.word	0x20000358

08001bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <HAL_Init+0x40>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_Init+0x40>)
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_Init+0x40>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fd71 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f808 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f7ff fc82 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x54>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x58>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fd89 	bl	800273e <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 fd51 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x5c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000010 	.word	0x20000010
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000010 	.word	0x20000010
 8001c8c:	20000344 	.word	0x20000344

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000344 	.word	0x20000344

08001ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff ffee 	bl	8001c90 <HAL_GetTick>
 8001cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d005      	beq.n	8001cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_Delay+0x44>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cce:	bf00      	nop
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d8f7      	bhi.n	8001cd0 <HAL_Delay+0x28>
  {
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000010 	.word	0x20000010

08001cf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e033      	b.n	8001d6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fc1e 	bl	8001550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d36:	f023 0302 	bic.w	r3, r3, #2
 8001d3a:	f043 0202 	orr.w	r2, r3, #2
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fa78 	bl	8002238 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d5e:	e001      	b.n	8001d64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Start_DMA+0x1e>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e0e9      	b.n	8001f6a <HAL_ADC_Start_DMA+0x1f2>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d018      	beq.n	8001dde <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dbc:	4b6d      	ldr	r3, [pc, #436]	; (8001f74 <HAL_ADC_Start_DMA+0x1fc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6d      	ldr	r2, [pc, #436]	; (8001f78 <HAL_ADC_Start_DMA+0x200>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9a      	lsrs	r2, r3, #18
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dd0:	e002      	b.n	8001dd8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f9      	bne.n	8001dd2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dec:	d107      	bne.n	8001dfe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	f040 80a1 	bne.w	8001f50 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4c:	d106      	bne.n	8001e5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f023 0206 	bic.w	r2, r3, #6
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
 8001e5a:	e002      	b.n	8001e62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <HAL_ADC_Start_DMA+0x204>)
 8001e6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	4a43      	ldr	r2, [pc, #268]	; (8001f80 <HAL_ADC_Start_DMA+0x208>)
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <HAL_ADC_Start_DMA+0x20c>)
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_ADC_Start_DMA+0x210>)
 8001e84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	334c      	adds	r3, #76	; 0x4c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f000 fcf8 	bl	80028b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12a      	bne.n	8001f26 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_ADC_Start_DMA+0x214>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d015      	beq.n	8001f06 <HAL_ADC_Start_DMA+0x18e>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <HAL_ADC_Start_DMA+0x218>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_Start_DMA+0x178>
 8001ee4:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <HAL_ADC_Start_DMA+0x204>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00a      	beq.n	8001f06 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <HAL_ADC_Start_DMA+0x21c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d136      	bne.n	8001f68 <HAL_ADC_Start_DMA+0x1f0>
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_ADC_Start_DMA+0x204>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d130      	bne.n	8001f68 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d129      	bne.n	8001f68 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	e020      	b.n	8001f68 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_ADC_Start_DMA+0x214>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d11b      	bne.n	8001f68 <HAL_ADC_Start_DMA+0x1f0>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d114      	bne.n	8001f68 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	e00b      	b.n	8001f68 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
 8001f78:	431bde83 	.word	0x431bde83
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	08002431 	.word	0x08002431
 8001f84:	080024eb 	.word	0x080024eb
 8001f88:	08002507 	.word	0x08002507
 8001f8c:	40012000 	.word	0x40012000
 8001f90:	40012100 	.word	0x40012100
 8001f94:	40012200 	.word	0x40012200

08001f98 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e113      	b.n	8002218 <HAL_ADC_ConfigChannel+0x244>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d925      	bls.n	800204c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	4603      	mov	r3, r0
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4403      	add	r3, r0
 800203e:	3b1e      	subs	r3, #30
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e022      	b.n	8002092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	2207      	movs	r2, #7
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	4603      	mov	r3, r0
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4403      	add	r3, r0
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d824      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b05      	subs	r3, #5
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	400a      	ands	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b05      	subs	r3, #5
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
 80020e2:	e04c      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d824      	bhi.n	8002136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3b23      	subs	r3, #35	; 0x23
 80020fe:	221f      	movs	r2, #31
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43da      	mvns	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b23      	subs	r3, #35	; 0x23
 8002128:	fa00 f203 	lsl.w	r2, r0, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
 8002134:	e023      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b41      	subs	r3, #65	; 0x41
 8002148:	221f      	movs	r2, #31
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	400a      	ands	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	4618      	mov	r0, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b41      	subs	r3, #65	; 0x41
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_ADC_ConfigChannel+0x250>)
 8002180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10f      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x1f4>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d122      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x25c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_ADC_ConfigChannel+0x260>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9a      	lsrs	r2, r3, #18
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	40012000 	.word	0x40012000
 800222c:	10000012 	.word	0x10000012
 8002230:	20000008 	.word	0x20000008
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002240:	4b79      	ldr	r3, [pc, #484]	; (8002428 <ADC_Init+0x1f0>)
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800226c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	021a      	lsls	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <ADC_Init+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e00f      	b.n	8002336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0202 	bic.w	r2, r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	005a      	lsls	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	3b01      	subs	r3, #1
 8002390:	035a      	lsls	r2, r3, #13
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e007      	b.n	80023ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	051a      	lsls	r2, r3, #20
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ee:	025a      	lsls	r2, r3, #9
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	029a      	lsls	r2, r3, #10
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	0f000001 	.word	0x0f000001

08002430 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002446:	2b00      	cmp	r3, #0
 8002448:	d13c      	bne.n	80024c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d12b      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	d127      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002484:	2b00      	cmp	r3, #0
 8002486:	d119      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0220 	bic.w	r2, r2, #32
 8002496:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff fd6b 	bl	8001f98 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024c2:	e00e      	b.n	80024e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fd75 	bl	8001fc0 <HAL_ADC_ErrorCallback>
}
 80024d6:	e004      	b.n	80024e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fd57 	bl	8001fac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff fd4a 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff29 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff3e 	bl	800257c <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff fa94 	bl	8001c90 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e099      	b.n	80028a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002794:	e00f      	b.n	80027b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002796:	f7ff fa7b 	bl	8001c90 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d908      	bls.n	80027b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2203      	movs	r2, #3
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e078      	b.n	80028a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e8      	bne.n	8002796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <HAL_DMA_Init+0x158>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2b04      	cmp	r3, #4
 800280e:	d107      	bne.n	8002820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4313      	orrs	r3, r2
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f023 0307 	bic.w	r3, r3, #7
 8002836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b04      	cmp	r3, #4
 8002848:	d117      	bne.n	800287a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00e      	beq.n	800287a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fa6f 	bl	8002d40 <DMA_CheckFifoParam>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2240      	movs	r2, #64	; 0x40
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002876:	2301      	movs	r3, #1
 8002878:	e016      	b.n	80028a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fa26 	bl	8002cd4 <DMA_CalcBaseAndBitshift>
 8002888:	4603      	mov	r3, r0
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	223f      	movs	r2, #63	; 0x3f
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	f010803f 	.word	0xf010803f

080028b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_DMA_Start_IT+0x26>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e040      	b.n	800295c <HAL_DMA_Start_IT+0xa8>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d12f      	bne.n	800294e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f9b8 	bl	8002c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	223f      	movs	r2, #63	; 0x3f
 800290e:	409a      	lsls	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0216 	orr.w	r2, r2, #22
 8002922:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0208 	orr.w	r2, r2, #8
 800293a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e005      	b.n	800295a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800295a:	7dfb      	ldrb	r3, [r7, #23]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002970:	4b8e      	ldr	r3, [pc, #568]	; (8002bac <HAL_DMA_IRQHandler+0x248>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a8e      	ldr	r2, [pc, #568]	; (8002bb0 <HAL_DMA_IRQHandler+0x24c>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2208      	movs	r2, #8
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2208      	movs	r2, #8
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2201      	movs	r2, #1
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0202 	orr.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2210      	movs	r2, #16
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d043      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d03c      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2210      	movs	r2, #16
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d024      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e01f      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2220      	movs	r2, #32
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808f 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8087 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2220      	movs	r2, #32
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d136      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0216 	bic.w	r2, r2, #22
 8002b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_DMA_IRQHandler+0x1da>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0208 	bic.w	r2, r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d07e      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
        }
        return;
 8002b7a:	e079      	b.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01d      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e02c      	b.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
 8002baa:	bf00      	nop
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
 8002bc4:	e01e      	b.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0210 	bic.w	r2, r2, #16
 8002be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d032      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2205      	movs	r2, #5
 8002c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d307      	bcc.n	8002c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f2      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x2cc>
 8002c4a:	e000      	b.n	8002c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	4798      	blx	r3
 8002c6e:	e000      	b.n	8002c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c70:	bf00      	nop
    }
  }
}
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d108      	bne.n	8002cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cb6:	e007      	b.n	8002cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	3b10      	subs	r3, #16
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <DMA_CalcBaseAndBitshift+0x64>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cee:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <DMA_CalcBaseAndBitshift+0x68>)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d909      	bls.n	8002d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	1d1a      	adds	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	659a      	str	r2, [r3, #88]	; 0x58
 8002d14:	e007      	b.n	8002d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	aaaaaaab 	.word	0xaaaaaaab
 8002d3c:	08006c48 	.word	0x08006c48

08002d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11f      	bne.n	8002d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d856      	bhi.n	8002e0e <DMA_CheckFifoParam+0xce>
 8002d60:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <DMA_CheckFifoParam+0x28>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d8b 	.word	0x08002d8b
 8002d70:	08002d79 	.word	0x08002d79
 8002d74:	08002e0f 	.word	0x08002e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d046      	beq.n	8002e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e043      	b.n	8002e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d92:	d140      	bne.n	8002e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e03d      	b.n	8002e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da2:	d121      	bne.n	8002de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d837      	bhi.n	8002e1a <DMA_CheckFifoParam+0xda>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <DMA_CheckFifoParam+0x70>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dc7 	.word	0x08002dc7
 8002db8:	08002dc1 	.word	0x08002dc1
 8002dbc:	08002dd9 	.word	0x08002dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e030      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d025      	beq.n	8002e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd6:	e022      	b.n	8002e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de0:	d11f      	bne.n	8002e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002de6:	e01c      	b.n	8002e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d903      	bls.n	8002df6 <DMA_CheckFifoParam+0xb6>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d003      	beq.n	8002dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002df4:	e018      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfa:	e015      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00e      	beq.n	8002e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e00b      	b.n	8002e26 <DMA_CheckFifoParam+0xe6>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e00a      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e12:	bf00      	nop
 8002e14:	e008      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e006      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e004      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <DMA_CheckFifoParam+0xe8>
      break;
 8002e26:	bf00      	nop
    }
  } 
  
  return status; 
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e165      	b.n	8003120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	f040 8154 	bne.w	800311a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d005      	beq.n	8002e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d130      	bne.n	8002eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 0201 	and.w	r2, r3, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d017      	beq.n	8002f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d123      	bne.n	8002f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	08da      	lsrs	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3208      	adds	r2, #8
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	69b9      	ldr	r1, [r7, #24]
 8002f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80ae 	beq.w	800311a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <HAL_GPIO_Init+0x300>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a5c      	ldr	r2, [pc, #368]	; (8003138 <HAL_GPIO_Init+0x300>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_GPIO_Init+0x300>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fda:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_GPIO_Init+0x304>)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_GPIO_Init+0x308>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d025      	beq.n	8003052 <HAL_GPIO_Init+0x21a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4e      	ldr	r2, [pc, #312]	; (8003144 <HAL_GPIO_Init+0x30c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01f      	beq.n	800304e <HAL_GPIO_Init+0x216>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4d      	ldr	r2, [pc, #308]	; (8003148 <HAL_GPIO_Init+0x310>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d019      	beq.n	800304a <HAL_GPIO_Init+0x212>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_GPIO_Init+0x314>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_GPIO_Init+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4b      	ldr	r2, [pc, #300]	; (8003150 <HAL_GPIO_Init+0x318>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00d      	beq.n	8003042 <HAL_GPIO_Init+0x20a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <HAL_GPIO_Init+0x31c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <HAL_GPIO_Init+0x206>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_GPIO_Init+0x320>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_GPIO_Init+0x202>
 8003036:	2306      	movs	r3, #6
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800303a:	2307      	movs	r3, #7
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x21c>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	; (800313c <HAL_GPIO_Init+0x304>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_GPIO_Init+0x324>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a31      	ldr	r2, [pc, #196]	; (800315c <HAL_GPIO_Init+0x324>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_GPIO_Init+0x324>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_GPIO_Init+0x324>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_GPIO_Init+0x324>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_GPIO_Init+0x324>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_GPIO_Init+0x324>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_GPIO_Init+0x324>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae96 	bls.w	8002e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e12b      	b.n	80033fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fa5c 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	; 0x24
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f8:	f001 f854 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a81      	ldr	r2, [pc, #516]	; (8003408 <HAL_I2C_Init+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d807      	bhi.n	8003218 <HAL_I2C_Init+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a80      	ldr	r2, [pc, #512]	; (800340c <HAL_I2C_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e006      	b.n	8003226 <HAL_I2C_Init+0x92>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a7d      	ldr	r2, [pc, #500]	; (8003410 <HAL_I2C_Init+0x27c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0e7      	b.n	80033fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a78      	ldr	r2, [pc, #480]	; (8003414 <HAL_I2C_Init+0x280>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a6a      	ldr	r2, [pc, #424]	; (8003408 <HAL_I2C_Init+0x274>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d802      	bhi.n	8003268 <HAL_I2C_Init+0xd4>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	e009      	b.n	800327c <HAL_I2C_Init+0xe8>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a69      	ldr	r2, [pc, #420]	; (8003418 <HAL_I2C_Init+0x284>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	3301      	adds	r3, #1
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800328e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	495c      	ldr	r1, [pc, #368]	; (8003408 <HAL_I2C_Init+0x274>)
 8003298:	428b      	cmp	r3, r1
 800329a:	d819      	bhi.n	80032d0 <HAL_I2C_Init+0x13c>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e59      	subs	r1, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032b0:	400b      	ands	r3, r1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_I2C_Init+0x138>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e59      	subs	r1, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	e051      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e04f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_I2C_Init+0x168>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Init+0x18e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1e58      	subs	r0, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	0099      	lsls	r1, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x196>
 8003326:	2301      	movs	r3, #1
 8003328:	e022      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <HAL_I2C_Init+0x1bc>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e58      	subs	r0, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	440b      	add	r3, r1
 8003340:	fbb0 f3f3 	udiv	r3, r0, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334e:	e00f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6809      	ldr	r1, [r1, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800339e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6911      	ldr	r1, [r2, #16]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	000186a0 	.word	0x000186a0
 800340c:	001e847f 	.word	0x001e847f
 8003410:	003d08ff 	.word	0x003d08ff
 8003414:	431bde83 	.word	0x431bde83
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7fe fc2e 	bl	8001c90 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 80e0 	bne.w	8003604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	4970      	ldr	r1, [pc, #448]	; (8003610 <HAL_I2C_Master_Transmit+0x1f4>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fc58 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e0d3      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Master_Transmit+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e0cc      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2221      	movs	r2, #33	; 0x21
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_I2C_Master_Transmit+0x1f8>)
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fac2 	bl	8003a64 <I2C_MasterRequestWrite>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08d      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003500:	e066      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fcd2 	bl	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6a39      	ldr	r1, [r7, #32]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fcc2 	bl	8003f32 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d107      	bne.n	80035cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e01a      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d194      	bne.n	8003502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000

08003618 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	460b      	mov	r3, r1
 8003626:	817b      	strh	r3, [r7, #10]
 8003628:	4613      	mov	r3, r2
 800362a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800362c:	f7fe fb30 	bl	8001c90 <HAL_GetTick>
 8003630:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b20      	cmp	r3, #32
 800363c:	f040 820b 	bne.w	8003a56 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2319      	movs	r3, #25
 8003646:	2201      	movs	r2, #1
 8003648:	497c      	ldr	r1, [pc, #496]	; (800383c <HAL_I2C_Master_Receive+0x224>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fb5a 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
 8003658:	e1fe      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_I2C_Master_Receive+0x50>
 8003664:	2302      	movs	r3, #2
 8003666:	e1f7      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d007      	beq.n	800368e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800369c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2222      	movs	r2, #34	; 0x22
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2210      	movs	r2, #16
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	893a      	ldrh	r2, [r7, #8]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <HAL_I2C_Master_Receive+0x228>)
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d0:	8979      	ldrh	r1, [r7, #10]
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fa46 	bl	8003b68 <I2C_MasterRequestRead>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e1b8      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d113      	bne.n	8003716 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	623b      	str	r3, [r7, #32]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	623b      	str	r3, [r7, #32]
 8003702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e18c      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	2b01      	cmp	r3, #1
 800371c:	d11b      	bne.n	8003756 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e16c      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	2b02      	cmp	r3, #2
 800375c:	d11b      	bne.n	8003796 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	e14c      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037bc:	e138      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	f200 80f1 	bhi.w	80039aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d123      	bne.n	8003818 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fbed 	bl	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e139      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003816:	e10b      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b02      	cmp	r3, #2
 800381e:	d14e      	bne.n	80038be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	4906      	ldr	r1, [pc, #24]	; (8003844 <HAL_I2C_Master_Receive+0x22c>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fa6a 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e10e      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
 800383a:	bf00      	nop
 800383c:	00100002 	.word	0x00100002
 8003840:	ffff0000 	.word	0xffff0000
 8003844:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038bc:	e0b8      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	2200      	movs	r2, #0
 80038c6:	4966      	ldr	r1, [pc, #408]	; (8003a60 <HAL_I2C_Master_Receive+0x448>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa1b 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0bf      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	2200      	movs	r2, #0
 8003922:	494f      	ldr	r1, [pc, #316]	; (8003a60 <HAL_I2C_Master_Receive+0x448>)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f9ed 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e091      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a8:	e042      	b.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fb00 	bl	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e04c      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d118      	bne.n	8003a30 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f aec2 	bne.w	80037be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3728      	adds	r7, #40	; 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	00010004 	.word	0x00010004

08003a64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	460b      	mov	r3, r1
 8003a72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d006      	beq.n	8003a8e <I2C_MasterRequestWrite+0x2a>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d003      	beq.n	8003a8e <I2C_MasterRequestWrite+0x2a>
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a8c:	d108      	bne.n	8003aa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e00b      	b.n	8003ab8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	2b12      	cmp	r3, #18
 8003aa6:	d107      	bne.n	8003ab8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f91d 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ade:	d103      	bne.n	8003ae8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e035      	b.n	8003b58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af4:	d108      	bne.n	8003b08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	e01b      	b.n	8003b40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	11db      	asrs	r3, r3, #7
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0306 	and.w	r3, r3, #6
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f063 030f 	orn	r3, r3, #15
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	490e      	ldr	r1, [pc, #56]	; (8003b60 <I2C_MasterRequestWrite+0xfc>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f943 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e010      	b.n	8003b58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4907      	ldr	r1, [pc, #28]	; (8003b64 <I2C_MasterRequestWrite+0x100>)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f933 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010008 	.word	0x00010008
 8003b64:	00010002 	.word	0x00010002

08003b68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	460b      	mov	r3, r1
 8003b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d006      	beq.n	8003ba2 <I2C_MasterRequestRead+0x3a>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d003      	beq.n	8003ba2 <I2C_MasterRequestRead+0x3a>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ba0:	d108      	bne.n	8003bb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e00b      	b.n	8003bcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b11      	cmp	r3, #17
 8003bba:	d107      	bne.n	8003bcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f893 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d103      	bne.n	8003bfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e079      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c08:	d108      	bne.n	8003c1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c0a:	897b      	ldrh	r3, [r7, #10]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]
 8003c1a:	e05f      	b.n	8003cdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c1c:	897b      	ldrh	r3, [r7, #10]
 8003c1e:	11db      	asrs	r3, r3, #7
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0306 	and.w	r3, r3, #6
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f063 030f 	orn	r3, r3, #15
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4930      	ldr	r1, [pc, #192]	; (8003cfc <I2C_MasterRequestRead+0x194>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8b9 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e054      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4929      	ldr	r1, [pc, #164]	; (8003d00 <I2C_MasterRequestRead+0x198>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8a9 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e044      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f831 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb6:	d103      	bne.n	8003cc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e017      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003cc4:	897b      	ldrh	r3, [r7, #10]
 8003cc6:	11db      	asrs	r3, r3, #7
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 0306 	and.w	r3, r3, #6
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f063 030e 	orn	r3, r3, #14
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <I2C_MasterRequestRead+0x198>)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f865 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	00010008 	.word	0x00010008
 8003d00:	00010002 	.word	0x00010002

08003d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d14:	e025      	b.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d021      	beq.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fd ffb7 	bl	8001c90 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e023      	b.n	8003daa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10d      	bne.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	e00c      	b.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d0b6      	beq.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc0:	e051      	b.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d123      	bne.n	8003e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e046      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d021      	beq.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fd ff35 	bl	8001c90 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e020      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e00b      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d18d      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebc:	e02d      	b.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8ce 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d021      	beq.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fd fedb 	bl	8001c90 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b80      	cmp	r3, #128	; 0x80
 8003f26:	d1ca      	bne.n	8003ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f3e:	e02d      	b.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f88d 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e02d      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d021      	beq.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fd fe9a 	bl	8001c90 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d116      	bne.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e007      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d1ca      	bne.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc0:	e042      	b.n	8004048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d119      	bne.n	8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0210 	mvn.w	r2, #16
 8003fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e029      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fd fe44 	bl	8001c90 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e007      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d1b5      	bne.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d11b      	bne.n	80040b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fd fd6e 	bl	8001c90 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd fd6a 	bl	8001c90 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f855 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fd fcce 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	08006c30 	.word	0x08006c30
 8004284:	20000008 	.word	0x20000008
 8004288:	2000000c 	.word	0x2000000c

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000008 	.word	0x20000008

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042a8:	f7ff fff0 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	08006c40 	.word	0x08006c40

080042cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042d0:	f7ff ffdc 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0b5b      	lsrs	r3, r3, #13
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08006c40 	.word	0x08006c40

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b0ae      	sub	sp, #184	; 0xb8
 80042fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800431a:	4bcb      	ldr	r3, [pc, #812]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b0c      	cmp	r3, #12
 8004324:	f200 8206 	bhi.w	8004734 <HAL_RCC_GetSysClockFreq+0x440>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <HAL_RCC_GetSysClockFreq+0x3c>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004365 	.word	0x08004365
 8004334:	08004735 	.word	0x08004735
 8004338:	08004735 	.word	0x08004735
 800433c:	08004735 	.word	0x08004735
 8004340:	0800436d 	.word	0x0800436d
 8004344:	08004735 	.word	0x08004735
 8004348:	08004735 	.word	0x08004735
 800434c:	08004735 	.word	0x08004735
 8004350:	08004375 	.word	0x08004375
 8004354:	08004735 	.word	0x08004735
 8004358:	08004735 	.word	0x08004735
 800435c:	08004735 	.word	0x08004735
 8004360:	08004565 	.word	0x08004565
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4bb9      	ldr	r3, [pc, #740]	; (800464c <HAL_RCC_GetSysClockFreq+0x358>)
 8004366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800436a:	e1e7      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436c:	4bb8      	ldr	r3, [pc, #736]	; (8004650 <HAL_RCC_GetSysClockFreq+0x35c>)
 800436e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004372:	e1e3      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004374:	4bb4      	ldr	r3, [pc, #720]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004380:	4bb1      	ldr	r3, [pc, #708]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d071      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4bae      	ldr	r3, [pc, #696]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004398:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800439c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c4:	0150      	lsls	r0, r2, #5
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4621      	mov	r1, r4
 80043cc:	1a51      	subs	r1, r2, r1
 80043ce:	6439      	str	r1, [r7, #64]	; 0x40
 80043d0:	4629      	mov	r1, r5
 80043d2:	eb63 0301 	sbc.w	r3, r3, r1
 80043d6:	647b      	str	r3, [r7, #68]	; 0x44
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80043e4:	4649      	mov	r1, r9
 80043e6:	018b      	lsls	r3, r1, #6
 80043e8:	4641      	mov	r1, r8
 80043ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ee:	4641      	mov	r1, r8
 80043f0:	018a      	lsls	r2, r1, #6
 80043f2:	4641      	mov	r1, r8
 80043f4:	1a51      	subs	r1, r2, r1
 80043f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043f8:	4649      	mov	r1, r9
 80043fa:	eb63 0301 	sbc.w	r3, r3, r1
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800440c:	4649      	mov	r1, r9
 800440e:	00cb      	lsls	r3, r1, #3
 8004410:	4641      	mov	r1, r8
 8004412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004416:	4641      	mov	r1, r8
 8004418:	00ca      	lsls	r2, r1, #3
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	4603      	mov	r3, r0
 8004420:	4622      	mov	r2, r4
 8004422:	189b      	adds	r3, r3, r2
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
 8004426:	462b      	mov	r3, r5
 8004428:	460a      	mov	r2, r1
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800443c:	4629      	mov	r1, r5
 800443e:	024b      	lsls	r3, r1, #9
 8004440:	4621      	mov	r1, r4
 8004442:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004446:	4621      	mov	r1, r4
 8004448:	024a      	lsls	r2, r1, #9
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004452:	2200      	movs	r2, #0
 8004454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800445c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004460:	f7fb ff26 	bl	80002b0 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800446e:	e067      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004470:	4b75      	ldr	r3, [pc, #468]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800447c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004488:	67bb      	str	r3, [r7, #120]	; 0x78
 800448a:	2300      	movs	r3, #0
 800448c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800448e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004492:	4622      	mov	r2, r4
 8004494:	462b      	mov	r3, r5
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a4:	0150      	lsls	r0, r2, #5
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4621      	mov	r1, r4
 80044ac:	1a51      	subs	r1, r2, r1
 80044ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80044b0:	4629      	mov	r1, r5
 80044b2:	eb63 0301 	sbc.w	r3, r3, r1
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80044c4:	4649      	mov	r1, r9
 80044c6:	018b      	lsls	r3, r1, #6
 80044c8:	4641      	mov	r1, r8
 80044ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ce:	4641      	mov	r1, r8
 80044d0:	018a      	lsls	r2, r1, #6
 80044d2:	4641      	mov	r1, r8
 80044d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80044d8:	4649      	mov	r1, r9
 80044da:	eb63 0b01 	sbc.w	fp, r3, r1
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f2:	4692      	mov	sl, r2
 80044f4:	469b      	mov	fp, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	eb1a 0303 	adds.w	r3, sl, r3
 80044fc:	623b      	str	r3, [r7, #32]
 80044fe:	462b      	mov	r3, r5
 8004500:	eb4b 0303 	adc.w	r3, fp, r3
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004512:	4629      	mov	r1, r5
 8004514:	028b      	lsls	r3, r1, #10
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800451c:	4621      	mov	r1, r4
 800451e:	028a      	lsls	r2, r1, #10
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004528:	2200      	movs	r2, #0
 800452a:	673b      	str	r3, [r7, #112]	; 0x70
 800452c:	677a      	str	r2, [r7, #116]	; 0x74
 800452e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004532:	f7fb febd 	bl	80002b0 <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4613      	mov	r3, r2
 800453c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004540:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	3301      	adds	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004562:	e0eb      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004564:	4b38      	ldr	r3, [pc, #224]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d06b      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457c:	4b32      	ldr	r3, [pc, #200]	; (8004648 <HAL_RCC_GetSysClockFreq+0x354>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	2200      	movs	r2, #0
 8004584:	66bb      	str	r3, [r7, #104]	; 0x68
 8004586:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800458a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458e:	663b      	str	r3, [r7, #96]	; 0x60
 8004590:	2300      	movs	r3, #0
 8004592:	667b      	str	r3, [r7, #100]	; 0x64
 8004594:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004598:	4622      	mov	r2, r4
 800459a:	462b      	mov	r3, r5
 800459c:	f04f 0000 	mov.w	r0, #0
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	0159      	lsls	r1, r3, #5
 80045a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045aa:	0150      	lsls	r0, r2, #5
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4621      	mov	r1, r4
 80045b2:	1a51      	subs	r1, r2, r1
 80045b4:	61b9      	str	r1, [r7, #24]
 80045b6:	4629      	mov	r1, r5
 80045b8:	eb63 0301 	sbc.w	r3, r3, r1
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045ca:	4659      	mov	r1, fp
 80045cc:	018b      	lsls	r3, r1, #6
 80045ce:	4651      	mov	r1, sl
 80045d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045d4:	4651      	mov	r1, sl
 80045d6:	018a      	lsls	r2, r1, #6
 80045d8:	4651      	mov	r1, sl
 80045da:	ebb2 0801 	subs.w	r8, r2, r1
 80045de:	4659      	mov	r1, fp
 80045e0:	eb63 0901 	sbc.w	r9, r3, r1
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045f8:	4690      	mov	r8, r2
 80045fa:	4699      	mov	r9, r3
 80045fc:	4623      	mov	r3, r4
 80045fe:	eb18 0303 	adds.w	r3, r8, r3
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	462b      	mov	r3, r5
 8004606:	eb49 0303 	adc.w	r3, r9, r3
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004618:	4629      	mov	r1, r5
 800461a:	024b      	lsls	r3, r1, #9
 800461c:	4621      	mov	r1, r4
 800461e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004622:	4621      	mov	r1, r4
 8004624:	024a      	lsls	r2, r1, #9
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800462e:	2200      	movs	r2, #0
 8004630:	65bb      	str	r3, [r7, #88]	; 0x58
 8004632:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004634:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004638:	f7fb fe3a 	bl	80002b0 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004646:	e065      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x420>
 8004648:	40023800 	.word	0x40023800
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004654:	4b3d      	ldr	r3, [pc, #244]	; (800474c <HAL_RCC_GetSysClockFreq+0x458>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	2200      	movs	r2, #0
 800465c:	4618      	mov	r0, r3
 800465e:	4611      	mov	r1, r2
 8004660:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004664:	653b      	str	r3, [r7, #80]	; 0x50
 8004666:	2300      	movs	r3, #0
 8004668:	657b      	str	r3, [r7, #84]	; 0x54
 800466a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	0159      	lsls	r1, r3, #5
 800467c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004680:	0150      	lsls	r0, r2, #5
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4641      	mov	r1, r8
 8004688:	1a51      	subs	r1, r2, r1
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	4649      	mov	r1, r9
 800468e:	eb63 0301 	sbc.w	r3, r3, r1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046a0:	4659      	mov	r1, fp
 80046a2:	018b      	lsls	r3, r1, #6
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046aa:	4651      	mov	r1, sl
 80046ac:	018a      	lsls	r2, r1, #6
 80046ae:	4651      	mov	r1, sl
 80046b0:	1a54      	subs	r4, r2, r1
 80046b2:	4659      	mov	r1, fp
 80046b4:	eb63 0501 	sbc.w	r5, r3, r1
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	00eb      	lsls	r3, r5, #3
 80046c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c6:	00e2      	lsls	r2, r4, #3
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	18e3      	adds	r3, r4, r3
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	464b      	mov	r3, r9
 80046d4:	eb45 0303 	adc.w	r3, r5, r3
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046e6:	4629      	mov	r1, r5
 80046e8:	028b      	lsls	r3, r1, #10
 80046ea:	4621      	mov	r1, r4
 80046ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f0:	4621      	mov	r1, r4
 80046f2:	028a      	lsls	r2, r1, #10
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046fc:	2200      	movs	r2, #0
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004700:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004702:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004706:	f7fb fdd3 	bl	80002b0 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4613      	mov	r3, r2
 8004710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_RCC_GetSysClockFreq+0x458>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	0f1b      	lsrs	r3, r3, #28
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004726:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004732:	e003      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800473a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800473c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004740:	4618      	mov	r0, r3
 8004742:	37b8      	adds	r7, #184	; 0xb8
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
 8004750:	00f42400 	.word	0x00f42400

08004754 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e28d      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8083 	beq.w	800487a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004774:	4b94      	ldr	r3, [pc, #592]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b04      	cmp	r3, #4
 800477e:	d019      	beq.n	80047b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004780:	4b91      	ldr	r3, [pc, #580]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004788:	2b08      	cmp	r3, #8
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800478c:	4b8e      	ldr	r3, [pc, #568]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004798:	d00c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479a:	4b8b      	ldr	r3, [pc, #556]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d112      	bne.n	80047cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a6:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b2:	d10b      	bne.n	80047cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	4b84      	ldr	r3, [pc, #528]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05b      	beq.n	8004878 <HAL_RCC_OscConfig+0x124>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d157      	bne.n	8004878 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e25a      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d106      	bne.n	80047e4 <HAL_RCC_OscConfig+0x90>
 80047d6:	4b7c      	ldr	r3, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7b      	ldr	r2, [pc, #492]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e01d      	b.n	8004820 <HAL_RCC_OscConfig+0xcc>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0xb4>
 80047ee:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a75      	ldr	r2, [pc, #468]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4b73      	ldr	r3, [pc, #460]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a72      	ldr	r2, [pc, #456]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0xcc>
 8004808:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800480e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6b      	ldr	r2, [pc, #428]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800481a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd fa32 	bl	8001c90 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004830:	f7fd fa2e 	bl	8001c90 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e21f      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b61      	ldr	r3, [pc, #388]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0xdc>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd fa1e 	bl	8001c90 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004858:	f7fd fa1a 	bl	8001c90 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e20b      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	4b57      	ldr	r3, [pc, #348]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x104>
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d06f      	beq.n	8004966 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004886:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b00      	cmp	r3, #0
 8004890:	d017      	beq.n	80048c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004892:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800489a:	2b08      	cmp	r3, #8
 800489c:	d105      	bne.n	80048aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800489e:	4b4a      	ldr	r3, [pc, #296]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b44      	ldr	r3, [pc, #272]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x186>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1d3      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4937      	ldr	r1, [pc, #220]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	e03a      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_RCC_OscConfig+0x278>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fd f9c7 	bl	8001c90 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004906:	f7fd f9c3 	bl	8001c90 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1b4      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4925      	ldr	r1, [pc, #148]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <HAL_RCC_OscConfig+0x278>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd f9a6 	bl	8001c90 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004948:	f7fd f9a2 	bl	8001c90 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e193      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d036      	beq.n	80049e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_RCC_OscConfig+0x27c>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fd f986 	bl	8001c90 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004988:	f7fd f982 	bl	8001c90 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e173      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_OscConfig+0x274>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x234>
 80049a6:	e01b      	b.n	80049e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd f96f 	bl	8001c90 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	e00e      	b.n	80049d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b6:	f7fd f96b 	bl	8001c90 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d907      	bls.n	80049d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e15c      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
 80049c8:	40023800 	.word	0x40023800
 80049cc:	42470000 	.word	0x42470000
 80049d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ea      	bne.n	80049b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8097 	beq.w	8004b1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b83      	ldr	r3, [pc, #524]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10f      	bne.n	8004a1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	4b7f      	ldr	r3, [pc, #508]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	4a7e      	ldr	r2, [pc, #504]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0e:	4b7c      	ldr	r3, [pc, #496]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1e:	4b79      	ldr	r3, [pc, #484]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d118      	bne.n	8004a5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a2a:	4b76      	ldr	r3, [pc, #472]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a75      	ldr	r2, [pc, #468]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a36:	f7fd f92b 	bl	8001c90 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3e:	f7fd f927 	bl	8001c90 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e118      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <HAL_RCC_OscConfig+0x4b0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x31e>
 8004a64:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a70:	e01c      	b.n	8004aac <HAL_RCC_OscConfig+0x358>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x340>
 8004a7a:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a60      	ldr	r2, [pc, #384]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a80:	f043 0304 	orr.w	r3, r3, #4
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
 8004a86:	4b5e      	ldr	r3, [pc, #376]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0x358>
 8004a94:	4b5a      	ldr	r3, [pc, #360]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a59      	ldr	r2, [pc, #356]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	4b57      	ldr	r3, [pc, #348]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a56      	ldr	r2, [pc, #344]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004aa6:	f023 0304 	bic.w	r3, r3, #4
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fd f8ec 	bl	8001c90 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f7fd f8e8 	bl	8001c90 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0d7      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ee      	beq.n	8004abc <HAL_RCC_OscConfig+0x368>
 8004ade:	e014      	b.n	8004b0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fd f8d6 	bl	8001c90 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fd f8d2 	bl	8001c90 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0c1      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afe:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ee      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	4a3a      	ldr	r2, [pc, #232]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80ad 	beq.w	8004c80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d060      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d145      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <HAL_RCC_OscConfig+0x4b4>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fd f8a6 	bl	8001c90 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fd f8a2 	bl	8001c90 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e093      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	491b      	ldr	r1, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x4b4>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fd f877 	bl	8001c90 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fd f873 	bl	8001c90 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e064      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x452>
 8004bc4:	e05c      	b.n	8004c80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCC_OscConfig+0x4b4>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd f860 	bl	8001c90 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd f85c 	bl	8001c90 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e04d      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_RCC_OscConfig+0x4ac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x480>
 8004bf2:	e045      	b.n	8004c80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e040      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <HAL_RCC_OscConfig+0x538>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d030      	beq.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d129      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d122      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d119      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d10f      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800

08004c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e041      	b.n	8004d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc fd46 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 face 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e041      	b.n	8004dc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fc fcd7 	bl	8001708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f000 fa7f 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <HAL_TIM_PWM_Start+0x24>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e022      	b.n	8004e36 <HAL_TIM_PWM_Start+0x6a>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d109      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x3e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	e015      	b.n	8004e36 <HAL_TIM_PWM_Start+0x6a>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d109      	bne.n	8004e24 <HAL_TIM_PWM_Start+0x58>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e008      	b.n	8004e36 <HAL_TIM_PWM_Start+0x6a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07c      	b.n	8004f38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0x82>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e4c:	e013      	b.n	8004e76 <HAL_TIM_PWM_Start+0xaa>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0x92>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e5c:	e00b      	b.n	8004e76 <HAL_TIM_PWM_Start+0xaa>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e6c:	e003      	b.n	8004e76 <HAL_TIM_PWM_Start+0xaa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fce0 	bl	8005844 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <HAL_TIM_PWM_Start+0x174>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIM_PWM_Start+0xcc>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <HAL_TIM_PWM_Start+0x178>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_PWM_Start+0xd0>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_PWM_Start+0xd2>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <HAL_TIM_PWM_Start+0x174>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d01d      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_TIM_PWM_Start+0x17c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_TIM_PWM_Start+0x180>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <HAL_TIM_PWM_Start+0x184>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_TIM_PWM_Start+0x178>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_TIM_PWM_Start+0x188>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <HAL_TIM_PWM_Start+0x18c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d010      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	e007      	b.n	8004f36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40001800 	.word	0x40001800

08004f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0ae      	b.n	80050d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	f200 809f 	bhi.w	80050c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fc5 	.word	0x08004fc5
 8004f94:	080050c9 	.word	0x080050c9
 8004f98:	080050c9 	.word	0x080050c9
 8004f9c:	080050c9 	.word	0x080050c9
 8004fa0:	08005005 	.word	0x08005005
 8004fa4:	080050c9 	.word	0x080050c9
 8004fa8:	080050c9 	.word	0x080050c9
 8004fac:	080050c9 	.word	0x080050c9
 8004fb0:	08005047 	.word	0x08005047
 8004fb4:	080050c9 	.word	0x080050c9
 8004fb8:	080050c9 	.word	0x080050c9
 8004fbc:	080050c9 	.word	0x080050c9
 8004fc0:	08005087 	.word	0x08005087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f9f0 	bl	80053b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0208 	orr.w	r2, r2, #8
 8004fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0204 	bic.w	r2, r2, #4
 8004fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6999      	ldr	r1, [r3, #24]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	619a      	str	r2, [r3, #24]
      break;
 8005002:	e064      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fa40 	bl	8005490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	021a      	lsls	r2, r3, #8
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	619a      	str	r2, [r3, #24]
      break;
 8005044:	e043      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fa95 	bl	800557c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0208 	orr.w	r2, r2, #8
 8005060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0204 	bic.w	r2, r2, #4
 8005070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69d9      	ldr	r1, [r3, #28]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	61da      	str	r2, [r3, #28]
      break;
 8005084:	e023      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fae9 	bl	8005664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	021a      	lsls	r2, r3, #8
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	61da      	str	r2, [r3, #28]
      break;
 80050c6:	e002      	b.n	80050ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]
      break;
 80050cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_TIM_ConfigClockSource+0x1c>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e0b4      	b.n	8005266 <HAL_TIM_ConfigClockSource+0x186>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800511a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005134:	d03e      	beq.n	80051b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513a:	f200 8087 	bhi.w	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005142:	f000 8086 	beq.w	8005252 <HAL_TIM_ConfigClockSource+0x172>
 8005146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514a:	d87f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b70      	cmp	r3, #112	; 0x70
 800514e:	d01a      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0xa6>
 8005150:	2b70      	cmp	r3, #112	; 0x70
 8005152:	d87b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b60      	cmp	r3, #96	; 0x60
 8005156:	d050      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x11a>
 8005158:	2b60      	cmp	r3, #96	; 0x60
 800515a:	d877      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b50      	cmp	r3, #80	; 0x50
 800515e:	d03c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0xfa>
 8005160:	2b50      	cmp	r3, #80	; 0x50
 8005162:	d873      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d058      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x13a>
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d86f      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b30      	cmp	r3, #48	; 0x30
 800516e:	d064      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005170:	2b30      	cmp	r3, #48	; 0x30
 8005172:	d86b      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b20      	cmp	r3, #32
 8005176:	d060      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d867      	bhi.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d05c      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005180:	2b10      	cmp	r3, #16
 8005182:	d05a      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x15a>
 8005184:	e062      	b.n	800524c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6899      	ldr	r1, [r3, #8]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f000 fb35 	bl	8005804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	609a      	str	r2, [r3, #8]
      break;
 80051b2:	e04f      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6899      	ldr	r1, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f000 fb1e 	bl	8005804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d6:	609a      	str	r2, [r3, #8]
      break;
 80051d8:	e03c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fa92 	bl	8005710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2150      	movs	r1, #80	; 0x50
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 faeb 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 80051f8:	e02c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	461a      	mov	r2, r3
 8005208:	f000 fab1 	bl	800576e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2160      	movs	r1, #96	; 0x60
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fadb 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 8005218:	e01c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	461a      	mov	r2, r3
 8005228:	f000 fa72 	bl	8005710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2140      	movs	r1, #64	; 0x40
 8005232:	4618      	mov	r0, r3
 8005234:	f000 facb 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 8005238:	e00c      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f000 fac2 	bl	80057ce <TIM_ITRx_SetConfig>
      break;
 800524a:	e003      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      break;
 8005250:	e000      	b.n	8005254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005264:	7bfb      	ldrb	r3, [r7, #15]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a40      	ldr	r2, [pc, #256]	; (8005384 <TIM_Base_SetConfig+0x114>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d013      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a3d      	ldr	r2, [pc, #244]	; (8005388 <TIM_Base_SetConfig+0x118>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a3c      	ldr	r2, [pc, #240]	; (800538c <TIM_Base_SetConfig+0x11c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3b      	ldr	r2, [pc, #236]	; (8005390 <TIM_Base_SetConfig+0x120>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3a      	ldr	r2, [pc, #232]	; (8005394 <TIM_Base_SetConfig+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d108      	bne.n	80052c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <TIM_Base_SetConfig+0x114>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d0:	d027      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <TIM_Base_SetConfig+0x118>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d023      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2b      	ldr	r2, [pc, #172]	; (800538c <TIM_Base_SetConfig+0x11c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01f      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <TIM_Base_SetConfig+0x120>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a29      	ldr	r2, [pc, #164]	; (8005394 <TIM_Base_SetConfig+0x124>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d017      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a28      	ldr	r2, [pc, #160]	; (8005398 <TIM_Base_SetConfig+0x128>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <TIM_Base_SetConfig+0x12c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00f      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <TIM_Base_SetConfig+0x130>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <TIM_Base_SetConfig+0x134>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <TIM_Base_SetConfig+0x138>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a23      	ldr	r2, [pc, #140]	; (80053ac <TIM_Base_SetConfig+0x13c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d108      	bne.n	8005334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <TIM_Base_SetConfig+0x114>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0xf8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <TIM_Base_SetConfig+0x124>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d103      	bne.n	8005370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	615a      	str	r2, [r3, #20]
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800
 80053a4:	40001800 	.word	0x40001800
 80053a8:	40001c00 	.word	0x40001c00
 80053ac:	40002000 	.word	0x40002000

080053b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 0302 	bic.w	r3, r3, #2
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a20      	ldr	r2, [pc, #128]	; (8005488 <TIM_OC1_SetConfig+0xd8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_OC1_SetConfig+0x64>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1f      	ldr	r2, [pc, #124]	; (800548c <TIM_OC1_SetConfig+0xdc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d10c      	bne.n	800542e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0308 	bic.w	r3, r3, #8
 800541a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a15      	ldr	r2, [pc, #84]	; (8005488 <TIM_OC1_SetConfig+0xd8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_OC1_SetConfig+0x8e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a14      	ldr	r2, [pc, #80]	; (800548c <TIM_OC1_SetConfig+0xdc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d111      	bne.n	8005462 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40010000 	.word	0x40010000
 800548c:	40010400 	.word	0x40010400

08005490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0210 	bic.w	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0320 	bic.w	r3, r3, #32
 80054da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a22      	ldr	r2, [pc, #136]	; (8005574 <TIM_OC2_SetConfig+0xe4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC2_SetConfig+0x68>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a21      	ldr	r2, [pc, #132]	; (8005578 <TIM_OC2_SetConfig+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d10d      	bne.n	8005514 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a17      	ldr	r2, [pc, #92]	; (8005574 <TIM_OC2_SetConfig+0xe4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC2_SetConfig+0x94>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <TIM_OC2_SetConfig+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d113      	bne.n	800554c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40010400 	.word	0x40010400

0800557c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <TIM_OC3_SetConfig+0xe0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_OC3_SetConfig+0x66>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a20      	ldr	r2, [pc, #128]	; (8005660 <TIM_OC3_SetConfig+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10d      	bne.n	80055fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a16      	ldr	r2, [pc, #88]	; (800565c <TIM_OC3_SetConfig+0xe0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d003      	beq.n	800560e <TIM_OC3_SetConfig+0x92>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a15      	ldr	r2, [pc, #84]	; (8005660 <TIM_OC3_SetConfig+0xe4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d113      	bne.n	8005636 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800561c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40010000 	.word	0x40010000
 8005660:	40010400 	.word	0x40010400

08005664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	031b      	lsls	r3, r3, #12
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a12      	ldr	r2, [pc, #72]	; (8005708 <TIM_OC4_SetConfig+0xa4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC4_SetConfig+0x68>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a11      	ldr	r2, [pc, #68]	; (800570c <TIM_OC4_SetConfig+0xa8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 030a 	bic.w	r3, r3, #10
 800574c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0210 	bic.w	r2, r3, #16
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	031b      	lsls	r3, r3, #12
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f043 0307 	orr.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800581e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	021a      	lsls	r2, r3, #8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	431a      	orrs	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	609a      	str	r2, [r3, #8]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	2201      	movs	r2, #1
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	43db      	mvns	r3, r3
 8005866:	401a      	ands	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	431a      	orrs	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e05a      	b.n	800595e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a21      	ldr	r2, [pc, #132]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d022      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d01d      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d018      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d013      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1a      	ldr	r2, [pc, #104]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00e      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d009      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a17      	ldr	r2, [pc, #92]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10c      	bne.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4313      	orrs	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40001800 	.word	0x40001800

08005988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e03d      	b.n	8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e03f      	b.n	8005abe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb ff92 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f929 	bl	8005cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b08a      	sub	sp, #40	; 0x28
 8005aca:	af02      	add	r7, sp, #8
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d17c      	bne.n	8005be0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_Transmit+0x2c>
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e075      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Transmit+0x3e>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e06e      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2221      	movs	r2, #33	; 0x21
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b1a:	f7fc f8b9 	bl	8001c90 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	88fa      	ldrh	r2, [r7, #6]
 8005b2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b34:	d108      	bne.n	8005b48 <HAL_UART_Transmit+0x82>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e003      	b.n	8005b50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b58:	e02a      	b.n	8005bb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f840 	bl	8005bea <UART_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e036      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10b      	bne.n	8005b92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e007      	b.n	8005ba2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1cf      	bne.n	8005b5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2140      	movs	r1, #64	; 0x40
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f810 	bl	8005bea <UART_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e006      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e000      	b.n	8005be2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b090      	sub	sp, #64	; 0x40
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfa:	e050      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d04c      	beq.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0a:	f7fc f841 	bl	8001c90 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d241      	bcs.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c3a:	637a      	str	r2, [r7, #52]	; 0x34
 8005c3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e5      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3314      	adds	r3, #20
 8005c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c6e:	623a      	str	r2, [r7, #32]
 8005c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	69f9      	ldr	r1, [r7, #28]
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e5      	bne.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e00f      	b.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	bf0c      	ite	eq
 8005cae:	2301      	moveq	r3, #1
 8005cb0:	2300      	movne	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d09f      	beq.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3740      	adds	r7, #64	; 0x40
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ccc:	b0c0      	sub	sp, #256	; 0x100
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce4:	68d9      	ldr	r1, [r3, #12]
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	ea40 0301 	orr.w	r3, r0, r1
 8005cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d20:	f021 010c 	bic.w	r1, r1, #12
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d42:	6999      	ldr	r1, [r3, #24]
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	ea40 0301 	orr.w	r3, r0, r1
 8005d4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b8f      	ldr	r3, [pc, #572]	; (8005f94 <UART_SetConfig+0x2cc>)
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d005      	beq.n	8005d68 <UART_SetConfig+0xa0>
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b8d      	ldr	r3, [pc, #564]	; (8005f98 <UART_SetConfig+0x2d0>)
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d104      	bne.n	8005d72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d68:	f7fe fab0 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 8005d6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d70:	e003      	b.n	8005d7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d72:	f7fe fa97 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8005d76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d84:	f040 810c 	bne.w	8005fa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	462b      	mov	r3, r5
 8005d9e:	1891      	adds	r1, r2, r2
 8005da0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005da2:	415b      	adcs	r3, r3
 8005da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005da6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005daa:	4621      	mov	r1, r4
 8005dac:	eb12 0801 	adds.w	r8, r2, r1
 8005db0:	4629      	mov	r1, r5
 8005db2:	eb43 0901 	adc.w	r9, r3, r1
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dca:	4690      	mov	r8, r2
 8005dcc:	4699      	mov	r9, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	eb18 0303 	adds.w	r3, r8, r3
 8005dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dd8:	462b      	mov	r3, r5
 8005dda:	eb49 0303 	adc.w	r3, r9, r3
 8005dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005df6:	460b      	mov	r3, r1
 8005df8:	18db      	adds	r3, r3, r3
 8005dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	eb42 0303 	adc.w	r3, r2, r3
 8005e02:	657b      	str	r3, [r7, #84]	; 0x54
 8005e04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e0c:	f7fa fa50 	bl	80002b0 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4b61      	ldr	r3, [pc, #388]	; (8005f9c <UART_SetConfig+0x2d4>)
 8005e16:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	011c      	lsls	r4, r3, #4
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	1891      	adds	r1, r2, r2
 8005e36:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e38:	415b      	adcs	r3, r3
 8005e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e40:	4641      	mov	r1, r8
 8005e42:	eb12 0a01 	adds.w	sl, r2, r1
 8005e46:	4649      	mov	r1, r9
 8005e48:	eb43 0b01 	adc.w	fp, r3, r1
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e60:	4692      	mov	sl, r2
 8005e62:	469b      	mov	fp, r3
 8005e64:	4643      	mov	r3, r8
 8005e66:	eb1a 0303 	adds.w	r3, sl, r3
 8005e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	eb4b 0303 	adc.w	r3, fp, r3
 8005e74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	18db      	adds	r3, r3, r3
 8005e90:	643b      	str	r3, [r7, #64]	; 0x40
 8005e92:	4613      	mov	r3, r2
 8005e94:	eb42 0303 	adc.w	r3, r2, r3
 8005e98:	647b      	str	r3, [r7, #68]	; 0x44
 8005e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ea2:	f7fa fa05 	bl	80002b0 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4b3b      	ldr	r3, [pc, #236]	; (8005f9c <UART_SetConfig+0x2d4>)
 8005eae:	fba3 2301 	umull	r2, r3, r3, r1
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	2264      	movs	r2, #100	; 0x64
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	1acb      	subs	r3, r1, r3
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ec2:	4b36      	ldr	r3, [pc, #216]	; (8005f9c <UART_SetConfig+0x2d4>)
 8005ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ed0:	441c      	add	r4, r3
 8005ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005edc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ee0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	1891      	adds	r1, r2, r2
 8005eea:	63b9      	str	r1, [r7, #56]	; 0x38
 8005eec:	415b      	adcs	r3, r3
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ef4:	4641      	mov	r1, r8
 8005ef6:	1851      	adds	r1, r2, r1
 8005ef8:	6339      	str	r1, [r7, #48]	; 0x30
 8005efa:	4649      	mov	r1, r9
 8005efc:	414b      	adcs	r3, r1
 8005efe:	637b      	str	r3, [r7, #52]	; 0x34
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	00cb      	lsls	r3, r1, #3
 8005f10:	4651      	mov	r1, sl
 8005f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f16:	4651      	mov	r1, sl
 8005f18:	00ca      	lsls	r2, r1, #3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4642      	mov	r2, r8
 8005f22:	189b      	adds	r3, r3, r2
 8005f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f28:	464b      	mov	r3, r9
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	eb42 0303 	adc.w	r3, r2, r3
 8005f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f48:	460b      	mov	r3, r1
 8005f4a:	18db      	adds	r3, r3, r3
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4e:	4613      	mov	r3, r2
 8005f50:	eb42 0303 	adc.w	r3, r2, r3
 8005f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f5e:	f7fa f9a7 	bl	80002b0 <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <UART_SetConfig+0x2d4>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <UART_SetConfig+0x2d4>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f003 0207 	and.w	r2, r3, #7
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4422      	add	r2, r4
 8005f8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f90:	e105      	b.n	800619e <UART_SetConfig+0x4d6>
 8005f92:	bf00      	nop
 8005f94:	40011000 	.word	0x40011000
 8005f98:	40011400 	.word	0x40011400
 8005f9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005faa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	1891      	adds	r1, r2, r2
 8005fb8:	6239      	str	r1, [r7, #32]
 8005fba:	415b      	adcs	r3, r3
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	1854      	adds	r4, r2, r1
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	eb43 0501 	adc.w	r5, r3, r1
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	00eb      	lsls	r3, r5, #3
 8005fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fda:	00e2      	lsls	r2, r4, #3
 8005fdc:	4614      	mov	r4, r2
 8005fde:	461d      	mov	r5, r3
 8005fe0:	4643      	mov	r3, r8
 8005fe2:	18e3      	adds	r3, r4, r3
 8005fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fe8:	464b      	mov	r3, r9
 8005fea:	eb45 0303 	adc.w	r3, r5, r3
 8005fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ffe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800600e:	4629      	mov	r1, r5
 8006010:	008b      	lsls	r3, r1, #2
 8006012:	4621      	mov	r1, r4
 8006014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006018:	4621      	mov	r1, r4
 800601a:	008a      	lsls	r2, r1, #2
 800601c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006020:	f7fa f946 	bl	80002b0 <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4b60      	ldr	r3, [pc, #384]	; (80061ac <UART_SetConfig+0x4e4>)
 800602a:	fba3 2302 	umull	r2, r3, r3, r2
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	011c      	lsls	r4, r3, #4
 8006032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006036:	2200      	movs	r2, #0
 8006038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800603c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006040:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006044:	4642      	mov	r2, r8
 8006046:	464b      	mov	r3, r9
 8006048:	1891      	adds	r1, r2, r2
 800604a:	61b9      	str	r1, [r7, #24]
 800604c:	415b      	adcs	r3, r3
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006054:	4641      	mov	r1, r8
 8006056:	1851      	adds	r1, r2, r1
 8006058:	6139      	str	r1, [r7, #16]
 800605a:	4649      	mov	r1, r9
 800605c:	414b      	adcs	r3, r1
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800606c:	4659      	mov	r1, fp
 800606e:	00cb      	lsls	r3, r1, #3
 8006070:	4651      	mov	r1, sl
 8006072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006076:	4651      	mov	r1, sl
 8006078:	00ca      	lsls	r2, r1, #3
 800607a:	4610      	mov	r0, r2
 800607c:	4619      	mov	r1, r3
 800607e:	4603      	mov	r3, r0
 8006080:	4642      	mov	r2, r8
 8006082:	189b      	adds	r3, r3, r2
 8006084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006088:	464b      	mov	r3, r9
 800608a:	460a      	mov	r2, r1
 800608c:	eb42 0303 	adc.w	r3, r2, r3
 8006090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	67bb      	str	r3, [r7, #120]	; 0x78
 800609e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060ac:	4649      	mov	r1, r9
 80060ae:	008b      	lsls	r3, r1, #2
 80060b0:	4641      	mov	r1, r8
 80060b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b6:	4641      	mov	r1, r8
 80060b8:	008a      	lsls	r2, r1, #2
 80060ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060be:	f7fa f8f7 	bl	80002b0 <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <UART_SetConfig+0x4e4>)
 80060c8:	fba3 1302 	umull	r1, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	2164      	movs	r1, #100	; 0x64
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	3332      	adds	r3, #50	; 0x32
 80060da:	4a34      	ldr	r2, [pc, #208]	; (80061ac <UART_SetConfig+0x4e4>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e6:	441c      	add	r4, r3
 80060e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ec:	2200      	movs	r2, #0
 80060ee:	673b      	str	r3, [r7, #112]	; 0x70
 80060f0:	677a      	str	r2, [r7, #116]	; 0x74
 80060f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060f6:	4642      	mov	r2, r8
 80060f8:	464b      	mov	r3, r9
 80060fa:	1891      	adds	r1, r2, r2
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	415b      	adcs	r3, r3
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006106:	4641      	mov	r1, r8
 8006108:	1851      	adds	r1, r2, r1
 800610a:	6039      	str	r1, [r7, #0]
 800610c:	4649      	mov	r1, r9
 800610e:	414b      	adcs	r3, r1
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800611e:	4659      	mov	r1, fp
 8006120:	00cb      	lsls	r3, r1, #3
 8006122:	4651      	mov	r1, sl
 8006124:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006128:	4651      	mov	r1, sl
 800612a:	00ca      	lsls	r2, r1, #3
 800612c:	4610      	mov	r0, r2
 800612e:	4619      	mov	r1, r3
 8006130:	4603      	mov	r3, r0
 8006132:	4642      	mov	r2, r8
 8006134:	189b      	adds	r3, r3, r2
 8006136:	66bb      	str	r3, [r7, #104]	; 0x68
 8006138:	464b      	mov	r3, r9
 800613a:	460a      	mov	r2, r1
 800613c:	eb42 0303 	adc.w	r3, r2, r3
 8006140:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	663b      	str	r3, [r7, #96]	; 0x60
 800614c:	667a      	str	r2, [r7, #100]	; 0x64
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800615a:	4649      	mov	r1, r9
 800615c:	008b      	lsls	r3, r1, #2
 800615e:	4641      	mov	r1, r8
 8006160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006164:	4641      	mov	r1, r8
 8006166:	008a      	lsls	r2, r1, #2
 8006168:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800616c:	f7fa f8a0 	bl	80002b0 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <UART_SetConfig+0x4e4>)
 8006176:	fba3 1302 	umull	r1, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2164      	movs	r1, #100	; 0x64
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	3332      	adds	r3, #50	; 0x32
 8006188:	4a08      	ldr	r2, [pc, #32]	; (80061ac <UART_SetConfig+0x4e4>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4422      	add	r2, r4
 800619c:	609a      	str	r2, [r3, #8]
}
 800619e:	bf00      	nop
 80061a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061a4:	46bd      	mov	sp, r7
 80061a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061aa:	bf00      	nop
 80061ac:	51eb851f 	.word	0x51eb851f

080061b0 <__errno>:
 80061b0:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <__errno+0x8>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20000014 	.word	0x20000014

080061bc <__libc_init_array>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4d0d      	ldr	r5, [pc, #52]	; (80061f4 <__libc_init_array+0x38>)
 80061c0:	4c0d      	ldr	r4, [pc, #52]	; (80061f8 <__libc_init_array+0x3c>)
 80061c2:	1b64      	subs	r4, r4, r5
 80061c4:	10a4      	asrs	r4, r4, #2
 80061c6:	2600      	movs	r6, #0
 80061c8:	42a6      	cmp	r6, r4
 80061ca:	d109      	bne.n	80061e0 <__libc_init_array+0x24>
 80061cc:	4d0b      	ldr	r5, [pc, #44]	; (80061fc <__libc_init_array+0x40>)
 80061ce:	4c0c      	ldr	r4, [pc, #48]	; (8006200 <__libc_init_array+0x44>)
 80061d0:	f000 fc8e 	bl	8006af0 <_init>
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	2600      	movs	r6, #0
 80061da:	42a6      	cmp	r6, r4
 80061dc:	d105      	bne.n	80061ea <__libc_init_array+0x2e>
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e4:	4798      	blx	r3
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7ee      	b.n	80061c8 <__libc_init_array+0xc>
 80061ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ee:	4798      	blx	r3
 80061f0:	3601      	adds	r6, #1
 80061f2:	e7f2      	b.n	80061da <__libc_init_array+0x1e>
 80061f4:	08006c8c 	.word	0x08006c8c
 80061f8:	08006c8c 	.word	0x08006c8c
 80061fc:	08006c8c 	.word	0x08006c8c
 8006200:	08006c90 	.word	0x08006c90

08006204 <memset>:
 8006204:	4402      	add	r2, r0
 8006206:	4603      	mov	r3, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <siprintf>:
 8006214:	b40e      	push	{r1, r2, r3}
 8006216:	b500      	push	{lr}
 8006218:	b09c      	sub	sp, #112	; 0x70
 800621a:	ab1d      	add	r3, sp, #116	; 0x74
 800621c:	9002      	str	r0, [sp, #8]
 800621e:	9006      	str	r0, [sp, #24]
 8006220:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006224:	4809      	ldr	r0, [pc, #36]	; (800624c <siprintf+0x38>)
 8006226:	9107      	str	r1, [sp, #28]
 8006228:	9104      	str	r1, [sp, #16]
 800622a:	4909      	ldr	r1, [pc, #36]	; (8006250 <siprintf+0x3c>)
 800622c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006230:	9105      	str	r1, [sp, #20]
 8006232:	6800      	ldr	r0, [r0, #0]
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	a902      	add	r1, sp, #8
 8006238:	f000 f868 	bl	800630c <_svfiprintf_r>
 800623c:	9b02      	ldr	r3, [sp, #8]
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	b01c      	add	sp, #112	; 0x70
 8006244:	f85d eb04 	ldr.w	lr, [sp], #4
 8006248:	b003      	add	sp, #12
 800624a:	4770      	bx	lr
 800624c:	20000014 	.word	0x20000014
 8006250:	ffff0208 	.word	0xffff0208

08006254 <__ssputs_r>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	688e      	ldr	r6, [r1, #8]
 800625a:	429e      	cmp	r6, r3
 800625c:	4682      	mov	sl, r0
 800625e:	460c      	mov	r4, r1
 8006260:	4690      	mov	r8, r2
 8006262:	461f      	mov	r7, r3
 8006264:	d838      	bhi.n	80062d8 <__ssputs_r+0x84>
 8006266:	898a      	ldrh	r2, [r1, #12]
 8006268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800626c:	d032      	beq.n	80062d4 <__ssputs_r+0x80>
 800626e:	6825      	ldr	r5, [r4, #0]
 8006270:	6909      	ldr	r1, [r1, #16]
 8006272:	eba5 0901 	sub.w	r9, r5, r1
 8006276:	6965      	ldr	r5, [r4, #20]
 8006278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800627c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006280:	3301      	adds	r3, #1
 8006282:	444b      	add	r3, r9
 8006284:	106d      	asrs	r5, r5, #1
 8006286:	429d      	cmp	r5, r3
 8006288:	bf38      	it	cc
 800628a:	461d      	movcc	r5, r3
 800628c:	0553      	lsls	r3, r2, #21
 800628e:	d531      	bpl.n	80062f4 <__ssputs_r+0xa0>
 8006290:	4629      	mov	r1, r5
 8006292:	f000 fb63 	bl	800695c <_malloc_r>
 8006296:	4606      	mov	r6, r0
 8006298:	b950      	cbnz	r0, 80062b0 <__ssputs_r+0x5c>
 800629a:	230c      	movs	r3, #12
 800629c:	f8ca 3000 	str.w	r3, [sl]
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b0:	6921      	ldr	r1, [r4, #16]
 80062b2:	464a      	mov	r2, r9
 80062b4:	f000 fabe 	bl	8006834 <memcpy>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	81a3      	strh	r3, [r4, #12]
 80062c4:	6126      	str	r6, [r4, #16]
 80062c6:	6165      	str	r5, [r4, #20]
 80062c8:	444e      	add	r6, r9
 80062ca:	eba5 0509 	sub.w	r5, r5, r9
 80062ce:	6026      	str	r6, [r4, #0]
 80062d0:	60a5      	str	r5, [r4, #8]
 80062d2:	463e      	mov	r6, r7
 80062d4:	42be      	cmp	r6, r7
 80062d6:	d900      	bls.n	80062da <__ssputs_r+0x86>
 80062d8:	463e      	mov	r6, r7
 80062da:	6820      	ldr	r0, [r4, #0]
 80062dc:	4632      	mov	r2, r6
 80062de:	4641      	mov	r1, r8
 80062e0:	f000 fab6 	bl	8006850 <memmove>
 80062e4:	68a3      	ldr	r3, [r4, #8]
 80062e6:	1b9b      	subs	r3, r3, r6
 80062e8:	60a3      	str	r3, [r4, #8]
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	4433      	add	r3, r6
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7db      	b.n	80062ac <__ssputs_r+0x58>
 80062f4:	462a      	mov	r2, r5
 80062f6:	f000 fba5 	bl	8006a44 <_realloc_r>
 80062fa:	4606      	mov	r6, r0
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d1e1      	bne.n	80062c4 <__ssputs_r+0x70>
 8006300:	6921      	ldr	r1, [r4, #16]
 8006302:	4650      	mov	r0, sl
 8006304:	f000 fabe 	bl	8006884 <_free_r>
 8006308:	e7c7      	b.n	800629a <__ssputs_r+0x46>
	...

0800630c <_svfiprintf_r>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4698      	mov	r8, r3
 8006312:	898b      	ldrh	r3, [r1, #12]
 8006314:	061b      	lsls	r3, r3, #24
 8006316:	b09d      	sub	sp, #116	; 0x74
 8006318:	4607      	mov	r7, r0
 800631a:	460d      	mov	r5, r1
 800631c:	4614      	mov	r4, r2
 800631e:	d50e      	bpl.n	800633e <_svfiprintf_r+0x32>
 8006320:	690b      	ldr	r3, [r1, #16]
 8006322:	b963      	cbnz	r3, 800633e <_svfiprintf_r+0x32>
 8006324:	2140      	movs	r1, #64	; 0x40
 8006326:	f000 fb19 	bl	800695c <_malloc_r>
 800632a:	6028      	str	r0, [r5, #0]
 800632c:	6128      	str	r0, [r5, #16]
 800632e:	b920      	cbnz	r0, 800633a <_svfiprintf_r+0x2e>
 8006330:	230c      	movs	r3, #12
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	e0d1      	b.n	80064de <_svfiprintf_r+0x1d2>
 800633a:	2340      	movs	r3, #64	; 0x40
 800633c:	616b      	str	r3, [r5, #20]
 800633e:	2300      	movs	r3, #0
 8006340:	9309      	str	r3, [sp, #36]	; 0x24
 8006342:	2320      	movs	r3, #32
 8006344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006348:	f8cd 800c 	str.w	r8, [sp, #12]
 800634c:	2330      	movs	r3, #48	; 0x30
 800634e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064f8 <_svfiprintf_r+0x1ec>
 8006352:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006356:	f04f 0901 	mov.w	r9, #1
 800635a:	4623      	mov	r3, r4
 800635c:	469a      	mov	sl, r3
 800635e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006362:	b10a      	cbz	r2, 8006368 <_svfiprintf_r+0x5c>
 8006364:	2a25      	cmp	r2, #37	; 0x25
 8006366:	d1f9      	bne.n	800635c <_svfiprintf_r+0x50>
 8006368:	ebba 0b04 	subs.w	fp, sl, r4
 800636c:	d00b      	beq.n	8006386 <_svfiprintf_r+0x7a>
 800636e:	465b      	mov	r3, fp
 8006370:	4622      	mov	r2, r4
 8006372:	4629      	mov	r1, r5
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff ff6d 	bl	8006254 <__ssputs_r>
 800637a:	3001      	adds	r0, #1
 800637c:	f000 80aa 	beq.w	80064d4 <_svfiprintf_r+0x1c8>
 8006380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006382:	445a      	add	r2, fp
 8006384:	9209      	str	r2, [sp, #36]	; 0x24
 8006386:	f89a 3000 	ldrb.w	r3, [sl]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80a2 	beq.w	80064d4 <_svfiprintf_r+0x1c8>
 8006390:	2300      	movs	r3, #0
 8006392:	f04f 32ff 	mov.w	r2, #4294967295
 8006396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800639a:	f10a 0a01 	add.w	sl, sl, #1
 800639e:	9304      	str	r3, [sp, #16]
 80063a0:	9307      	str	r3, [sp, #28]
 80063a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a6:	931a      	str	r3, [sp, #104]	; 0x68
 80063a8:	4654      	mov	r4, sl
 80063aa:	2205      	movs	r2, #5
 80063ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b0:	4851      	ldr	r0, [pc, #324]	; (80064f8 <_svfiprintf_r+0x1ec>)
 80063b2:	f7f9 ff2d 	bl	8000210 <memchr>
 80063b6:	9a04      	ldr	r2, [sp, #16]
 80063b8:	b9d8      	cbnz	r0, 80063f2 <_svfiprintf_r+0xe6>
 80063ba:	06d0      	lsls	r0, r2, #27
 80063bc:	bf44      	itt	mi
 80063be:	2320      	movmi	r3, #32
 80063c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c4:	0711      	lsls	r1, r2, #28
 80063c6:	bf44      	itt	mi
 80063c8:	232b      	movmi	r3, #43	; 0x2b
 80063ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ce:	f89a 3000 	ldrb.w	r3, [sl]
 80063d2:	2b2a      	cmp	r3, #42	; 0x2a
 80063d4:	d015      	beq.n	8006402 <_svfiprintf_r+0xf6>
 80063d6:	9a07      	ldr	r2, [sp, #28]
 80063d8:	4654      	mov	r4, sl
 80063da:	2000      	movs	r0, #0
 80063dc:	f04f 0c0a 	mov.w	ip, #10
 80063e0:	4621      	mov	r1, r4
 80063e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e6:	3b30      	subs	r3, #48	; 0x30
 80063e8:	2b09      	cmp	r3, #9
 80063ea:	d94e      	bls.n	800648a <_svfiprintf_r+0x17e>
 80063ec:	b1b0      	cbz	r0, 800641c <_svfiprintf_r+0x110>
 80063ee:	9207      	str	r2, [sp, #28]
 80063f0:	e014      	b.n	800641c <_svfiprintf_r+0x110>
 80063f2:	eba0 0308 	sub.w	r3, r0, r8
 80063f6:	fa09 f303 	lsl.w	r3, r9, r3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	46a2      	mov	sl, r4
 8006400:	e7d2      	b.n	80063a8 <_svfiprintf_r+0x9c>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	1d19      	adds	r1, r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	9103      	str	r1, [sp, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfbb      	ittet	lt
 800640e:	425b      	neglt	r3, r3
 8006410:	f042 0202 	orrlt.w	r2, r2, #2
 8006414:	9307      	strge	r3, [sp, #28]
 8006416:	9307      	strlt	r3, [sp, #28]
 8006418:	bfb8      	it	lt
 800641a:	9204      	strlt	r2, [sp, #16]
 800641c:	7823      	ldrb	r3, [r4, #0]
 800641e:	2b2e      	cmp	r3, #46	; 0x2e
 8006420:	d10c      	bne.n	800643c <_svfiprintf_r+0x130>
 8006422:	7863      	ldrb	r3, [r4, #1]
 8006424:	2b2a      	cmp	r3, #42	; 0x2a
 8006426:	d135      	bne.n	8006494 <_svfiprintf_r+0x188>
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	1d1a      	adds	r2, r3, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	9203      	str	r2, [sp, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	bfb8      	it	lt
 8006434:	f04f 33ff 	movlt.w	r3, #4294967295
 8006438:	3402      	adds	r4, #2
 800643a:	9305      	str	r3, [sp, #20]
 800643c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006508 <_svfiprintf_r+0x1fc>
 8006440:	7821      	ldrb	r1, [r4, #0]
 8006442:	2203      	movs	r2, #3
 8006444:	4650      	mov	r0, sl
 8006446:	f7f9 fee3 	bl	8000210 <memchr>
 800644a:	b140      	cbz	r0, 800645e <_svfiprintf_r+0x152>
 800644c:	2340      	movs	r3, #64	; 0x40
 800644e:	eba0 000a 	sub.w	r0, r0, sl
 8006452:	fa03 f000 	lsl.w	r0, r3, r0
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	4303      	orrs	r3, r0
 800645a:	3401      	adds	r4, #1
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006462:	4826      	ldr	r0, [pc, #152]	; (80064fc <_svfiprintf_r+0x1f0>)
 8006464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006468:	2206      	movs	r2, #6
 800646a:	f7f9 fed1 	bl	8000210 <memchr>
 800646e:	2800      	cmp	r0, #0
 8006470:	d038      	beq.n	80064e4 <_svfiprintf_r+0x1d8>
 8006472:	4b23      	ldr	r3, [pc, #140]	; (8006500 <_svfiprintf_r+0x1f4>)
 8006474:	bb1b      	cbnz	r3, 80064be <_svfiprintf_r+0x1b2>
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	3307      	adds	r3, #7
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	3308      	adds	r3, #8
 8006480:	9303      	str	r3, [sp, #12]
 8006482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006484:	4433      	add	r3, r6
 8006486:	9309      	str	r3, [sp, #36]	; 0x24
 8006488:	e767      	b.n	800635a <_svfiprintf_r+0x4e>
 800648a:	fb0c 3202 	mla	r2, ip, r2, r3
 800648e:	460c      	mov	r4, r1
 8006490:	2001      	movs	r0, #1
 8006492:	e7a5      	b.n	80063e0 <_svfiprintf_r+0xd4>
 8006494:	2300      	movs	r3, #0
 8006496:	3401      	adds	r4, #1
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	4619      	mov	r1, r3
 800649c:	f04f 0c0a 	mov.w	ip, #10
 80064a0:	4620      	mov	r0, r4
 80064a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a6:	3a30      	subs	r2, #48	; 0x30
 80064a8:	2a09      	cmp	r2, #9
 80064aa:	d903      	bls.n	80064b4 <_svfiprintf_r+0x1a8>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0c5      	beq.n	800643c <_svfiprintf_r+0x130>
 80064b0:	9105      	str	r1, [sp, #20]
 80064b2:	e7c3      	b.n	800643c <_svfiprintf_r+0x130>
 80064b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b8:	4604      	mov	r4, r0
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7f0      	b.n	80064a0 <_svfiprintf_r+0x194>
 80064be:	ab03      	add	r3, sp, #12
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	462a      	mov	r2, r5
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <_svfiprintf_r+0x1f8>)
 80064c6:	a904      	add	r1, sp, #16
 80064c8:	4638      	mov	r0, r7
 80064ca:	f3af 8000 	nop.w
 80064ce:	1c42      	adds	r2, r0, #1
 80064d0:	4606      	mov	r6, r0
 80064d2:	d1d6      	bne.n	8006482 <_svfiprintf_r+0x176>
 80064d4:	89ab      	ldrh	r3, [r5, #12]
 80064d6:	065b      	lsls	r3, r3, #25
 80064d8:	f53f af2c 	bmi.w	8006334 <_svfiprintf_r+0x28>
 80064dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064de:	b01d      	add	sp, #116	; 0x74
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	ab03      	add	r3, sp, #12
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	462a      	mov	r2, r5
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <_svfiprintf_r+0x1f8>)
 80064ec:	a904      	add	r1, sp, #16
 80064ee:	4638      	mov	r0, r7
 80064f0:	f000 f87a 	bl	80065e8 <_printf_i>
 80064f4:	e7eb      	b.n	80064ce <_svfiprintf_r+0x1c2>
 80064f6:	bf00      	nop
 80064f8:	08006c50 	.word	0x08006c50
 80064fc:	08006c5a 	.word	0x08006c5a
 8006500:	00000000 	.word	0x00000000
 8006504:	08006255 	.word	0x08006255
 8006508:	08006c56 	.word	0x08006c56

0800650c <_printf_common>:
 800650c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	4616      	mov	r6, r2
 8006512:	4699      	mov	r9, r3
 8006514:	688a      	ldr	r2, [r1, #8]
 8006516:	690b      	ldr	r3, [r1, #16]
 8006518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800651c:	4293      	cmp	r3, r2
 800651e:	bfb8      	it	lt
 8006520:	4613      	movlt	r3, r2
 8006522:	6033      	str	r3, [r6, #0]
 8006524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006528:	4607      	mov	r7, r0
 800652a:	460c      	mov	r4, r1
 800652c:	b10a      	cbz	r2, 8006532 <_printf_common+0x26>
 800652e:	3301      	adds	r3, #1
 8006530:	6033      	str	r3, [r6, #0]
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	0699      	lsls	r1, r3, #26
 8006536:	bf42      	ittt	mi
 8006538:	6833      	ldrmi	r3, [r6, #0]
 800653a:	3302      	addmi	r3, #2
 800653c:	6033      	strmi	r3, [r6, #0]
 800653e:	6825      	ldr	r5, [r4, #0]
 8006540:	f015 0506 	ands.w	r5, r5, #6
 8006544:	d106      	bne.n	8006554 <_printf_common+0x48>
 8006546:	f104 0a19 	add.w	sl, r4, #25
 800654a:	68e3      	ldr	r3, [r4, #12]
 800654c:	6832      	ldr	r2, [r6, #0]
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	42ab      	cmp	r3, r5
 8006552:	dc26      	bgt.n	80065a2 <_printf_common+0x96>
 8006554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006558:	1e13      	subs	r3, r2, #0
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	bf18      	it	ne
 800655e:	2301      	movne	r3, #1
 8006560:	0692      	lsls	r2, r2, #26
 8006562:	d42b      	bmi.n	80065bc <_printf_common+0xb0>
 8006564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006568:	4649      	mov	r1, r9
 800656a:	4638      	mov	r0, r7
 800656c:	47c0      	blx	r8
 800656e:	3001      	adds	r0, #1
 8006570:	d01e      	beq.n	80065b0 <_printf_common+0xa4>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	68e5      	ldr	r5, [r4, #12]
 8006576:	6832      	ldr	r2, [r6, #0]
 8006578:	f003 0306 	and.w	r3, r3, #6
 800657c:	2b04      	cmp	r3, #4
 800657e:	bf08      	it	eq
 8006580:	1aad      	subeq	r5, r5, r2
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	6922      	ldr	r2, [r4, #16]
 8006586:	bf0c      	ite	eq
 8006588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800658c:	2500      	movne	r5, #0
 800658e:	4293      	cmp	r3, r2
 8006590:	bfc4      	itt	gt
 8006592:	1a9b      	subgt	r3, r3, r2
 8006594:	18ed      	addgt	r5, r5, r3
 8006596:	2600      	movs	r6, #0
 8006598:	341a      	adds	r4, #26
 800659a:	42b5      	cmp	r5, r6
 800659c:	d11a      	bne.n	80065d4 <_printf_common+0xc8>
 800659e:	2000      	movs	r0, #0
 80065a0:	e008      	b.n	80065b4 <_printf_common+0xa8>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4652      	mov	r2, sl
 80065a6:	4649      	mov	r1, r9
 80065a8:	4638      	mov	r0, r7
 80065aa:	47c0      	blx	r8
 80065ac:	3001      	adds	r0, #1
 80065ae:	d103      	bne.n	80065b8 <_printf_common+0xac>
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b8:	3501      	adds	r5, #1
 80065ba:	e7c6      	b.n	800654a <_printf_common+0x3e>
 80065bc:	18e1      	adds	r1, r4, r3
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	2030      	movs	r0, #48	; 0x30
 80065c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065c6:	4422      	add	r2, r4
 80065c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d0:	3302      	adds	r3, #2
 80065d2:	e7c7      	b.n	8006564 <_printf_common+0x58>
 80065d4:	2301      	movs	r3, #1
 80065d6:	4622      	mov	r2, r4
 80065d8:	4649      	mov	r1, r9
 80065da:	4638      	mov	r0, r7
 80065dc:	47c0      	blx	r8
 80065de:	3001      	adds	r0, #1
 80065e0:	d0e6      	beq.n	80065b0 <_printf_common+0xa4>
 80065e2:	3601      	adds	r6, #1
 80065e4:	e7d9      	b.n	800659a <_printf_common+0x8e>
	...

080065e8 <_printf_i>:
 80065e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	7e0f      	ldrb	r7, [r1, #24]
 80065ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f0:	2f78      	cmp	r7, #120	; 0x78
 80065f2:	4691      	mov	r9, r2
 80065f4:	4680      	mov	r8, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	469a      	mov	sl, r3
 80065fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065fe:	d807      	bhi.n	8006610 <_printf_i+0x28>
 8006600:	2f62      	cmp	r7, #98	; 0x62
 8006602:	d80a      	bhi.n	800661a <_printf_i+0x32>
 8006604:	2f00      	cmp	r7, #0
 8006606:	f000 80d8 	beq.w	80067ba <_printf_i+0x1d2>
 800660a:	2f58      	cmp	r7, #88	; 0x58
 800660c:	f000 80a3 	beq.w	8006756 <_printf_i+0x16e>
 8006610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006618:	e03a      	b.n	8006690 <_printf_i+0xa8>
 800661a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800661e:	2b15      	cmp	r3, #21
 8006620:	d8f6      	bhi.n	8006610 <_printf_i+0x28>
 8006622:	a101      	add	r1, pc, #4	; (adr r1, 8006628 <_printf_i+0x40>)
 8006624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006628:	08006681 	.word	0x08006681
 800662c:	08006695 	.word	0x08006695
 8006630:	08006611 	.word	0x08006611
 8006634:	08006611 	.word	0x08006611
 8006638:	08006611 	.word	0x08006611
 800663c:	08006611 	.word	0x08006611
 8006640:	08006695 	.word	0x08006695
 8006644:	08006611 	.word	0x08006611
 8006648:	08006611 	.word	0x08006611
 800664c:	08006611 	.word	0x08006611
 8006650:	08006611 	.word	0x08006611
 8006654:	080067a1 	.word	0x080067a1
 8006658:	080066c5 	.word	0x080066c5
 800665c:	08006783 	.word	0x08006783
 8006660:	08006611 	.word	0x08006611
 8006664:	08006611 	.word	0x08006611
 8006668:	080067c3 	.word	0x080067c3
 800666c:	08006611 	.word	0x08006611
 8006670:	080066c5 	.word	0x080066c5
 8006674:	08006611 	.word	0x08006611
 8006678:	08006611 	.word	0x08006611
 800667c:	0800678b 	.word	0x0800678b
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	1d1a      	adds	r2, r3, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	602a      	str	r2, [r5, #0]
 8006688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800668c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006690:	2301      	movs	r3, #1
 8006692:	e0a3      	b.n	80067dc <_printf_i+0x1f4>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	6829      	ldr	r1, [r5, #0]
 8006698:	0606      	lsls	r6, r0, #24
 800669a:	f101 0304 	add.w	r3, r1, #4
 800669e:	d50a      	bpl.n	80066b6 <_printf_i+0xce>
 80066a0:	680e      	ldr	r6, [r1, #0]
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	2e00      	cmp	r6, #0
 80066a6:	da03      	bge.n	80066b0 <_printf_i+0xc8>
 80066a8:	232d      	movs	r3, #45	; 0x2d
 80066aa:	4276      	negs	r6, r6
 80066ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b0:	485e      	ldr	r0, [pc, #376]	; (800682c <_printf_i+0x244>)
 80066b2:	230a      	movs	r3, #10
 80066b4:	e019      	b.n	80066ea <_printf_i+0x102>
 80066b6:	680e      	ldr	r6, [r1, #0]
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066be:	bf18      	it	ne
 80066c0:	b236      	sxthne	r6, r6
 80066c2:	e7ef      	b.n	80066a4 <_printf_i+0xbc>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	1d19      	adds	r1, r3, #4
 80066ca:	6029      	str	r1, [r5, #0]
 80066cc:	0601      	lsls	r1, r0, #24
 80066ce:	d501      	bpl.n	80066d4 <_printf_i+0xec>
 80066d0:	681e      	ldr	r6, [r3, #0]
 80066d2:	e002      	b.n	80066da <_printf_i+0xf2>
 80066d4:	0646      	lsls	r6, r0, #25
 80066d6:	d5fb      	bpl.n	80066d0 <_printf_i+0xe8>
 80066d8:	881e      	ldrh	r6, [r3, #0]
 80066da:	4854      	ldr	r0, [pc, #336]	; (800682c <_printf_i+0x244>)
 80066dc:	2f6f      	cmp	r7, #111	; 0x6f
 80066de:	bf0c      	ite	eq
 80066e0:	2308      	moveq	r3, #8
 80066e2:	230a      	movne	r3, #10
 80066e4:	2100      	movs	r1, #0
 80066e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ea:	6865      	ldr	r5, [r4, #4]
 80066ec:	60a5      	str	r5, [r4, #8]
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	bfa2      	ittt	ge
 80066f2:	6821      	ldrge	r1, [r4, #0]
 80066f4:	f021 0104 	bicge.w	r1, r1, #4
 80066f8:	6021      	strge	r1, [r4, #0]
 80066fa:	b90e      	cbnz	r6, 8006700 <_printf_i+0x118>
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	d04d      	beq.n	800679c <_printf_i+0x1b4>
 8006700:	4615      	mov	r5, r2
 8006702:	fbb6 f1f3 	udiv	r1, r6, r3
 8006706:	fb03 6711 	mls	r7, r3, r1, r6
 800670a:	5dc7      	ldrb	r7, [r0, r7]
 800670c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006710:	4637      	mov	r7, r6
 8006712:	42bb      	cmp	r3, r7
 8006714:	460e      	mov	r6, r1
 8006716:	d9f4      	bls.n	8006702 <_printf_i+0x11a>
 8006718:	2b08      	cmp	r3, #8
 800671a:	d10b      	bne.n	8006734 <_printf_i+0x14c>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07de      	lsls	r6, r3, #31
 8006720:	d508      	bpl.n	8006734 <_printf_i+0x14c>
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	6861      	ldr	r1, [r4, #4]
 8006726:	4299      	cmp	r1, r3
 8006728:	bfde      	ittt	le
 800672a:	2330      	movle	r3, #48	; 0x30
 800672c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006730:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006734:	1b52      	subs	r2, r2, r5
 8006736:	6122      	str	r2, [r4, #16]
 8006738:	f8cd a000 	str.w	sl, [sp]
 800673c:	464b      	mov	r3, r9
 800673e:	aa03      	add	r2, sp, #12
 8006740:	4621      	mov	r1, r4
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fee2 	bl	800650c <_printf_common>
 8006748:	3001      	adds	r0, #1
 800674a:	d14c      	bne.n	80067e6 <_printf_i+0x1fe>
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	b004      	add	sp, #16
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006756:	4835      	ldr	r0, [pc, #212]	; (800682c <_printf_i+0x244>)
 8006758:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800675c:	6829      	ldr	r1, [r5, #0]
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	f851 6b04 	ldr.w	r6, [r1], #4
 8006764:	6029      	str	r1, [r5, #0]
 8006766:	061d      	lsls	r5, r3, #24
 8006768:	d514      	bpl.n	8006794 <_printf_i+0x1ac>
 800676a:	07df      	lsls	r7, r3, #31
 800676c:	bf44      	itt	mi
 800676e:	f043 0320 	orrmi.w	r3, r3, #32
 8006772:	6023      	strmi	r3, [r4, #0]
 8006774:	b91e      	cbnz	r6, 800677e <_printf_i+0x196>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f023 0320 	bic.w	r3, r3, #32
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	2310      	movs	r3, #16
 8006780:	e7b0      	b.n	80066e4 <_printf_i+0xfc>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f043 0320 	orr.w	r3, r3, #32
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	2378      	movs	r3, #120	; 0x78
 800678c:	4828      	ldr	r0, [pc, #160]	; (8006830 <_printf_i+0x248>)
 800678e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006792:	e7e3      	b.n	800675c <_printf_i+0x174>
 8006794:	0659      	lsls	r1, r3, #25
 8006796:	bf48      	it	mi
 8006798:	b2b6      	uxthmi	r6, r6
 800679a:	e7e6      	b.n	800676a <_printf_i+0x182>
 800679c:	4615      	mov	r5, r2
 800679e:	e7bb      	b.n	8006718 <_printf_i+0x130>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	6826      	ldr	r6, [r4, #0]
 80067a4:	6961      	ldr	r1, [r4, #20]
 80067a6:	1d18      	adds	r0, r3, #4
 80067a8:	6028      	str	r0, [r5, #0]
 80067aa:	0635      	lsls	r5, r6, #24
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0x1cc>
 80067b0:	6019      	str	r1, [r3, #0]
 80067b2:	e002      	b.n	80067ba <_printf_i+0x1d2>
 80067b4:	0670      	lsls	r0, r6, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0x1c8>
 80067b8:	8019      	strh	r1, [r3, #0]
 80067ba:	2300      	movs	r3, #0
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	4615      	mov	r5, r2
 80067c0:	e7ba      	b.n	8006738 <_printf_i+0x150>
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	1d1a      	adds	r2, r3, #4
 80067c6:	602a      	str	r2, [r5, #0]
 80067c8:	681d      	ldr	r5, [r3, #0]
 80067ca:	6862      	ldr	r2, [r4, #4]
 80067cc:	2100      	movs	r1, #0
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7f9 fd1e 	bl	8000210 <memchr>
 80067d4:	b108      	cbz	r0, 80067da <_printf_i+0x1f2>
 80067d6:	1b40      	subs	r0, r0, r5
 80067d8:	6060      	str	r0, [r4, #4]
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	2300      	movs	r3, #0
 80067e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e4:	e7a8      	b.n	8006738 <_printf_i+0x150>
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	462a      	mov	r2, r5
 80067ea:	4649      	mov	r1, r9
 80067ec:	4640      	mov	r0, r8
 80067ee:	47d0      	blx	sl
 80067f0:	3001      	adds	r0, #1
 80067f2:	d0ab      	beq.n	800674c <_printf_i+0x164>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	079b      	lsls	r3, r3, #30
 80067f8:	d413      	bmi.n	8006822 <_printf_i+0x23a>
 80067fa:	68e0      	ldr	r0, [r4, #12]
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	4298      	cmp	r0, r3
 8006800:	bfb8      	it	lt
 8006802:	4618      	movlt	r0, r3
 8006804:	e7a4      	b.n	8006750 <_printf_i+0x168>
 8006806:	2301      	movs	r3, #1
 8006808:	4632      	mov	r2, r6
 800680a:	4649      	mov	r1, r9
 800680c:	4640      	mov	r0, r8
 800680e:	47d0      	blx	sl
 8006810:	3001      	adds	r0, #1
 8006812:	d09b      	beq.n	800674c <_printf_i+0x164>
 8006814:	3501      	adds	r5, #1
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	9903      	ldr	r1, [sp, #12]
 800681a:	1a5b      	subs	r3, r3, r1
 800681c:	42ab      	cmp	r3, r5
 800681e:	dcf2      	bgt.n	8006806 <_printf_i+0x21e>
 8006820:	e7eb      	b.n	80067fa <_printf_i+0x212>
 8006822:	2500      	movs	r5, #0
 8006824:	f104 0619 	add.w	r6, r4, #25
 8006828:	e7f5      	b.n	8006816 <_printf_i+0x22e>
 800682a:	bf00      	nop
 800682c:	08006c61 	.word	0x08006c61
 8006830:	08006c72 	.word	0x08006c72

08006834 <memcpy>:
 8006834:	440a      	add	r2, r1
 8006836:	4291      	cmp	r1, r2
 8006838:	f100 33ff 	add.w	r3, r0, #4294967295
 800683c:	d100      	bne.n	8006840 <memcpy+0xc>
 800683e:	4770      	bx	lr
 8006840:	b510      	push	{r4, lr}
 8006842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800684a:	4291      	cmp	r1, r2
 800684c:	d1f9      	bne.n	8006842 <memcpy+0xe>
 800684e:	bd10      	pop	{r4, pc}

08006850 <memmove>:
 8006850:	4288      	cmp	r0, r1
 8006852:	b510      	push	{r4, lr}
 8006854:	eb01 0402 	add.w	r4, r1, r2
 8006858:	d902      	bls.n	8006860 <memmove+0x10>
 800685a:	4284      	cmp	r4, r0
 800685c:	4623      	mov	r3, r4
 800685e:	d807      	bhi.n	8006870 <memmove+0x20>
 8006860:	1e43      	subs	r3, r0, #1
 8006862:	42a1      	cmp	r1, r4
 8006864:	d008      	beq.n	8006878 <memmove+0x28>
 8006866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800686a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800686e:	e7f8      	b.n	8006862 <memmove+0x12>
 8006870:	4402      	add	r2, r0
 8006872:	4601      	mov	r1, r0
 8006874:	428a      	cmp	r2, r1
 8006876:	d100      	bne.n	800687a <memmove+0x2a>
 8006878:	bd10      	pop	{r4, pc}
 800687a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800687e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006882:	e7f7      	b.n	8006874 <memmove+0x24>

08006884 <_free_r>:
 8006884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006886:	2900      	cmp	r1, #0
 8006888:	d044      	beq.n	8006914 <_free_r+0x90>
 800688a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800688e:	9001      	str	r0, [sp, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f1a1 0404 	sub.w	r4, r1, #4
 8006896:	bfb8      	it	lt
 8006898:	18e4      	addlt	r4, r4, r3
 800689a:	f000 f913 	bl	8006ac4 <__malloc_lock>
 800689e:	4a1e      	ldr	r2, [pc, #120]	; (8006918 <_free_r+0x94>)
 80068a0:	9801      	ldr	r0, [sp, #4]
 80068a2:	6813      	ldr	r3, [r2, #0]
 80068a4:	b933      	cbnz	r3, 80068b4 <_free_r+0x30>
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	6014      	str	r4, [r2, #0]
 80068aa:	b003      	add	sp, #12
 80068ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b0:	f000 b90e 	b.w	8006ad0 <__malloc_unlock>
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	d908      	bls.n	80068ca <_free_r+0x46>
 80068b8:	6825      	ldr	r5, [r4, #0]
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	428b      	cmp	r3, r1
 80068be:	bf01      	itttt	eq
 80068c0:	6819      	ldreq	r1, [r3, #0]
 80068c2:	685b      	ldreq	r3, [r3, #4]
 80068c4:	1949      	addeq	r1, r1, r5
 80068c6:	6021      	streq	r1, [r4, #0]
 80068c8:	e7ed      	b.n	80068a6 <_free_r+0x22>
 80068ca:	461a      	mov	r2, r3
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b10b      	cbz	r3, 80068d4 <_free_r+0x50>
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d9fa      	bls.n	80068ca <_free_r+0x46>
 80068d4:	6811      	ldr	r1, [r2, #0]
 80068d6:	1855      	adds	r5, r2, r1
 80068d8:	42a5      	cmp	r5, r4
 80068da:	d10b      	bne.n	80068f4 <_free_r+0x70>
 80068dc:	6824      	ldr	r4, [r4, #0]
 80068de:	4421      	add	r1, r4
 80068e0:	1854      	adds	r4, r2, r1
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	6011      	str	r1, [r2, #0]
 80068e6:	d1e0      	bne.n	80068aa <_free_r+0x26>
 80068e8:	681c      	ldr	r4, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	6053      	str	r3, [r2, #4]
 80068ee:	4421      	add	r1, r4
 80068f0:	6011      	str	r1, [r2, #0]
 80068f2:	e7da      	b.n	80068aa <_free_r+0x26>
 80068f4:	d902      	bls.n	80068fc <_free_r+0x78>
 80068f6:	230c      	movs	r3, #12
 80068f8:	6003      	str	r3, [r0, #0]
 80068fa:	e7d6      	b.n	80068aa <_free_r+0x26>
 80068fc:	6825      	ldr	r5, [r4, #0]
 80068fe:	1961      	adds	r1, r4, r5
 8006900:	428b      	cmp	r3, r1
 8006902:	bf04      	itt	eq
 8006904:	6819      	ldreq	r1, [r3, #0]
 8006906:	685b      	ldreq	r3, [r3, #4]
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	bf04      	itt	eq
 800690c:	1949      	addeq	r1, r1, r5
 800690e:	6021      	streq	r1, [r4, #0]
 8006910:	6054      	str	r4, [r2, #4]
 8006912:	e7ca      	b.n	80068aa <_free_r+0x26>
 8006914:	b003      	add	sp, #12
 8006916:	bd30      	pop	{r4, r5, pc}
 8006918:	20000348 	.word	0x20000348

0800691c <sbrk_aligned>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4e0e      	ldr	r6, [pc, #56]	; (8006958 <sbrk_aligned+0x3c>)
 8006920:	460c      	mov	r4, r1
 8006922:	6831      	ldr	r1, [r6, #0]
 8006924:	4605      	mov	r5, r0
 8006926:	b911      	cbnz	r1, 800692e <sbrk_aligned+0x12>
 8006928:	f000 f8bc 	bl	8006aa4 <_sbrk_r>
 800692c:	6030      	str	r0, [r6, #0]
 800692e:	4621      	mov	r1, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f000 f8b7 	bl	8006aa4 <_sbrk_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	d00a      	beq.n	8006950 <sbrk_aligned+0x34>
 800693a:	1cc4      	adds	r4, r0, #3
 800693c:	f024 0403 	bic.w	r4, r4, #3
 8006940:	42a0      	cmp	r0, r4
 8006942:	d007      	beq.n	8006954 <sbrk_aligned+0x38>
 8006944:	1a21      	subs	r1, r4, r0
 8006946:	4628      	mov	r0, r5
 8006948:	f000 f8ac 	bl	8006aa4 <_sbrk_r>
 800694c:	3001      	adds	r0, #1
 800694e:	d101      	bne.n	8006954 <sbrk_aligned+0x38>
 8006950:	f04f 34ff 	mov.w	r4, #4294967295
 8006954:	4620      	mov	r0, r4
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	2000034c 	.word	0x2000034c

0800695c <_malloc_r>:
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	1ccd      	adds	r5, r1, #3
 8006962:	f025 0503 	bic.w	r5, r5, #3
 8006966:	3508      	adds	r5, #8
 8006968:	2d0c      	cmp	r5, #12
 800696a:	bf38      	it	cc
 800696c:	250c      	movcc	r5, #12
 800696e:	2d00      	cmp	r5, #0
 8006970:	4607      	mov	r7, r0
 8006972:	db01      	blt.n	8006978 <_malloc_r+0x1c>
 8006974:	42a9      	cmp	r1, r5
 8006976:	d905      	bls.n	8006984 <_malloc_r+0x28>
 8006978:	230c      	movs	r3, #12
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	2600      	movs	r6, #0
 800697e:	4630      	mov	r0, r6
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006984:	4e2e      	ldr	r6, [pc, #184]	; (8006a40 <_malloc_r+0xe4>)
 8006986:	f000 f89d 	bl	8006ac4 <__malloc_lock>
 800698a:	6833      	ldr	r3, [r6, #0]
 800698c:	461c      	mov	r4, r3
 800698e:	bb34      	cbnz	r4, 80069de <_malloc_r+0x82>
 8006990:	4629      	mov	r1, r5
 8006992:	4638      	mov	r0, r7
 8006994:	f7ff ffc2 	bl	800691c <sbrk_aligned>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	4604      	mov	r4, r0
 800699c:	d14d      	bne.n	8006a3a <_malloc_r+0xde>
 800699e:	6834      	ldr	r4, [r6, #0]
 80069a0:	4626      	mov	r6, r4
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	d140      	bne.n	8006a28 <_malloc_r+0xcc>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	4631      	mov	r1, r6
 80069aa:	4638      	mov	r0, r7
 80069ac:	eb04 0803 	add.w	r8, r4, r3
 80069b0:	f000 f878 	bl	8006aa4 <_sbrk_r>
 80069b4:	4580      	cmp	r8, r0
 80069b6:	d13a      	bne.n	8006a2e <_malloc_r+0xd2>
 80069b8:	6821      	ldr	r1, [r4, #0]
 80069ba:	3503      	adds	r5, #3
 80069bc:	1a6d      	subs	r5, r5, r1
 80069be:	f025 0503 	bic.w	r5, r5, #3
 80069c2:	3508      	adds	r5, #8
 80069c4:	2d0c      	cmp	r5, #12
 80069c6:	bf38      	it	cc
 80069c8:	250c      	movcc	r5, #12
 80069ca:	4629      	mov	r1, r5
 80069cc:	4638      	mov	r0, r7
 80069ce:	f7ff ffa5 	bl	800691c <sbrk_aligned>
 80069d2:	3001      	adds	r0, #1
 80069d4:	d02b      	beq.n	8006a2e <_malloc_r+0xd2>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	442b      	add	r3, r5
 80069da:	6023      	str	r3, [r4, #0]
 80069dc:	e00e      	b.n	80069fc <_malloc_r+0xa0>
 80069de:	6822      	ldr	r2, [r4, #0]
 80069e0:	1b52      	subs	r2, r2, r5
 80069e2:	d41e      	bmi.n	8006a22 <_malloc_r+0xc6>
 80069e4:	2a0b      	cmp	r2, #11
 80069e6:	d916      	bls.n	8006a16 <_malloc_r+0xba>
 80069e8:	1961      	adds	r1, r4, r5
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	6025      	str	r5, [r4, #0]
 80069ee:	bf18      	it	ne
 80069f0:	6059      	strne	r1, [r3, #4]
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	bf08      	it	eq
 80069f6:	6031      	streq	r1, [r6, #0]
 80069f8:	5162      	str	r2, [r4, r5]
 80069fa:	604b      	str	r3, [r1, #4]
 80069fc:	4638      	mov	r0, r7
 80069fe:	f104 060b 	add.w	r6, r4, #11
 8006a02:	f000 f865 	bl	8006ad0 <__malloc_unlock>
 8006a06:	f026 0607 	bic.w	r6, r6, #7
 8006a0a:	1d23      	adds	r3, r4, #4
 8006a0c:	1af2      	subs	r2, r6, r3
 8006a0e:	d0b6      	beq.n	800697e <_malloc_r+0x22>
 8006a10:	1b9b      	subs	r3, r3, r6
 8006a12:	50a3      	str	r3, [r4, r2]
 8006a14:	e7b3      	b.n	800697e <_malloc_r+0x22>
 8006a16:	6862      	ldr	r2, [r4, #4]
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	bf0c      	ite	eq
 8006a1c:	6032      	streq	r2, [r6, #0]
 8006a1e:	605a      	strne	r2, [r3, #4]
 8006a20:	e7ec      	b.n	80069fc <_malloc_r+0xa0>
 8006a22:	4623      	mov	r3, r4
 8006a24:	6864      	ldr	r4, [r4, #4]
 8006a26:	e7b2      	b.n	800698e <_malloc_r+0x32>
 8006a28:	4634      	mov	r4, r6
 8006a2a:	6876      	ldr	r6, [r6, #4]
 8006a2c:	e7b9      	b.n	80069a2 <_malloc_r+0x46>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	4638      	mov	r0, r7
 8006a34:	f000 f84c 	bl	8006ad0 <__malloc_unlock>
 8006a38:	e7a1      	b.n	800697e <_malloc_r+0x22>
 8006a3a:	6025      	str	r5, [r4, #0]
 8006a3c:	e7de      	b.n	80069fc <_malloc_r+0xa0>
 8006a3e:	bf00      	nop
 8006a40:	20000348 	.word	0x20000348

08006a44 <_realloc_r>:
 8006a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a48:	4680      	mov	r8, r0
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	460e      	mov	r6, r1
 8006a4e:	b921      	cbnz	r1, 8006a5a <_realloc_r+0x16>
 8006a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	4611      	mov	r1, r2
 8006a56:	f7ff bf81 	b.w	800695c <_malloc_r>
 8006a5a:	b92a      	cbnz	r2, 8006a68 <_realloc_r+0x24>
 8006a5c:	f7ff ff12 	bl	8006884 <_free_r>
 8006a60:	4625      	mov	r5, r4
 8006a62:	4628      	mov	r0, r5
 8006a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a68:	f000 f838 	bl	8006adc <_malloc_usable_size_r>
 8006a6c:	4284      	cmp	r4, r0
 8006a6e:	4607      	mov	r7, r0
 8006a70:	d802      	bhi.n	8006a78 <_realloc_r+0x34>
 8006a72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a76:	d812      	bhi.n	8006a9e <_realloc_r+0x5a>
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f7ff ff6e 	bl	800695c <_malloc_r>
 8006a80:	4605      	mov	r5, r0
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d0ed      	beq.n	8006a62 <_realloc_r+0x1e>
 8006a86:	42bc      	cmp	r4, r7
 8006a88:	4622      	mov	r2, r4
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	bf28      	it	cs
 8006a8e:	463a      	movcs	r2, r7
 8006a90:	f7ff fed0 	bl	8006834 <memcpy>
 8006a94:	4631      	mov	r1, r6
 8006a96:	4640      	mov	r0, r8
 8006a98:	f7ff fef4 	bl	8006884 <_free_r>
 8006a9c:	e7e1      	b.n	8006a62 <_realloc_r+0x1e>
 8006a9e:	4635      	mov	r5, r6
 8006aa0:	e7df      	b.n	8006a62 <_realloc_r+0x1e>
	...

08006aa4 <_sbrk_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	; (8006ac0 <_sbrk_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fb f816 	bl	8001ae0 <_sbrk>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_sbrk_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_sbrk_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20000350 	.word	0x20000350

08006ac4 <__malloc_lock>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__malloc_lock+0x8>)
 8006ac6:	f000 b811 	b.w	8006aec <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	20000354 	.word	0x20000354

08006ad0 <__malloc_unlock>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__malloc_unlock+0x8>)
 8006ad2:	f000 b80c 	b.w	8006aee <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	20000354 	.word	0x20000354

08006adc <_malloc_usable_size_r>:
 8006adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae0:	1f18      	subs	r0, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bfbc      	itt	lt
 8006ae6:	580b      	ldrlt	r3, [r1, r0]
 8006ae8:	18c0      	addlt	r0, r0, r3
 8006aea:	4770      	bx	lr

08006aec <__retarget_lock_acquire_recursive>:
 8006aec:	4770      	bx	lr

08006aee <__retarget_lock_release_recursive>:
 8006aee:	4770      	bx	lr

08006af0 <_init>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	bf00      	nop
 8006af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af6:	bc08      	pop	{r3}
 8006af8:	469e      	mov	lr, r3
 8006afa:	4770      	bx	lr

08006afc <_fini>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	bf00      	nop
 8006b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b02:	bc08      	pop	{r3}
 8006b04:	469e      	mov	lr, r3
 8006b06:	4770      	bx	lr
