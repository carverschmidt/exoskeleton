
EMG_Sensor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005428  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000070  080056f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080056f8  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002301  00000000  00000000  00032241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00034548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  000355c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f60  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146f2  00000000  00000000  000594e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb35  00000000  00000000  0006dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b70f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  0014b760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055e0 	.word	0x080055e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080055e0 	.word	0x080055e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b0a1      	sub	sp, #132	; 0x84
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 ffbb 	bl	8001534 <HAL_Init>
  int msgSize;
  int raw;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f83b 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fbcb 	bl	8000d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80005c6:	f000 fba9 	bl	8000d1c <MX_DMA_Init>
  MX_I2C1_Init();
 80005ca:	f000 f91d 	bl	8000808 <MX_I2C1_Init>
  MX_TIM2_Init();
 80005ce:	f000 f949 	bl	8000864 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d2:	f000 f9ab 	bl	800092c <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d6:	f000 fa2b 	bl	8000a30 <MX_TIM4_Init>
  MX_TIM8_Init();
 80005da:	f000 fa9f 	bl	8000b1c <MX_TIM8_Init>
  MX_UART4_Init();
 80005de:	f000 fb49 	bl	8000c74 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 fb71 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005e6:	f000 f893 	bl	8000710 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start_DMA(&hadc1, emg, 4);
 80005ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005ee:	2204      	movs	r2, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <main+0x78>)
 80005f4:	f001 f878 	bl	80016e8 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start(&hadc1);
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	//raw = HAL_ADC_GetValue(&hadc1);
	//HAL_DMA
	msgSize = sprintf((char *)msg, "EMG1: %lu\tEMG2: %lu\tEMG3: %lu\tEMG4: %lu\r\n", emg[0],emg[1], emg[2],emg[3]);
 80005f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80005fa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80005fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000600:	4638      	mov	r0, r7
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4623      	mov	r3, r4
 8000608:	460a      	mov	r2, r1
 800060a:	4909      	ldr	r1, [pc, #36]	; (8000630 <main+0x7c>)
 800060c:	f004 fb7a 	bl	8004d04 <siprintf>
 8000610:	6778      	str	r0, [r7, #116]	; 0x74
	HAL_UART_Transmit(&huart2, msg, msgSize, 20);
 8000612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000614:	b29a      	uxth	r2, r3
 8000616:	4639      	mov	r1, r7
 8000618:	2314      	movs	r3, #20
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x80>)
 800061c:	f003 ffcb 	bl	80045b6 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000624:	f000 fff8 	bl	8001618 <HAL_Delay>
  {
 8000628:	e7df      	b.n	80005ea <main+0x36>
 800062a:	bf00      	nop
 800062c:	2000008c 	.word	0x2000008c
 8000630:	080055f8 	.word	0x080055f8
 8000634:	200002ec 	.word	0x200002ec

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2234      	movs	r2, #52	; 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fb54 	bl	8004cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a28      	ldr	r2, [pc, #160]	; (8000708 <SystemClock_Config+0xd0>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd4>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006b0:	2354      	movs	r3, #84	; 0x54
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 feab 	bl	8003420 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d0:	f000 fbc8 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fb4b 	bl	8002d8c <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006fc:	f000 fbb2 	bl	8000e64 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b36      	ldr	r3, [pc, #216]	; (80007fc <MX_ADC1_Init+0xec>)
 8000724:	4a36      	ldr	r2, [pc, #216]	; (8000800 <MX_ADC1_Init+0xf0>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000728:	4b34      	ldr	r3, [pc, #208]	; (80007fc <MX_ADC1_Init+0xec>)
 800072a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800072e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000730:	4b32      	ldr	r3, [pc, #200]	; (80007fc <MX_ADC1_Init+0xec>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <MX_ADC1_Init+0xec>)
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_ADC1_Init+0xec>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <MX_ADC1_Init+0xec>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_ADC1_Init+0xec>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_ADC1_Init+0xec>)
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <MX_ADC1_Init+0xf4>)
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_ADC1_Init+0xec>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC1_Init+0xec>)
 800075e:	2204      	movs	r2, #4
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_ADC1_Init+0xec>)
 8000764:	2201      	movs	r2, #1
 8000766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC1_Init+0xec>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	4822      	ldr	r0, [pc, #136]	; (80007fc <MX_ADC1_Init+0xec>)
 8000772:	f000 ff75 	bl	8001660 <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fb72 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	481a      	ldr	r0, [pc, #104]	; (80007fc <MX_ADC1_Init+0xec>)
 8000792:	f001 f8d7 	bl	8001944 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800079c:	f000 fb62 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4813      	ldr	r0, [pc, #76]	; (80007fc <MX_ADC1_Init+0xec>)
 80007ae:	f001 f8c9 	bl	8001944 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b8:	f000 fb54 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007bc:	2304      	movs	r3, #4
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007c0:	2303      	movs	r3, #3
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_ADC1_Init+0xec>)
 80007ca:	f001 f8bb 	bl	8001944 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007d4:	f000 fb46 	bl	8000e64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007d8:	2308      	movs	r3, #8
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_ADC1_Init+0xec>)
 80007e6:	f001 f8ad 	bl	8001944 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007f0:	f000 fb38 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	40012000 	.word	0x40012000
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_I2C1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_I2C1_Init+0x58>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_I2C1_Init+0x50>)
 8000826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800082a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_I2C1_Init+0x50>)
 8000846:	f002 f95d 	bl	8002b04 <HAL_I2C_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 fb08 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000134 	.word	0x20000134
 800085c:	40005400 	.word	0x40005400
 8000860:	000186a0 	.word	0x000186a0

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_TIM2_Init+0xc4>)
 8000888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_TIM2_Init+0xc4>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_TIM2_Init+0xc4>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_TIM2_Init+0xc4>)
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_TIM2_Init+0xc4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_TIM2_Init+0xc4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ae:	481e      	ldr	r0, [pc, #120]	; (8000928 <MX_TIM2_Init+0xc4>)
 80008b0:	f003 f8a3 	bl	80039fa <HAL_TIM_PWM_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008ba:	f000 fad3 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	4619      	mov	r1, r3
 80008cc:	4816      	ldr	r0, [pc, #88]	; (8000928 <MX_TIM2_Init+0xc4>)
 80008ce:	f003 fd57 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008d8:	f000 fac4 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008dc:	2360      	movs	r3, #96	; 0x60
 80008de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2204      	movs	r2, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_TIM2_Init+0xc4>)
 80008f4:	f003 f8d0 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008fe:	f000 fab1 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2208      	movs	r2, #8
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_TIM2_Init+0xc4>)
 800090a:	f003 f8c5 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000914:	f000 faa6 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_TIM2_Init+0xc4>)
 800091a:	f000 fc1b 	bl	8001154 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000188 	.word	0x20000188

0800092c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095c:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <MX_TIM3_Init+0xfc>)
 800095e:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <MX_TIM3_Init+0x100>)
 8000960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000962:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <MX_TIM3_Init+0xfc>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_TIM3_Init+0xfc>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_TIM3_Init+0xfc>)
 8000970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_TIM3_Init+0xfc>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <MX_TIM3_Init+0xfc>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <MX_TIM3_Init+0xfc>)
 8000984:	f002 ffea 	bl	800395c <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800098e:	f000 fa69 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	4619      	mov	r1, r3
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <MX_TIM3_Init+0xfc>)
 80009a0:	f003 f93c 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009aa:	f000 fa5b 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ae:	481e      	ldr	r0, [pc, #120]	; (8000a28 <MX_TIM3_Init+0xfc>)
 80009b0:	f003 f823 	bl	80039fa <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009ba:	f000 fa53 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4619      	mov	r1, r3
 80009cc:	4816      	ldr	r0, [pc, #88]	; (8000a28 <MX_TIM3_Init+0xfc>)
 80009ce:	f003 fcd7 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009d8:	f000 fa44 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2360      	movs	r3, #96	; 0x60
 80009de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_TIM3_Init+0xfc>)
 80009f4:	f003 f850 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009fe:	f000 fa31 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2204      	movs	r2, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <MX_TIM3_Init+0xfc>)
 8000a0a:	f003 f845 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000a14:	f000 fa26 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <MX_TIM3_Init+0xfc>)
 8000a1a:	f000 fb9b 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8000a1e:	bf00      	nop
 8000a20:	3738      	adds	r7, #56	; 0x38
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200001d0 	.word	0x200001d0
 8000a2c:	40000400 	.word	0x40000400

08000a30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a60:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000a62:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <MX_TIM4_Init+0xe8>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a86:	4823      	ldr	r0, [pc, #140]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000a88:	f002 ff68 	bl	800395c <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a92:	f000 f9e7 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000aa4:	f003 f8ba 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000aae:	f000 f9d9 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000ab4:	f002 ffa1 	bl	80039fa <HAL_TIM_PWM_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000abe:	f000 f9d1 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000ad2:	f003 fc55 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000adc:	f000 f9c2 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	; 0x60
 8000ae2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000af8:	f002 ffce 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b02:	f000 f9af 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_TIM4_Init+0xe4>)
 8000b08:	f000 fb24 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8000b0c:	bf00      	nop
 8000b0e:	3738      	adds	r7, #56	; 0x38
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000218 	.word	0x20000218
 8000b18:	40000800 	.word	0x40000800

08000b1c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b096      	sub	sp, #88	; 0x58
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2220      	movs	r2, #32
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 f8cd 	bl	8004cf4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b5a:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b5c:	4a44      	ldr	r2, [pc, #272]	; (8000c70 <MX_TIM8_Init+0x154>)
 8000b5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b86:	4839      	ldr	r0, [pc, #228]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000b88:	f002 fee8 	bl	800395c <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000b92:	f000 f967 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4832      	ldr	r0, [pc, #200]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000ba4:	f003 f83a 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000bae:	f000 f959 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000bb2:	482e      	ldr	r0, [pc, #184]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000bb4:	f002 ff21 	bl	80039fa <HAL_TIM_PWM_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000bbe:	f000 f951 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4826      	ldr	r0, [pc, #152]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000bd2:	f003 fbd5 	bl	8004380 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bdc:	f000 f942 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4819      	ldr	r0, [pc, #100]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000c06:	f002 ff47 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000c10:	f000 f928 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	2204      	movs	r2, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000c1e:	f002 ff3b 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000c28:	f000 f91c 	bl	8000e64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000c50:	f003 fc12 	bl	8004478 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000c5a:	f000 f903 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <MX_TIM8_Init+0x150>)
 8000c60:	f000 fa78 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8000c64:	bf00      	nop
 8000c66:	3758      	adds	r7, #88	; 0x58
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000260 	.word	0x20000260
 8000c70:	40010400 	.word	0x40010400

08000c74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_UART4_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_UART4_Init+0x4c>)
 8000cac:	f003 fc36 	bl	800451c <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f8d5 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200002a8 	.word	0x200002a8
 8000cc4:	40004c00 	.word	0x40004c00

08000cc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART2_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART2_UART_Init+0x4c>)
 8000d00:	f003 fc0c 	bl	800451c <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f000 f8ab 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200002ec 	.word	0x200002ec
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_DMA_Init+0x3c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <MX_DMA_Init+0x3c>)
 8000d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_DMA_Init+0x3c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2038      	movs	r0, #56	; 0x38
 8000d44:	f001 f989 	bl	800205a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d48:	2038      	movs	r0, #56	; 0x38
 8000d4a:	f001 f9a2 	bl	8002092 <HAL_NVIC_EnableIRQ>

}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <MX_GPIO_Init+0xf8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000dcc:	4822      	ldr	r0, [pc, #136]	; (8000e58 <MX_GPIO_Init+0xfc>)
 8000dce:	f001 fe7f 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_GPIO_Init+0x100>)
 8000dd8:	f001 fe7a 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_GPIO_Init+0x104>)
 8000df4:	f001 fcd8 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000df8:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <MX_GPIO_Init+0xfc>)
 8000e12:	f001 fcc9 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e16:	2320      	movs	r3, #32
 8000e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_GPIO_Init+0x104>)
 8000e2c:	f001 fcbc 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e30:	2320      	movs	r3, #32
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_GPIO_Init+0x100>)
 8000e48:	f001 fcae 	bl	80027a8 <HAL_GPIO_Init>

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eae:	2007      	movs	r0, #7
 8000eb0:	f001 f8c8 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a3c      	ldr	r2, [pc, #240]	; (8000fd0 <HAL_ADC_MspInit+0x110>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d171      	bne.n	8000fc6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_ADC_MspInit+0x114>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000f36:	2313      	movs	r3, #19
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <HAL_ADC_MspInit+0x118>)
 8000f4a:	f001 fc2d 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f52:	2303      	movs	r3, #3
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x11c>)
 8000f62:	f001 fc21 	bl	80027a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_ADC_MspInit+0x124>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000fac:	f001 f88c 	bl	80020c8 <HAL_DMA_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fb6:	f7ff ff55 	bl	8000e64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000fbe:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_ADC_MspInit+0x120>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012000 	.word	0x40012000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	200000d4 	.word	0x200000d4
 8000fe4:	40026410 	.word	0x40026410

08000fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_I2C_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12c      	bne.n	8001064 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001038:	2304      	movs	r3, #4
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <HAL_I2C_MspInit+0x8c>)
 8001044:	f001 fbb0 	bl	80027a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40005400 	.word	0x40005400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400

08001078 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d10d      	bne.n	80010a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_TIM_Base_MspInit+0x8c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10e      	bne.n	80010e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80010e6:	e026      	b.n	8001136 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_TIM_Base_MspInit+0x94>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10e      	bne.n	8001110 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
}
 800110e:	e012      	b.n	8001136 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM8)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_TIM_Base_MspInit+0x98>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10d      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_TIM_Base_MspInit+0x90>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40000400 	.word	0x40000400
 8001148:	40023800 	.word	0x40023800
 800114c:	40000800 	.word	0x40000800
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d11f      	bne.n	80011b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a54      	ldr	r2, [pc, #336]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001192:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4849      	ldr	r0, [pc, #292]	; (80012d4 <HAL_TIM_MspPostInit+0x180>)
 80011b0:	f001 fafa 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80011b4:	e088      	b.n	80012c8 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM3)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <HAL_TIM_MspPostInit+0x184>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d13c      	bne.n	800123a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001208:	2302      	movs	r3, #2
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4832      	ldr	r0, [pc, #200]	; (80012dc <HAL_TIM_MspPostInit+0x188>)
 8001214:	f001 fac8 	bl	80027a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001218:	2310      	movs	r3, #16
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001228:	2302      	movs	r3, #2
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <HAL_TIM_MspPostInit+0x180>)
 8001234:	f001 fab8 	bl	80027a8 <HAL_GPIO_Init>
}
 8001238:	e046      	b.n	80012c8 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM4)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <HAL_TIM_MspPostInit+0x18c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d11e      	bne.n	8001282 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001260:	2340      	movs	r3, #64	; 0x40
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001270:	2302      	movs	r3, #2
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4816      	ldr	r0, [pc, #88]	; (80012d4 <HAL_TIM_MspPostInit+0x180>)
 800127c:	f001 fa94 	bl	80027a8 <HAL_GPIO_Init>
}
 8001280:	e022      	b.n	80012c8 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM8)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_TIM_MspPostInit+0x190>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d11d      	bne.n	80012c8 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_TIM_MspPostInit+0x17c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a8:	23c0      	movs	r3, #192	; 0xc0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80012b8:	2303      	movs	r3, #3
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_TIM_MspPostInit+0x194>)
 80012c4:	f001 fa70 	bl	80027a8 <HAL_GPIO_Init>
}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40000800 	.word	0x40000800
 80012e4:	40010400 	.word	0x40010400
 80012e8:	40020800 	.word	0x40020800

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_UART_MspInit+0xe8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12d      	bne.n	800136a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001318:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001346:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001358:	2308      	movs	r3, #8
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	481e      	ldr	r0, [pc, #120]	; (80013dc <HAL_UART_MspInit+0xf0>)
 8001364:	f001 fa20 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001368:	e030      	b.n	80013cc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <HAL_UART_MspInit+0xf4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d12b      	bne.n	80013cc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800137e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_UART_MspInit+0xec>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ac:	230c      	movs	r3, #12
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013bc:	2307      	movs	r3, #7
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <HAL_UART_MspInit+0xf8>)
 80013c8:	f001 f9ee 	bl	80027a8 <HAL_GPIO_Init>
}
 80013cc:	bf00      	nop
 80013ce:	3730      	adds	r7, #48	; 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004c00 	.word	0x40004c00
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40020000 	.word	0x40020000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f8d0 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <DMA2_Stream0_IRQHandler+0x10>)
 8001442:	f000 ff47 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000d4 	.word	0x200000d4

08001450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <_sbrk+0x5c>)
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <_sbrk+0x60>)
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <_sbrk+0x64>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <_sbrk+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	429a      	cmp	r2, r3
 800147e:	d207      	bcs.n	8001490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001480:	f003 fc0e 	bl	8004ca0 <__errno>
 8001484:	4603      	mov	r3, r0
 8001486:	220c      	movs	r2, #12
 8001488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	e009      	b.n	80014a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <_sbrk+0x64>)
 80014a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20020000 	.word	0x20020000
 80014b0:	00000400 	.word	0x00000400
 80014b4:	20000330 	.word	0x20000330
 80014b8:	20000348 	.word	0x20000348

080014bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <SystemInit+0x20>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <SystemInit+0x20>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e6:	490e      	ldr	r1, [pc, #56]	; (8001520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014fc:	4c0b      	ldr	r4, [pc, #44]	; (800152c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150a:	f7ff ffd7 	bl	80014bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150e:	f003 fbcd 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff f84f 	bl	80005b4 <main>
  bx  lr    
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001524:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8001528:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800152c:	20000348 	.word	0x20000348

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <HAL_Init+0x40>)
 800153e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_Init+0x40>)
 800154a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_Init+0x40>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 fd71 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001562:	2000      	movs	r0, #0
 8001564:	f000 f808 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001568:	f7ff fc82 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023c00 	.word	0x40023c00

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fd89 	bl	80020ae <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 fd51 	bl	800205a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000004 	.word	0x20000004

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008
 80015fc:	20000334 	.word	0x20000334

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000334 	.word	0x20000334

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008

08001660 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e033      	b.n	80016de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fc1e 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a6:	f023 0302 	bic.w	r3, r3, #2
 80016aa:	f043 0202 	orr.w	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fa78 	bl	8001ba8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
 80016ce:	e001      	b.n	80016d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Start_DMA+0x1e>
 8001702:	2302      	movs	r3, #2
 8001704:	e0e9      	b.n	80018da <HAL_ADC_Start_DMA+0x1f2>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d018      	beq.n	800174e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800172c:	4b6d      	ldr	r3, [pc, #436]	; (80018e4 <HAL_ADC_Start_DMA+0x1fc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6d      	ldr	r2, [pc, #436]	; (80018e8 <HAL_ADC_Start_DMA+0x200>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9a      	lsrs	r2, r3, #18
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001740:	e002      	b.n	8001748 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	3b01      	subs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800175c:	d107      	bne.n	800176e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800176c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	f040 80a1 	bne.w	80018c0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017bc:	d106      	bne.n	80017cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f023 0206 	bic.w	r2, r3, #6
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
 80017ca:	e002      	b.n	80017d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_ADC_Start_DMA+0x204>)
 80017dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e2:	4a43      	ldr	r2, [pc, #268]	; (80018f0 <HAL_ADC_Start_DMA+0x208>)
 80017e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <HAL_ADC_Start_DMA+0x20c>)
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	4a41      	ldr	r2, [pc, #260]	; (80018f8 <HAL_ADC_Start_DMA+0x210>)
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800180e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	334c      	adds	r3, #76	; 0x4c
 800182a:	4619      	mov	r1, r3
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f000 fcf8 	bl	8002224 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2b00      	cmp	r3, #0
 800183e:	d12a      	bne.n	8001896 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <HAL_ADC_Start_DMA+0x214>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d015      	beq.n	8001876 <HAL_ADC_Start_DMA+0x18e>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2c      	ldr	r2, [pc, #176]	; (8001900 <HAL_ADC_Start_DMA+0x218>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d105      	bne.n	8001860 <HAL_ADC_Start_DMA+0x178>
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_ADC_Start_DMA+0x204>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_ADC_Start_DMA+0x21c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d136      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x1f0>
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_ADC_Start_DMA+0x204>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d130      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d129      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	e020      	b.n	80018d8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <HAL_ADC_Start_DMA+0x214>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d11b      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x1f0>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d114      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e00b      	b.n	80018d8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f043 0210 	orr.w	r2, r3, #16
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	40012300 	.word	0x40012300
 80018f0:	08001da1 	.word	0x08001da1
 80018f4:	08001e5b 	.word	0x08001e5b
 80018f8:	08001e77 	.word	0x08001e77
 80018fc:	40012000 	.word	0x40012000
 8001900:	40012100 	.word	0x40012100
 8001904:	40012200 	.word	0x40012200

08001908 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1c>
 800195c:	2302      	movs	r3, #2
 800195e:	e113      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x244>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b09      	cmp	r3, #9
 800196e:	d925      	bls.n	80019bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68d9      	ldr	r1, [r3, #12]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	3b1e      	subs	r3, #30
 8001986:	2207      	movs	r2, #7
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43da      	mvns	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	400a      	ands	r2, r1
 8001994:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68d9      	ldr	r1, [r3, #12]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	4603      	mov	r3, r0
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4403      	add	r3, r0
 80019ae:	3b1e      	subs	r3, #30
 80019b0:	409a      	lsls	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	e022      	b.n	8001a02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6919      	ldr	r1, [r3, #16]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	2207      	movs	r2, #7
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	400a      	ands	r2, r1
 80019de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6919      	ldr	r1, [r3, #16]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4403      	add	r3, r0
 80019f8:	409a      	lsls	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d824      	bhi.n	8001a54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b05      	subs	r3, #5
 8001a1c:	221f      	movs	r2, #31
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	400a      	ands	r2, r1
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3b05      	subs	r3, #5
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
 8001a52:	e04c      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d824      	bhi.n	8001aa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b23      	subs	r3, #35	; 0x23
 8001a6e:	221f      	movs	r2, #31
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43da      	mvns	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b23      	subs	r3, #35	; 0x23
 8001a98:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa4:	e023      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b41      	subs	r3, #65	; 0x41
 8001ab8:	221f      	movs	r2, #31
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b41      	subs	r3, #65	; 0x41
 8001ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_ADC_ConfigChannel+0x250>)
 8001af0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_ADC_ConfigChannel+0x254>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d10f      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x1d8>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b12      	cmp	r3, #18
 8001b02:	d10b      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_ADC_ConfigChannel+0x254>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12b      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x23a>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_ADC_ConfigChannel+0x258>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d003      	beq.n	8001b38 <HAL_ADC_ConfigChannel+0x1f4>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b11      	cmp	r3, #17
 8001b36:	d122      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_ADC_ConfigChannel+0x258>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d111      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_ADC_ConfigChannel+0x25c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_ADC_ConfigChannel+0x260>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	0c9a      	lsrs	r2, r3, #18
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b70:	e002      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f9      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40012300 	.word	0x40012300
 8001b98:	40012000 	.word	0x40012000
 8001b9c:	10000012 	.word	0x10000012
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb0:	4b79      	ldr	r3, [pc, #484]	; (8001d98 <ADC_Init+0x1f0>)
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	021a      	lsls	r2, r3, #8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <ADC_Init+0x1f4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d022      	beq.n	8001c86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	e00f      	b.n	8001ca6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ca4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0202 	bic.w	r2, r2, #2
 8001cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
 8001cc0:	005a      	lsls	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	035a      	lsls	r2, r3, #13
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	e007      	b.n	8001d1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	051a      	lsls	r2, r3, #20
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d5e:	025a      	lsls	r2, r3, #9
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	029a      	lsls	r2, r3, #10
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	0f000001 	.word	0x0f000001

08001da0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d13c      	bne.n	8001e34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d12b      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d127      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d119      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0220 	bic.w	r2, r2, #32
 8001e06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff fd6b 	bl	8001908 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e32:	e00e      	b.n	8001e52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fd75 	bl	8001930 <HAL_ADC_ErrorCallback>
}
 8001e46:	e004      	b.n	8001e52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff fd57 	bl	800191c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f043 0204 	orr.w	r2, r3, #4
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff fd4a 	bl	8001930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4907      	ldr	r1, [pc, #28]	; (8001f40 <__NVIC_EnableIRQ+0x38>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
         );
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ff8e 	bl	8001f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff29 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206c:	f7ff ff3e 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff ff8e 	bl	8001f98 <NVIC_EncodePriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff5d 	bl	8001f44 <__NVIC_SetPriority>
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff31 	bl	8001f08 <__NVIC_EnableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffa2 	bl	8002000 <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff fa94 	bl	8001600 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e099      	b.n	8002218 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002104:	e00f      	b.n	8002126 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002106:	f7ff fa7b 	bl	8001600 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b05      	cmp	r3, #5
 8002112:	d908      	bls.n	8002126 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e078      	b.n	8002218 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e8      	bne.n	8002106 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <HAL_DMA_Init+0x158>)
 8002140:	4013      	ands	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002152:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2b04      	cmp	r3, #4
 800217e:	d107      	bne.n	8002190 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	4313      	orrs	r3, r2
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d117      	bne.n	80021ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fa6f 	bl	80026b0 <DMA_CheckFifoParam>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021e6:	2301      	movs	r3, #1
 80021e8:	e016      	b.n	8002218 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa26 	bl	8002644 <DMA_CalcBaseAndBitshift>
 80021f8:	4603      	mov	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	223f      	movs	r2, #63	; 0x3f
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	f010803f 	.word	0xf010803f

08002224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_DMA_Start_IT+0x26>
 8002246:	2302      	movs	r3, #2
 8002248:	e040      	b.n	80022cc <HAL_DMA_Start_IT+0xa8>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d12f      	bne.n	80022be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f9b8 	bl	80025e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	223f      	movs	r2, #63	; 0x3f
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0216 	orr.w	r2, r2, #22
 8002292:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0208 	orr.w	r2, r2, #8
 80022aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e005      	b.n	80022ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022c6:	2302      	movs	r3, #2
 80022c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022e0:	4b8e      	ldr	r3, [pc, #568]	; (800251c <HAL_DMA_IRQHandler+0x248>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a8e      	ldr	r2, [pc, #568]	; (8002520 <HAL_DMA_IRQHandler+0x24c>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	2208      	movs	r2, #8
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01a      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0204 	bic.w	r2, r2, #4
 8002326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2208      	movs	r2, #8
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2201      	movs	r2, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2201      	movs	r2, #1
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2204      	movs	r2, #4
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2204      	movs	r2, #4
 800239a:	409a      	lsls	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2210      	movs	r2, #16
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d043      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03c      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2210      	movs	r2, #16
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d108      	bne.n	8002404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d024      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
 8002402:	e01f      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e016      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2220      	movs	r2, #32
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 808f 	beq.w	8002574 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8087 	beq.w	8002574 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	2220      	movs	r2, #32
 800246c:	409a      	lsls	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b05      	cmp	r3, #5
 800247c:	d136      	bne.n	80024ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0216 	bic.w	r2, r2, #22
 800248c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <HAL_DMA_IRQHandler+0x1da>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0208 	bic.w	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	223f      	movs	r2, #63	; 0x3f
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07e      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
        }
        return;
 80024ea:	e079      	b.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01d      	beq.n	8002536 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	2b00      	cmp	r3, #0
 800250e:	d031      	beq.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e02c      	b.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
 800251a:	bf00      	nop
 800251c:	20000000 	.word	0x20000000
 8002520:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d023      	beq.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
 8002534:	e01e      	b.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10f      	bne.n	8002564 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0210 	bic.w	r2, r2, #16
 8002552:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	2b00      	cmp	r3, #0
 800257a:	d032      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d022      	beq.n	80025ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2205      	movs	r2, #5
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d307      	bcc.n	80025bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f2      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x2cc>
 80025ba:	e000      	b.n	80025be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4798      	blx	r3
 80025de:	e000      	b.n	80025e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025e0:	bf00      	nop
    }
  }
}
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002604:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d108      	bne.n	8002628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002626:	e007      	b.n	8002638 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3b10      	subs	r3, #16
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <DMA_CalcBaseAndBitshift+0x68>)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d909      	bls.n	8002686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	659a      	str	r2, [r3, #88]	; 0x58
 8002684:	e007      	b.n	8002696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	aaaaaaab 	.word	0xaaaaaaab
 80026ac:	0800563c 	.word	0x0800563c

080026b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11f      	bne.n	800270a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d856      	bhi.n	800277e <DMA_CheckFifoParam+0xce>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <DMA_CheckFifoParam+0x28>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026fb 	.word	0x080026fb
 80026e0:	080026e9 	.word	0x080026e9
 80026e4:	0800277f 	.word	0x0800277f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d046      	beq.n	8002782 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e043      	b.n	8002782 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002702:	d140      	bne.n	8002786 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e03d      	b.n	8002786 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	d121      	bne.n	8002758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d837      	bhi.n	800278a <DMA_CheckFifoParam+0xda>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <DMA_CheckFifoParam+0x70>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002731 	.word	0x08002731
 8002724:	08002737 	.word	0x08002737
 8002728:	08002731 	.word	0x08002731
 800272c:	08002749 	.word	0x08002749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e030      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d025      	beq.n	800278e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e022      	b.n	800278e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002750:	d11f      	bne.n	8002792 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002756:	e01c      	b.n	8002792 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d903      	bls.n	8002766 <DMA_CheckFifoParam+0xb6>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d003      	beq.n	800276c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002764:	e018      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      break;
 800276a:	e015      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e00b      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 800277e:	bf00      	nop
 8002780:	e00a      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002782:	bf00      	nop
 8002784:	e008      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
 8002788:	e006      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 800278a:	bf00      	nop
 800278c:	e004      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e002      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;   
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
    }
  } 
  
  return status; 
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e165      	b.n	8002a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8154 	bne.w	8002a8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d005      	beq.n	80027fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d130      	bne.n	800285c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b03      	cmp	r3, #3
 8002866:	d017      	beq.n	8002898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d123      	bne.n	80028ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80ae 	beq.w	8002a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a5c      	ldr	r2, [pc, #368]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294a:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_GPIO_Init+0x304>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x308>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x21a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_GPIO_Init+0x30c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x216>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <HAL_GPIO_Init+0x310>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x212>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x314>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_GPIO_Init+0x318>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x20a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4a      	ldr	r2, [pc, #296]	; (8002ac4 <HAL_GPIO_Init+0x31c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x206>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a49      	ldr	r2, [pc, #292]	; (8002ac8 <HAL_GPIO_Init+0x320>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x202>
 80029a6:	2306      	movs	r3, #6
 80029a8:	e00c      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029aa:	2307      	movs	r3, #7
 80029ac:	e00a      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x21c>
 80029c2:	2300      	movs	r3, #0
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d4:	4935      	ldr	r1, [pc, #212]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e2:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <HAL_GPIO_Init+0x324>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a06:	4a31      	ldr	r2, [pc, #196]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a36:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a84:	4a11      	ldr	r2, [pc, #68]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f67f ae96 	bls.w	80027c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40021400 	.word	0x40021400
 8002ac8:	40021800 	.word	0x40021800
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e12b      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fa5c 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b68:	f000 fa02 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a81      	ldr	r2, [pc, #516]	; (8002d78 <HAL_I2C_Init+0x274>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d807      	bhi.n	8002b88 <HAL_I2C_Init+0x84>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a80      	ldr	r2, [pc, #512]	; (8002d7c <HAL_I2C_Init+0x278>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e006      	b.n	8002b96 <HAL_I2C_Init+0x92>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a7d      	ldr	r2, [pc, #500]	; (8002d80 <HAL_I2C_Init+0x27c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	bf94      	ite	ls
 8002b90:	2301      	movls	r3, #1
 8002b92:	2300      	movhi	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0e7      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a78      	ldr	r2, [pc, #480]	; (8002d84 <HAL_I2C_Init+0x280>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0c9b      	lsrs	r3, r3, #18
 8002ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a6a      	ldr	r2, [pc, #424]	; (8002d78 <HAL_I2C_Init+0x274>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d802      	bhi.n	8002bd8 <HAL_I2C_Init+0xd4>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	e009      	b.n	8002bec <HAL_I2C_Init+0xe8>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	4a69      	ldr	r2, [pc, #420]	; (8002d88 <HAL_I2C_Init+0x284>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	3301      	adds	r3, #1
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	495c      	ldr	r1, [pc, #368]	; (8002d78 <HAL_I2C_Init+0x274>)
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	d819      	bhi.n	8002c40 <HAL_I2C_Init+0x13c>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e59      	subs	r1, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c20:	400b      	ands	r3, r1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_I2C_Init+0x138>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1e59      	subs	r1, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3a:	e051      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e04f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <HAL_I2C_Init+0x168>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e012      	b.n	8002c92 <HAL_I2C_Init+0x18e>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	0099      	lsls	r1, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Init+0x196>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e022      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_I2C_Init+0x1bc>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1e58      	subs	r0, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	440b      	add	r3, r1
 8002cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cbe:	e00f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e58      	subs	r0, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	0099      	lsls	r1, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6911      	ldr	r1, [r2, #16]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	000186a0 	.word	0x000186a0
 8002d7c:	001e847f 	.word	0x001e847f
 8002d80:	003d08ff 	.word	0x003d08ff
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	10624dd3 	.word	0x10624dd3

08002d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0cc      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d90c      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0b8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de0:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df8:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	494d      	ldr	r1, [pc, #308]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d044      	beq.n	8002eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d119      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e06f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e067      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4934      	ldr	r1, [pc, #208]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fbc0 	bl	8001600 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e84:	f7fe fbbc 	bl	8001600 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e04f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 020c 	and.w	r2, r3, #12
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1eb      	bne.n	8002e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d20c      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e032      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4916      	ldr	r1, [pc, #88]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	490e      	ldr	r1, [pc, #56]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f12:	f000 f855 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	490a      	ldr	r1, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002f24:	5ccb      	ldrb	r3, [r1, r3]
 8002f26:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fb20 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023c00 	.word	0x40023c00
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	08005624 	.word	0x08005624
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f74:	f7ff fff0 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4903      	ldr	r1, [pc, #12]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08005634 	.word	0x08005634

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f9c:	f7ff ffdc 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0b5b      	lsrs	r3, r3, #13
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4903      	ldr	r1, [pc, #12]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	08005634 	.word	0x08005634

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc4:	b0ae      	sub	sp, #184	; 0xb8
 8002fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe6:	4bcb      	ldr	r3, [pc, #812]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	f200 8206 	bhi.w	8003400 <HAL_RCC_GetSysClockFreq+0x440>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	08003031 	.word	0x08003031
 8003000:	08003401 	.word	0x08003401
 8003004:	08003401 	.word	0x08003401
 8003008:	08003401 	.word	0x08003401
 800300c:	08003039 	.word	0x08003039
 8003010:	08003401 	.word	0x08003401
 8003014:	08003401 	.word	0x08003401
 8003018:	08003401 	.word	0x08003401
 800301c:	08003041 	.word	0x08003041
 8003020:	08003401 	.word	0x08003401
 8003024:	08003401 	.word	0x08003401
 8003028:	08003401 	.word	0x08003401
 800302c:	08003231 	.word	0x08003231
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4bb9      	ldr	r3, [pc, #740]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 8003032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003036:	e1e7      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003038:	4bb8      	ldr	r3, [pc, #736]	; (800331c <HAL_RCC_GetSysClockFreq+0x35c>)
 800303a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800303e:	e1e3      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003040:	4bb4      	ldr	r3, [pc, #720]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304c:	4bb1      	ldr	r3, [pc, #708]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d071      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003058:	4bae      	ldr	r3, [pc, #696]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003064:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800306c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800307a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	f04f 0000 	mov.w	r0, #0
 8003086:	f04f 0100 	mov.w	r1, #0
 800308a:	0159      	lsls	r1, r3, #5
 800308c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003090:	0150      	lsls	r0, r2, #5
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4621      	mov	r1, r4
 8003098:	1a51      	subs	r1, r2, r1
 800309a:	6439      	str	r1, [r7, #64]	; 0x40
 800309c:	4629      	mov	r1, r5
 800309e:	eb63 0301 	sbc.w	r3, r3, r1
 80030a2:	647b      	str	r3, [r7, #68]	; 0x44
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80030b0:	4649      	mov	r1, r9
 80030b2:	018b      	lsls	r3, r1, #6
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ba:	4641      	mov	r1, r8
 80030bc:	018a      	lsls	r2, r1, #6
 80030be:	4641      	mov	r1, r8
 80030c0:	1a51      	subs	r1, r2, r1
 80030c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030c4:	4649      	mov	r1, r9
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80030d8:	4649      	mov	r1, r9
 80030da:	00cb      	lsls	r3, r1, #3
 80030dc:	4641      	mov	r1, r8
 80030de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030e2:	4641      	mov	r1, r8
 80030e4:	00ca      	lsls	r2, r1, #3
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	4622      	mov	r2, r4
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
 80030f2:	462b      	mov	r3, r5
 80030f4:	460a      	mov	r2, r1
 80030f6:	eb42 0303 	adc.w	r3, r2, r3
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003108:	4629      	mov	r1, r5
 800310a:	024b      	lsls	r3, r1, #9
 800310c:	4621      	mov	r1, r4
 800310e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003112:	4621      	mov	r1, r4
 8003114:	024a      	lsls	r2, r1, #9
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003124:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003128:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800312c:	f7fd f8c0 	bl	80002b0 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800313a:	e067      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313c:	4b75      	ldr	r3, [pc, #468]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	2200      	movs	r2, #0
 8003144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003148:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800314c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003154:	67bb      	str	r3, [r7, #120]	; 0x78
 8003156:	2300      	movs	r3, #0
 8003158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800315a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800315e:	4622      	mov	r2, r4
 8003160:	462b      	mov	r3, r5
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	0159      	lsls	r1, r3, #5
 800316c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003170:	0150      	lsls	r0, r2, #5
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4621      	mov	r1, r4
 8003178:	1a51      	subs	r1, r2, r1
 800317a:	62b9      	str	r1, [r7, #40]	; 0x28
 800317c:	4629      	mov	r1, r5
 800317e:	eb63 0301 	sbc.w	r3, r3, r1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003190:	4649      	mov	r1, r9
 8003192:	018b      	lsls	r3, r1, #6
 8003194:	4641      	mov	r1, r8
 8003196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800319a:	4641      	mov	r1, r8
 800319c:	018a      	lsls	r2, r1, #6
 800319e:	4641      	mov	r1, r8
 80031a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a4:	4649      	mov	r1, r9
 80031a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031be:	4692      	mov	sl, r2
 80031c0:	469b      	mov	fp, r3
 80031c2:	4623      	mov	r3, r4
 80031c4:	eb1a 0303 	adds.w	r3, sl, r3
 80031c8:	623b      	str	r3, [r7, #32]
 80031ca:	462b      	mov	r3, r5
 80031cc:	eb4b 0303 	adc.w	r3, fp, r3
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031de:	4629      	mov	r1, r5
 80031e0:	028b      	lsls	r3, r1, #10
 80031e2:	4621      	mov	r1, r4
 80031e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e8:	4621      	mov	r1, r4
 80031ea:	028a      	lsls	r2, r1, #10
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f4:	2200      	movs	r2, #0
 80031f6:	673b      	str	r3, [r7, #112]	; 0x70
 80031f8:	677a      	str	r2, [r7, #116]	; 0x74
 80031fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80031fe:	f7fd f857 	bl	80002b0 <__aeabi_uldivmod>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4613      	mov	r3, r2
 8003208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	3301      	adds	r3, #1
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800321e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800322e:	e0eb      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d06b      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003248:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_RCC_GetSysClockFreq+0x354>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	2200      	movs	r2, #0
 8003250:	66bb      	str	r3, [r7, #104]	; 0x68
 8003252:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	663b      	str	r3, [r7, #96]	; 0x60
 800325c:	2300      	movs	r3, #0
 800325e:	667b      	str	r3, [r7, #100]	; 0x64
 8003260:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003264:	4622      	mov	r2, r4
 8003266:	462b      	mov	r3, r5
 8003268:	f04f 0000 	mov.w	r0, #0
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	0159      	lsls	r1, r3, #5
 8003272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003276:	0150      	lsls	r0, r2, #5
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4621      	mov	r1, r4
 800327e:	1a51      	subs	r1, r2, r1
 8003280:	61b9      	str	r1, [r7, #24]
 8003282:	4629      	mov	r1, r5
 8003284:	eb63 0301 	sbc.w	r3, r3, r1
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003296:	4659      	mov	r1, fp
 8003298:	018b      	lsls	r3, r1, #6
 800329a:	4651      	mov	r1, sl
 800329c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a0:	4651      	mov	r1, sl
 80032a2:	018a      	lsls	r2, r1, #6
 80032a4:	4651      	mov	r1, sl
 80032a6:	ebb2 0801 	subs.w	r8, r2, r1
 80032aa:	4659      	mov	r1, fp
 80032ac:	eb63 0901 	sbc.w	r9, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c4:	4690      	mov	r8, r2
 80032c6:	4699      	mov	r9, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	eb18 0303 	adds.w	r3, r8, r3
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	462b      	mov	r3, r5
 80032d2:	eb49 0303 	adc.w	r3, r9, r3
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80032e4:	4629      	mov	r1, r5
 80032e6:	024b      	lsls	r3, r1, #9
 80032e8:	4621      	mov	r1, r4
 80032ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ee:	4621      	mov	r1, r4
 80032f0:	024a      	lsls	r2, r1, #9
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032fa:	2200      	movs	r2, #0
 80032fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80032fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003300:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003304:	f7fc ffd4 	bl	80002b0 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003312:	e065      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x420>
 8003314:	40023800 	.word	0x40023800
 8003318:	00f42400 	.word	0x00f42400
 800331c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003320:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_GetSysClockFreq+0x458>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	2200      	movs	r2, #0
 8003328:	4618      	mov	r0, r3
 800332a:	4611      	mov	r1, r2
 800332c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003330:	653b      	str	r3, [r7, #80]	; 0x50
 8003332:	2300      	movs	r3, #0
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
 8003336:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800333a:	4642      	mov	r2, r8
 800333c:	464b      	mov	r3, r9
 800333e:	f04f 0000 	mov.w	r0, #0
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	0159      	lsls	r1, r3, #5
 8003348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800334c:	0150      	lsls	r0, r2, #5
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4641      	mov	r1, r8
 8003354:	1a51      	subs	r1, r2, r1
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	4649      	mov	r1, r9
 800335a:	eb63 0301 	sbc.w	r3, r3, r1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800336c:	4659      	mov	r1, fp
 800336e:	018b      	lsls	r3, r1, #6
 8003370:	4651      	mov	r1, sl
 8003372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003376:	4651      	mov	r1, sl
 8003378:	018a      	lsls	r2, r1, #6
 800337a:	4651      	mov	r1, sl
 800337c:	1a54      	subs	r4, r2, r1
 800337e:	4659      	mov	r1, fp
 8003380:	eb63 0501 	sbc.w	r5, r3, r1
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	00eb      	lsls	r3, r5, #3
 800338e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003392:	00e2      	lsls	r2, r4, #3
 8003394:	4614      	mov	r4, r2
 8003396:	461d      	mov	r5, r3
 8003398:	4643      	mov	r3, r8
 800339a:	18e3      	adds	r3, r4, r3
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	464b      	mov	r3, r9
 80033a0:	eb45 0303 	adc.w	r3, r5, r3
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4629      	mov	r1, r5
 80033b4:	028b      	lsls	r3, r1, #10
 80033b6:	4621      	mov	r1, r4
 80033b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033bc:	4621      	mov	r1, r4
 80033be:	028a      	lsls	r2, r1, #10
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c8:	2200      	movs	r2, #0
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80033cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033d2:	f7fc ff6d 	bl	80002b0 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4613      	mov	r3, r2
 80033dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_RCC_GetSysClockFreq+0x458>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0f1b      	lsrs	r3, r3, #28
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80033ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033fe:	e003      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003406:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800340c:	4618      	mov	r0, r3
 800340e:	37b8      	adds	r7, #184	; 0xb8
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400

08003420 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e28d      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8083 	beq.w	8003546 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003440:	4b94      	ldr	r3, [pc, #592]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b04      	cmp	r3, #4
 800344a:	d019      	beq.n	8003480 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800344c:	4b91      	ldr	r3, [pc, #580]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003454:	2b08      	cmp	r3, #8
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003458:	4b8e      	ldr	r3, [pc, #568]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003464:	d00c      	beq.n	8003480 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b8b      	ldr	r3, [pc, #556]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d112      	bne.n	8003498 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347e:	d10b      	bne.n	8003498 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	4b84      	ldr	r3, [pc, #528]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d05b      	beq.n	8003544 <HAL_RCC_OscConfig+0x124>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d157      	bne.n	8003544 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e25a      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d106      	bne.n	80034b0 <HAL_RCC_OscConfig+0x90>
 80034a2:	4b7c      	ldr	r3, [pc, #496]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7b      	ldr	r2, [pc, #492]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e01d      	b.n	80034ec <HAL_RCC_OscConfig+0xcc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0xb4>
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a75      	ldr	r2, [pc, #468]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b73      	ldr	r3, [pc, #460]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a72      	ldr	r2, [pc, #456]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0xcc>
 80034d4:	4b6f      	ldr	r3, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6e      	ldr	r2, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b6c      	ldr	r3, [pc, #432]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6b      	ldr	r2, [pc, #428]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80034e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d013      	beq.n	800351c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe f884 	bl	8001600 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe f880 	bl	8001600 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e21f      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0xdc>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe f870 	bl	8001600 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003524:	f7fe f86c 	bl	8001600 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e20b      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	4b57      	ldr	r3, [pc, #348]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x104>
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d06f      	beq.n	8003632 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003552:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800355e:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003566:	2b08      	cmp	r3, #8
 8003568:	d105      	bne.n	8003576 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d11c      	bne.n	80035bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_RCC_OscConfig+0x186>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1d3      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4937      	ldr	r1, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	e03a      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_OscConfig+0x278>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fe f819 	bl	8001600 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fe f815 	bl	8001600 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e1b4      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4925      	ldr	r1, [pc, #148]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
 8003604:	e015      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_OscConfig+0x278>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fff8 	bl	8001600 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003614:	f7fd fff4 	bl	8001600 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e193      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d036      	beq.n	80036ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCC_OscConfig+0x27c>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd ffd8 	bl	8001600 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003654:	f7fd ffd4 	bl	8001600 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e173      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_OscConfig+0x274>)
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x234>
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_OscConfig+0x27c>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd ffc1 	bl	8001600 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	e00e      	b.n	80036a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003682:	f7fd ffbd 	bl	8001600 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d907      	bls.n	80036a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e15c      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
 8003694:	40023800 	.word	0x40023800
 8003698:	42470000 	.word	0x42470000
 800369c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b8a      	ldr	r3, [pc, #552]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ea      	bne.n	8003682 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8097 	beq.w	80037e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b83      	ldr	r3, [pc, #524]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	4b7f      	ldr	r3, [pc, #508]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	4a7e      	ldr	r2, [pc, #504]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6413      	str	r3, [r2, #64]	; 0x40
 80036da:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b79      	ldr	r3, [pc, #484]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d118      	bne.n	8003728 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f6:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fd ff7d 	bl	8001600 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fd ff79 	bl	8001600 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e118      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b6c      	ldr	r3, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x4b0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x31e>
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	e01c      	b.n	8003778 <HAL_RCC_OscConfig+0x358>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x340>
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a60      	ldr	r2, [pc, #384]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a5d      	ldr	r2, [pc, #372]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0x358>
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a59      	ldr	r2, [pc, #356]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd ff3e 	bl	8001600 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fd ff3a 	bl	8001600 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0d7      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RCC_OscConfig+0x368>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fd ff28 	bl	8001600 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fd ff24 	bl	8001600 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0c1      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ca:	4b40      	ldr	r3, [pc, #256]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ee      	bne.n	80037b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a3a      	ldr	r2, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ad 	beq.w	800394c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d060      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d145      	bne.n	8003892 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_OscConfig+0x4b4>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fef8 	bl	8001600 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd fef4 	bl	8001600 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e093      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	071b      	lsls	r3, r3, #28
 800385e:	491b      	ldr	r1, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x4b4>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd fec9 	bl	8001600 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003872:	f7fd fec5 	bl	8001600 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e064      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x452>
 8003890:	e05c      	b.n	800394c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCC_OscConfig+0x4b4>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fd feb2 	bl	8001600 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd feae 	bl	8001600 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e04d      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x480>
 80038be:	e045      	b.n	800394c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e040      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <HAL_RCC_OscConfig+0x538>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d030      	beq.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d129      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d122      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	4293      	cmp	r3, r2
 8003912:	d119      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	3b01      	subs	r3, #1
 8003922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d10f      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e041      	b.n	80039f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fb98 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fa06 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e041      	b.n	8003a90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fd fb29 	bl	8001078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 f9b7 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0ae      	b.n	8003c14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	f200 809f 	bhi.w	8003c04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003c05 	.word	0x08003c05
 8003ad4:	08003c05 	.word	0x08003c05
 8003ad8:	08003c05 	.word	0x08003c05
 8003adc:	08003b41 	.word	0x08003b41
 8003ae0:	08003c05 	.word	0x08003c05
 8003ae4:	08003c05 	.word	0x08003c05
 8003ae8:	08003c05 	.word	0x08003c05
 8003aec:	08003b83 	.word	0x08003b83
 8003af0:	08003c05 	.word	0x08003c05
 8003af4:	08003c05 	.word	0x08003c05
 8003af8:	08003c05 	.word	0x08003c05
 8003afc:	08003bc3 	.word	0x08003bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9f0 	bl	8003eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0204 	bic.w	r2, r2, #4
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	619a      	str	r2, [r3, #24]
      break;
 8003b3e:	e064      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fa40 	bl	8003fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6999      	ldr	r1, [r3, #24]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
      break;
 8003b80:	e043      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fa95 	bl	80040b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0208 	orr.w	r2, r2, #8
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0204 	bic.w	r2, r2, #4
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
      break;
 8003bc0:	e023      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fae9 	bl	80041a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69d9      	ldr	r1, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	021a      	lsls	r2, r3, #8
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	61da      	str	r2, [r3, #28]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
      break;
 8003c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIM_ConfigClockSource+0x1c>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0b4      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x186>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c70:	d03e      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c76:	f200 8087 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	f000 8086 	beq.w	8003d8e <HAL_TIM_ConfigClockSource+0x172>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d87f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b70      	cmp	r3, #112	; 0x70
 8003c8a:	d01a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8003c8c:	2b70      	cmp	r3, #112	; 0x70
 8003c8e:	d87b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d050      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x11a>
 8003c94:	2b60      	cmp	r3, #96	; 0x60
 8003c96:	d877      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b50      	cmp	r3, #80	; 0x50
 8003c9a:	d03c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0xfa>
 8003c9c:	2b50      	cmp	r3, #80	; 0x50
 8003c9e:	d873      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d058      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x13a>
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d86f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b30      	cmp	r3, #48	; 0x30
 8003caa:	d064      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	2b30      	cmp	r3, #48	; 0x30
 8003cae:	d86b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d060      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d867      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d05c      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d05a      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	e062      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f000 fb35 	bl	8004340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	609a      	str	r2, [r3, #8]
      break;
 8003cee:	e04f      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f000 fb1e 	bl	8004340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d12:	609a      	str	r2, [r3, #8]
      break;
 8003d14:	e03c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fa92 	bl	800424c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2150      	movs	r1, #80	; 0x50
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 faeb 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 8003d34:	e02c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 fab1 	bl	80042aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2160      	movs	r1, #96	; 0x60
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fadb 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 8003d54:	e01c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fa72 	bl	800424c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 facb 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 8003d74:	e00c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f000 fac2 	bl	800430a <TIM_ITRx_SetConfig>
      break;
 8003d86:	e003      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e000      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a40      	ldr	r2, [pc, #256]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3d      	ldr	r2, [pc, #244]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d02b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d027      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d023      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d017      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <TIM_Base_SetConfig+0x128>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <TIM_Base_SetConfig+0x134>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <TIM_Base_SetConfig+0x138>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <TIM_Base_SetConfig+0x13c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40010400 	.word	0x40010400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	40001800 	.word	0x40001800
 8003ee4:	40001c00 	.word	0x40001c00
 8003ee8:	40002000 	.word	0x40002000

08003eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 0302 	bic.w	r3, r3, #2
 8003f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a20      	ldr	r2, [pc, #128]	; (8003fc4 <TIM_OC1_SetConfig+0xd8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_OC1_SetConfig+0x64>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <TIM_OC1_SetConfig+0xdc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10c      	bne.n	8003f6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0308 	bic.w	r3, r3, #8
 8003f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <TIM_OC1_SetConfig+0xd8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_OC1_SetConfig+0x8e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <TIM_OC1_SetConfig+0xdc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d111      	bne.n	8003f9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	621a      	str	r2, [r3, #32]
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40010400 	.word	0x40010400

08003fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0210 	bic.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0320 	bic.w	r3, r3, #32
 8004016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <TIM_OC2_SetConfig+0xe4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_OC2_SetConfig+0x68>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <TIM_OC2_SetConfig+0xe8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10d      	bne.n	8004050 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <TIM_OC2_SetConfig+0xe4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC2_SetConfig+0x94>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <TIM_OC2_SetConfig+0xe8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d113      	bne.n	8004088 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010400 	.word	0x40010400

080040b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <TIM_OC3_SetConfig+0xe0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <TIM_OC3_SetConfig+0x66>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a20      	ldr	r2, [pc, #128]	; (800419c <TIM_OC3_SetConfig+0xe4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10d      	bne.n	800413a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a16      	ldr	r2, [pc, #88]	; (8004198 <TIM_OC3_SetConfig+0xe0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC3_SetConfig+0x92>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <TIM_OC3_SetConfig+0xe4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d113      	bne.n	8004172 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	621a      	str	r2, [r3, #32]
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40010000 	.word	0x40010000
 800419c:	40010400 	.word	0x40010400

080041a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	031b      	lsls	r3, r3, #12
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a12      	ldr	r2, [pc, #72]	; (8004244 <TIM_OC4_SetConfig+0xa4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC4_SetConfig+0x68>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a11      	ldr	r2, [pc, #68]	; (8004248 <TIM_OC4_SetConfig+0xa8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d109      	bne.n	800421c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40010400 	.word	0x40010400

0800424c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b087      	sub	sp, #28
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0210 	bic.w	r2, r3, #16
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	f043 0307 	orr.w	r3, r3, #7
 800432c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	431a      	orrs	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	609a      	str	r2, [r3, #8]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004394:	2302      	movs	r3, #2
 8004396:	e05a      	b.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d01d      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a18      	ldr	r2, [pc, #96]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a17      	ldr	r2, [pc, #92]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10c      	bne.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40010400 	.word	0x40010400
 8004470:	40014000 	.word	0x40014000
 8004474:	40001800 	.word	0x40001800

08004478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004490:	2302      	movs	r3, #2
 8004492:	e03d      	b.n	8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e03f      	b.n	80045ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fc fed2 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f929 	bl	80047b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b08a      	sub	sp, #40	; 0x28
 80045ba:	af02      	add	r7, sp, #8
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d17c      	bne.n	80046d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_UART_Transmit+0x2c>
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e075      	b.n	80046d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_UART_Transmit+0x3e>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e06e      	b.n	80046d2 <HAL_UART_Transmit+0x11c>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2221      	movs	r2, #33	; 0x21
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800460a:	f7fc fff9 	bl	8001600 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	88fa      	ldrh	r2, [r7, #6]
 800461a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004624:	d108      	bne.n	8004638 <HAL_UART_Transmit+0x82>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d104      	bne.n	8004638 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e003      	b.n	8004640 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004648:	e02a      	b.n	80046a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	2180      	movs	r1, #128	; 0x80
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f840 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e036      	b.n	80046d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	3302      	adds	r3, #2
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	e007      	b.n	8004692 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	3301      	adds	r3, #1
 8004690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1cf      	bne.n	800464a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2200      	movs	r2, #0
 80046b2:	2140      	movs	r1, #64	; 0x40
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f810 	bl	80046da <UART_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e006      	b.n	80046d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b090      	sub	sp, #64	; 0x40
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4613      	mov	r3, r2
 80046e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ea:	e050      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d04c      	beq.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <UART_WaitOnFlagUntilTimeout+0x30>
 80046fa:	f7fc ff81 	bl	8001600 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004706:	429a      	cmp	r2, r3
 8004708:	d241      	bcs.n	800478e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472a:	637a      	str	r2, [r7, #52]	; 0x34
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	613b      	str	r3, [r7, #16]
   return(result);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	63bb      	str	r3, [r7, #56]	; 0x38
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800475e:	623a      	str	r2, [r7, #32]
 8004760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	69f9      	ldr	r1, [r7, #28]
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	61bb      	str	r3, [r7, #24]
   return(result);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e00f      	b.n	80047ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	429a      	cmp	r2, r3
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d09f      	beq.n	80046ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3740      	adds	r7, #64	; 0x40
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b0c0      	sub	sp, #256	; 0x100
 80047be:	af00      	add	r7, sp, #0
 80047c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	68d9      	ldr	r1, [r3, #12]
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	ea40 0301 	orr.w	r3, r0, r1
 80047e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004810:	f021 010c 	bic.w	r1, r1, #12
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800481e:	430b      	orrs	r3, r1
 8004820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	6999      	ldr	r1, [r3, #24]
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	ea40 0301 	orr.w	r3, r0, r1
 800483e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b8f      	ldr	r3, [pc, #572]	; (8004a84 <UART_SetConfig+0x2cc>)
 8004848:	429a      	cmp	r2, r3
 800484a:	d005      	beq.n	8004858 <UART_SetConfig+0xa0>
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b8d      	ldr	r3, [pc, #564]	; (8004a88 <UART_SetConfig+0x2d0>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d104      	bne.n	8004862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004858:	f7fe fb9e 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 800485c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004860:	e003      	b.n	800486a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004862:	f7fe fb85 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8004866:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	f040 810c 	bne.w	8004a90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004882:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800488a:	4622      	mov	r2, r4
 800488c:	462b      	mov	r3, r5
 800488e:	1891      	adds	r1, r2, r2
 8004890:	65b9      	str	r1, [r7, #88]	; 0x58
 8004892:	415b      	adcs	r3, r3
 8004894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800489a:	4621      	mov	r1, r4
 800489c:	eb12 0801 	adds.w	r8, r2, r1
 80048a0:	4629      	mov	r1, r5
 80048a2:	eb43 0901 	adc.w	r9, r3, r1
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ba:	4690      	mov	r8, r2
 80048bc:	4699      	mov	r9, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	eb18 0303 	adds.w	r3, r8, r3
 80048c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c8:	462b      	mov	r3, r5
 80048ca:	eb49 0303 	adc.w	r3, r9, r3
 80048ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048e6:	460b      	mov	r3, r1
 80048e8:	18db      	adds	r3, r3, r3
 80048ea:	653b      	str	r3, [r7, #80]	; 0x50
 80048ec:	4613      	mov	r3, r2
 80048ee:	eb42 0303 	adc.w	r3, r2, r3
 80048f2:	657b      	str	r3, [r7, #84]	; 0x54
 80048f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048fc:	f7fb fcd8 	bl	80002b0 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b61      	ldr	r3, [pc, #388]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011c      	lsls	r4, r3, #4
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004918:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800491c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	64b9      	str	r1, [r7, #72]	; 0x48
 8004928:	415b      	adcs	r3, r3
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800492c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004930:	4641      	mov	r1, r8
 8004932:	eb12 0a01 	adds.w	sl, r2, r1
 8004936:	4649      	mov	r1, r9
 8004938:	eb43 0b01 	adc.w	fp, r3, r1
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800494c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004950:	4692      	mov	sl, r2
 8004952:	469b      	mov	fp, r3
 8004954:	4643      	mov	r3, r8
 8004956:	eb1a 0303 	adds.w	r3, sl, r3
 800495a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495e:	464b      	mov	r3, r9
 8004960:	eb4b 0303 	adc.w	r3, fp, r3
 8004964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004974:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800497c:	460b      	mov	r3, r1
 800497e:	18db      	adds	r3, r3, r3
 8004980:	643b      	str	r3, [r7, #64]	; 0x40
 8004982:	4613      	mov	r3, r2
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
 800498a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004992:	f7fb fc8d 	bl	80002b0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4611      	mov	r1, r2
 800499c:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <UART_SetConfig+0x2d4>)
 800499e:	fba3 2301 	umull	r2, r3, r3, r1
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2264      	movs	r2, #100	; 0x64
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	1acb      	subs	r3, r1, r3
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <UART_SetConfig+0x2d4>)
 80049b4:	fba3 2302 	umull	r2, r3, r3, r2
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049c0:	441c      	add	r4, r3
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	63b9      	str	r1, [r7, #56]	; 0x38
 80049dc:	415b      	adcs	r3, r3
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049e4:	4641      	mov	r1, r8
 80049e6:	1851      	adds	r1, r2, r1
 80049e8:	6339      	str	r1, [r7, #48]	; 0x30
 80049ea:	4649      	mov	r1, r9
 80049ec:	414b      	adcs	r3, r1
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049fc:	4659      	mov	r1, fp
 80049fe:	00cb      	lsls	r3, r1, #3
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a06:	4651      	mov	r1, sl
 8004a08:	00ca      	lsls	r2, r1, #3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4642      	mov	r2, r8
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a18:	464b      	mov	r3, r9
 8004a1a:	460a      	mov	r2, r1
 8004a1c:	eb42 0303 	adc.w	r3, r2, r3
 8004a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a38:	460b      	mov	r3, r1
 8004a3a:	18db      	adds	r3, r3, r3
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3e:	4613      	mov	r3, r2
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a4e:	f7fb fc2f 	bl	80002b0 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004a58:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2164      	movs	r1, #100	; 0x64
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <UART_SetConfig+0x2d4>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4422      	add	r2, r4
 8004a7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a80:	e105      	b.n	8004c8e <UART_SetConfig+0x4d6>
 8004a82:	bf00      	nop
 8004a84:	40011000 	.word	0x40011000
 8004a88:	40011400 	.word	0x40011400
 8004a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	6239      	str	r1, [r7, #32]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1854      	adds	r4, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb43 0501 	adc.w	r5, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	00eb      	lsls	r3, r5, #3
 8004ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aca:	00e2      	lsls	r2, r4, #3
 8004acc:	4614      	mov	r4, r2
 8004ace:	461d      	mov	r5, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad8:	464b      	mov	r3, r9
 8004ada:	eb45 0303 	adc.w	r3, r5, r3
 8004ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004afe:	4629      	mov	r1, r5
 8004b00:	008b      	lsls	r3, r1, #2
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b08:	4621      	mov	r1, r4
 8004b0a:	008a      	lsls	r2, r1, #2
 8004b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b10:	f7fb fbce 	bl	80002b0 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4b60      	ldr	r3, [pc, #384]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	011c      	lsls	r4, r3, #4
 8004b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	1891      	adds	r1, r2, r2
 8004b3a:	61b9      	str	r1, [r7, #24]
 8004b3c:	415b      	adcs	r3, r3
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b44:	4641      	mov	r1, r8
 8004b46:	1851      	adds	r1, r2, r1
 8004b48:	6139      	str	r1, [r7, #16]
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	00cb      	lsls	r3, r1, #3
 8004b60:	4651      	mov	r1, sl
 8004b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b66:	4651      	mov	r1, sl
 8004b68:	00ca      	lsls	r2, r1, #3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4642      	mov	r2, r8
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b78:	464b      	mov	r3, r9
 8004b7a:	460a      	mov	r2, r1
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	008b      	lsls	r3, r1, #2
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	008a      	lsls	r2, r1, #2
 8004baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bae:	f7fb fb7f 	bl	80002b0 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	2164      	movs	r1, #100	; 0x64
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	3332      	adds	r3, #50	; 0x32
 8004bca:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd6:	441c      	add	r4, r3
 8004bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bdc:	2200      	movs	r2, #0
 8004bde:	673b      	str	r3, [r7, #112]	; 0x70
 8004be0:	677a      	str	r2, [r7, #116]	; 0x74
 8004be2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004be6:	4642      	mov	r2, r8
 8004be8:	464b      	mov	r3, r9
 8004bea:	1891      	adds	r1, r2, r2
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	415b      	adcs	r3, r3
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf6:	4641      	mov	r1, r8
 8004bf8:	1851      	adds	r1, r2, r1
 8004bfa:	6039      	str	r1, [r7, #0]
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	414b      	adcs	r3, r1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c0e:	4659      	mov	r1, fp
 8004c10:	00cb      	lsls	r3, r1, #3
 8004c12:	4651      	mov	r1, sl
 8004c14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c18:	4651      	mov	r1, sl
 8004c1a:	00ca      	lsls	r2, r1, #3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	4642      	mov	r2, r8
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c28:	464b      	mov	r3, r9
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	008b      	lsls	r3, r1, #2
 8004c4e:	4641      	mov	r1, r8
 8004c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c54:	4641      	mov	r1, r8
 8004c56:	008a      	lsls	r2, r1, #2
 8004c58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c5c:	f7fb fb28 	bl	80002b0 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004c66:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2164      	movs	r1, #100	; 0x64
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	; 0x32
 8004c78:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <UART_SetConfig+0x4e4>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4422      	add	r2, r4
 8004c8c:	609a      	str	r2, [r3, #8]
}
 8004c8e:	bf00      	nop
 8004c90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c94:	46bd      	mov	sp, r7
 8004c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9a:	bf00      	nop
 8004c9c:	51eb851f 	.word	0x51eb851f

08004ca0 <__errno>:
 8004ca0:	4b01      	ldr	r3, [pc, #4]	; (8004ca8 <__errno+0x8>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	2000000c 	.word	0x2000000c

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4d0d      	ldr	r5, [pc, #52]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1b64      	subs	r4, r4, r5
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	42a6      	cmp	r6, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4d0b      	ldr	r5, [pc, #44]	; (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f000 fc8e 	bl	80055e0 <_init>
 8004cc4:	1b64      	subs	r4, r4, r5
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2600      	movs	r6, #0
 8004cca:	42a6      	cmp	r6, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd4:	4798      	blx	r3
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cde:	4798      	blx	r3
 8004ce0:	3601      	adds	r6, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	08005680 	.word	0x08005680
 8004ce8:	08005680 	.word	0x08005680
 8004cec:	08005680 	.word	0x08005680
 8004cf0:	08005684 	.word	0x08005684

08004cf4 <memset>:
 8004cf4:	4402      	add	r2, r0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d100      	bne.n	8004cfe <memset+0xa>
 8004cfc:	4770      	bx	lr
 8004cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004d02:	e7f9      	b.n	8004cf8 <memset+0x4>

08004d04 <siprintf>:
 8004d04:	b40e      	push	{r1, r2, r3}
 8004d06:	b500      	push	{lr}
 8004d08:	b09c      	sub	sp, #112	; 0x70
 8004d0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d0c:	9002      	str	r0, [sp, #8]
 8004d0e:	9006      	str	r0, [sp, #24]
 8004d10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d14:	4809      	ldr	r0, [pc, #36]	; (8004d3c <siprintf+0x38>)
 8004d16:	9107      	str	r1, [sp, #28]
 8004d18:	9104      	str	r1, [sp, #16]
 8004d1a:	4909      	ldr	r1, [pc, #36]	; (8004d40 <siprintf+0x3c>)
 8004d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d20:	9105      	str	r1, [sp, #20]
 8004d22:	6800      	ldr	r0, [r0, #0]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	a902      	add	r1, sp, #8
 8004d28:	f000 f868 	bl	8004dfc <_svfiprintf_r>
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	b01c      	add	sp, #112	; 0x70
 8004d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d38:	b003      	add	sp, #12
 8004d3a:	4770      	bx	lr
 8004d3c:	2000000c 	.word	0x2000000c
 8004d40:	ffff0208 	.word	0xffff0208

08004d44 <__ssputs_r>:
 8004d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	688e      	ldr	r6, [r1, #8]
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	4682      	mov	sl, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4690      	mov	r8, r2
 8004d52:	461f      	mov	r7, r3
 8004d54:	d838      	bhi.n	8004dc8 <__ssputs_r+0x84>
 8004d56:	898a      	ldrh	r2, [r1, #12]
 8004d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d5c:	d032      	beq.n	8004dc4 <__ssputs_r+0x80>
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	6909      	ldr	r1, [r1, #16]
 8004d62:	eba5 0901 	sub.w	r9, r5, r1
 8004d66:	6965      	ldr	r5, [r4, #20]
 8004d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d70:	3301      	adds	r3, #1
 8004d72:	444b      	add	r3, r9
 8004d74:	106d      	asrs	r5, r5, #1
 8004d76:	429d      	cmp	r5, r3
 8004d78:	bf38      	it	cc
 8004d7a:	461d      	movcc	r5, r3
 8004d7c:	0553      	lsls	r3, r2, #21
 8004d7e:	d531      	bpl.n	8004de4 <__ssputs_r+0xa0>
 8004d80:	4629      	mov	r1, r5
 8004d82:	f000 fb63 	bl	800544c <_malloc_r>
 8004d86:	4606      	mov	r6, r0
 8004d88:	b950      	cbnz	r0, 8004da0 <__ssputs_r+0x5c>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	f8ca 3000 	str.w	r3, [sl]
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d96:	81a3      	strh	r3, [r4, #12]
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	6921      	ldr	r1, [r4, #16]
 8004da2:	464a      	mov	r2, r9
 8004da4:	f000 fabe 	bl	8005324 <memcpy>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	6126      	str	r6, [r4, #16]
 8004db6:	6165      	str	r5, [r4, #20]
 8004db8:	444e      	add	r6, r9
 8004dba:	eba5 0509 	sub.w	r5, r5, r9
 8004dbe:	6026      	str	r6, [r4, #0]
 8004dc0:	60a5      	str	r5, [r4, #8]
 8004dc2:	463e      	mov	r6, r7
 8004dc4:	42be      	cmp	r6, r7
 8004dc6:	d900      	bls.n	8004dca <__ssputs_r+0x86>
 8004dc8:	463e      	mov	r6, r7
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	4632      	mov	r2, r6
 8004dce:	4641      	mov	r1, r8
 8004dd0:	f000 fab6 	bl	8005340 <memmove>
 8004dd4:	68a3      	ldr	r3, [r4, #8]
 8004dd6:	1b9b      	subs	r3, r3, r6
 8004dd8:	60a3      	str	r3, [r4, #8]
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	4433      	add	r3, r6
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	2000      	movs	r0, #0
 8004de2:	e7db      	b.n	8004d9c <__ssputs_r+0x58>
 8004de4:	462a      	mov	r2, r5
 8004de6:	f000 fba5 	bl	8005534 <_realloc_r>
 8004dea:	4606      	mov	r6, r0
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d1e1      	bne.n	8004db4 <__ssputs_r+0x70>
 8004df0:	6921      	ldr	r1, [r4, #16]
 8004df2:	4650      	mov	r0, sl
 8004df4:	f000 fabe 	bl	8005374 <_free_r>
 8004df8:	e7c7      	b.n	8004d8a <__ssputs_r+0x46>
	...

08004dfc <_svfiprintf_r>:
 8004dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e00:	4698      	mov	r8, r3
 8004e02:	898b      	ldrh	r3, [r1, #12]
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	b09d      	sub	sp, #116	; 0x74
 8004e08:	4607      	mov	r7, r0
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	d50e      	bpl.n	8004e2e <_svfiprintf_r+0x32>
 8004e10:	690b      	ldr	r3, [r1, #16]
 8004e12:	b963      	cbnz	r3, 8004e2e <_svfiprintf_r+0x32>
 8004e14:	2140      	movs	r1, #64	; 0x40
 8004e16:	f000 fb19 	bl	800544c <_malloc_r>
 8004e1a:	6028      	str	r0, [r5, #0]
 8004e1c:	6128      	str	r0, [r5, #16]
 8004e1e:	b920      	cbnz	r0, 8004e2a <_svfiprintf_r+0x2e>
 8004e20:	230c      	movs	r3, #12
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	e0d1      	b.n	8004fce <_svfiprintf_r+0x1d2>
 8004e2a:	2340      	movs	r3, #64	; 0x40
 8004e2c:	616b      	str	r3, [r5, #20]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9309      	str	r3, [sp, #36]	; 0x24
 8004e32:	2320      	movs	r3, #32
 8004e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e3c:	2330      	movs	r3, #48	; 0x30
 8004e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fe8 <_svfiprintf_r+0x1ec>
 8004e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e46:	f04f 0901 	mov.w	r9, #1
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	469a      	mov	sl, r3
 8004e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e52:	b10a      	cbz	r2, 8004e58 <_svfiprintf_r+0x5c>
 8004e54:	2a25      	cmp	r2, #37	; 0x25
 8004e56:	d1f9      	bne.n	8004e4c <_svfiprintf_r+0x50>
 8004e58:	ebba 0b04 	subs.w	fp, sl, r4
 8004e5c:	d00b      	beq.n	8004e76 <_svfiprintf_r+0x7a>
 8004e5e:	465b      	mov	r3, fp
 8004e60:	4622      	mov	r2, r4
 8004e62:	4629      	mov	r1, r5
 8004e64:	4638      	mov	r0, r7
 8004e66:	f7ff ff6d 	bl	8004d44 <__ssputs_r>
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f000 80aa 	beq.w	8004fc4 <_svfiprintf_r+0x1c8>
 8004e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e72:	445a      	add	r2, fp
 8004e74:	9209      	str	r2, [sp, #36]	; 0x24
 8004e76:	f89a 3000 	ldrb.w	r3, [sl]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80a2 	beq.w	8004fc4 <_svfiprintf_r+0x1c8>
 8004e80:	2300      	movs	r3, #0
 8004e82:	f04f 32ff 	mov.w	r2, #4294967295
 8004e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e8a:	f10a 0a01 	add.w	sl, sl, #1
 8004e8e:	9304      	str	r3, [sp, #16]
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e96:	931a      	str	r3, [sp, #104]	; 0x68
 8004e98:	4654      	mov	r4, sl
 8004e9a:	2205      	movs	r2, #5
 8004e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea0:	4851      	ldr	r0, [pc, #324]	; (8004fe8 <_svfiprintf_r+0x1ec>)
 8004ea2:	f7fb f9b5 	bl	8000210 <memchr>
 8004ea6:	9a04      	ldr	r2, [sp, #16]
 8004ea8:	b9d8      	cbnz	r0, 8004ee2 <_svfiprintf_r+0xe6>
 8004eaa:	06d0      	lsls	r0, r2, #27
 8004eac:	bf44      	itt	mi
 8004eae:	2320      	movmi	r3, #32
 8004eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb4:	0711      	lsls	r1, r2, #28
 8004eb6:	bf44      	itt	mi
 8004eb8:	232b      	movmi	r3, #43	; 0x2b
 8004eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8004ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec4:	d015      	beq.n	8004ef2 <_svfiprintf_r+0xf6>
 8004ec6:	9a07      	ldr	r2, [sp, #28]
 8004ec8:	4654      	mov	r4, sl
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f04f 0c0a 	mov.w	ip, #10
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ed6:	3b30      	subs	r3, #48	; 0x30
 8004ed8:	2b09      	cmp	r3, #9
 8004eda:	d94e      	bls.n	8004f7a <_svfiprintf_r+0x17e>
 8004edc:	b1b0      	cbz	r0, 8004f0c <_svfiprintf_r+0x110>
 8004ede:	9207      	str	r2, [sp, #28]
 8004ee0:	e014      	b.n	8004f0c <_svfiprintf_r+0x110>
 8004ee2:	eba0 0308 	sub.w	r3, r0, r8
 8004ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	9304      	str	r3, [sp, #16]
 8004eee:	46a2      	mov	sl, r4
 8004ef0:	e7d2      	b.n	8004e98 <_svfiprintf_r+0x9c>
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	1d19      	adds	r1, r3, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	9103      	str	r1, [sp, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfbb      	ittet	lt
 8004efe:	425b      	neglt	r3, r3
 8004f00:	f042 0202 	orrlt.w	r2, r2, #2
 8004f04:	9307      	strge	r3, [sp, #28]
 8004f06:	9307      	strlt	r3, [sp, #28]
 8004f08:	bfb8      	it	lt
 8004f0a:	9204      	strlt	r2, [sp, #16]
 8004f0c:	7823      	ldrb	r3, [r4, #0]
 8004f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f10:	d10c      	bne.n	8004f2c <_svfiprintf_r+0x130>
 8004f12:	7863      	ldrb	r3, [r4, #1]
 8004f14:	2b2a      	cmp	r3, #42	; 0x2a
 8004f16:	d135      	bne.n	8004f84 <_svfiprintf_r+0x188>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	1d1a      	adds	r2, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9203      	str	r2, [sp, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bfb8      	it	lt
 8004f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f28:	3402      	adds	r4, #2
 8004f2a:	9305      	str	r3, [sp, #20]
 8004f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ff8 <_svfiprintf_r+0x1fc>
 8004f30:	7821      	ldrb	r1, [r4, #0]
 8004f32:	2203      	movs	r2, #3
 8004f34:	4650      	mov	r0, sl
 8004f36:	f7fb f96b 	bl	8000210 <memchr>
 8004f3a:	b140      	cbz	r0, 8004f4e <_svfiprintf_r+0x152>
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	eba0 000a 	sub.w	r0, r0, sl
 8004f42:	fa03 f000 	lsl.w	r0, r3, r0
 8004f46:	9b04      	ldr	r3, [sp, #16]
 8004f48:	4303      	orrs	r3, r0
 8004f4a:	3401      	adds	r4, #1
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f52:	4826      	ldr	r0, [pc, #152]	; (8004fec <_svfiprintf_r+0x1f0>)
 8004f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f58:	2206      	movs	r2, #6
 8004f5a:	f7fb f959 	bl	8000210 <memchr>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d038      	beq.n	8004fd4 <_svfiprintf_r+0x1d8>
 8004f62:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <_svfiprintf_r+0x1f4>)
 8004f64:	bb1b      	cbnz	r3, 8004fae <_svfiprintf_r+0x1b2>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	3307      	adds	r3, #7
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	3308      	adds	r3, #8
 8004f70:	9303      	str	r3, [sp, #12]
 8004f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f74:	4433      	add	r3, r6
 8004f76:	9309      	str	r3, [sp, #36]	; 0x24
 8004f78:	e767      	b.n	8004e4a <_svfiprintf_r+0x4e>
 8004f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f7e:	460c      	mov	r4, r1
 8004f80:	2001      	movs	r0, #1
 8004f82:	e7a5      	b.n	8004ed0 <_svfiprintf_r+0xd4>
 8004f84:	2300      	movs	r3, #0
 8004f86:	3401      	adds	r4, #1
 8004f88:	9305      	str	r3, [sp, #20]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 0c0a 	mov.w	ip, #10
 8004f90:	4620      	mov	r0, r4
 8004f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f96:	3a30      	subs	r2, #48	; 0x30
 8004f98:	2a09      	cmp	r2, #9
 8004f9a:	d903      	bls.n	8004fa4 <_svfiprintf_r+0x1a8>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0c5      	beq.n	8004f2c <_svfiprintf_r+0x130>
 8004fa0:	9105      	str	r1, [sp, #20]
 8004fa2:	e7c3      	b.n	8004f2c <_svfiprintf_r+0x130>
 8004fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa8:	4604      	mov	r4, r0
 8004faa:	2301      	movs	r3, #1
 8004fac:	e7f0      	b.n	8004f90 <_svfiprintf_r+0x194>
 8004fae:	ab03      	add	r3, sp, #12
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <_svfiprintf_r+0x1f8>)
 8004fb6:	a904      	add	r1, sp, #16
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f3af 8000 	nop.w
 8004fbe:	1c42      	adds	r2, r0, #1
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	d1d6      	bne.n	8004f72 <_svfiprintf_r+0x176>
 8004fc4:	89ab      	ldrh	r3, [r5, #12]
 8004fc6:	065b      	lsls	r3, r3, #25
 8004fc8:	f53f af2c 	bmi.w	8004e24 <_svfiprintf_r+0x28>
 8004fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fce:	b01d      	add	sp, #116	; 0x74
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	ab03      	add	r3, sp, #12
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <_svfiprintf_r+0x1f8>)
 8004fdc:	a904      	add	r1, sp, #16
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f000 f87a 	bl	80050d8 <_printf_i>
 8004fe4:	e7eb      	b.n	8004fbe <_svfiprintf_r+0x1c2>
 8004fe6:	bf00      	nop
 8004fe8:	08005644 	.word	0x08005644
 8004fec:	0800564e 	.word	0x0800564e
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	08004d45 	.word	0x08004d45
 8004ff8:	0800564a 	.word	0x0800564a

08004ffc <_printf_common>:
 8004ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005000:	4616      	mov	r6, r2
 8005002:	4699      	mov	r9, r3
 8005004:	688a      	ldr	r2, [r1, #8]
 8005006:	690b      	ldr	r3, [r1, #16]
 8005008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800500c:	4293      	cmp	r3, r2
 800500e:	bfb8      	it	lt
 8005010:	4613      	movlt	r3, r2
 8005012:	6033      	str	r3, [r6, #0]
 8005014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005018:	4607      	mov	r7, r0
 800501a:	460c      	mov	r4, r1
 800501c:	b10a      	cbz	r2, 8005022 <_printf_common+0x26>
 800501e:	3301      	adds	r3, #1
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	0699      	lsls	r1, r3, #26
 8005026:	bf42      	ittt	mi
 8005028:	6833      	ldrmi	r3, [r6, #0]
 800502a:	3302      	addmi	r3, #2
 800502c:	6033      	strmi	r3, [r6, #0]
 800502e:	6825      	ldr	r5, [r4, #0]
 8005030:	f015 0506 	ands.w	r5, r5, #6
 8005034:	d106      	bne.n	8005044 <_printf_common+0x48>
 8005036:	f104 0a19 	add.w	sl, r4, #25
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	6832      	ldr	r2, [r6, #0]
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	42ab      	cmp	r3, r5
 8005042:	dc26      	bgt.n	8005092 <_printf_common+0x96>
 8005044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005048:	1e13      	subs	r3, r2, #0
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	bf18      	it	ne
 800504e:	2301      	movne	r3, #1
 8005050:	0692      	lsls	r2, r2, #26
 8005052:	d42b      	bmi.n	80050ac <_printf_common+0xb0>
 8005054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005058:	4649      	mov	r1, r9
 800505a:	4638      	mov	r0, r7
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d01e      	beq.n	80050a0 <_printf_common+0xa4>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	68e5      	ldr	r5, [r4, #12]
 8005066:	6832      	ldr	r2, [r6, #0]
 8005068:	f003 0306 	and.w	r3, r3, #6
 800506c:	2b04      	cmp	r3, #4
 800506e:	bf08      	it	eq
 8005070:	1aad      	subeq	r5, r5, r2
 8005072:	68a3      	ldr	r3, [r4, #8]
 8005074:	6922      	ldr	r2, [r4, #16]
 8005076:	bf0c      	ite	eq
 8005078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800507c:	2500      	movne	r5, #0
 800507e:	4293      	cmp	r3, r2
 8005080:	bfc4      	itt	gt
 8005082:	1a9b      	subgt	r3, r3, r2
 8005084:	18ed      	addgt	r5, r5, r3
 8005086:	2600      	movs	r6, #0
 8005088:	341a      	adds	r4, #26
 800508a:	42b5      	cmp	r5, r6
 800508c:	d11a      	bne.n	80050c4 <_printf_common+0xc8>
 800508e:	2000      	movs	r0, #0
 8005090:	e008      	b.n	80050a4 <_printf_common+0xa8>
 8005092:	2301      	movs	r3, #1
 8005094:	4652      	mov	r2, sl
 8005096:	4649      	mov	r1, r9
 8005098:	4638      	mov	r0, r7
 800509a:	47c0      	blx	r8
 800509c:	3001      	adds	r0, #1
 800509e:	d103      	bne.n	80050a8 <_printf_common+0xac>
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	3501      	adds	r5, #1
 80050aa:	e7c6      	b.n	800503a <_printf_common+0x3e>
 80050ac:	18e1      	adds	r1, r4, r3
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	2030      	movs	r0, #48	; 0x30
 80050b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050b6:	4422      	add	r2, r4
 80050b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c0:	3302      	adds	r3, #2
 80050c2:	e7c7      	b.n	8005054 <_printf_common+0x58>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4622      	mov	r2, r4
 80050c8:	4649      	mov	r1, r9
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c0      	blx	r8
 80050ce:	3001      	adds	r0, #1
 80050d0:	d0e6      	beq.n	80050a0 <_printf_common+0xa4>
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7d9      	b.n	800508a <_printf_common+0x8e>
	...

080050d8 <_printf_i>:
 80050d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	7e0f      	ldrb	r7, [r1, #24]
 80050de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050e0:	2f78      	cmp	r7, #120	; 0x78
 80050e2:	4691      	mov	r9, r2
 80050e4:	4680      	mov	r8, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	469a      	mov	sl, r3
 80050ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050ee:	d807      	bhi.n	8005100 <_printf_i+0x28>
 80050f0:	2f62      	cmp	r7, #98	; 0x62
 80050f2:	d80a      	bhi.n	800510a <_printf_i+0x32>
 80050f4:	2f00      	cmp	r7, #0
 80050f6:	f000 80d8 	beq.w	80052aa <_printf_i+0x1d2>
 80050fa:	2f58      	cmp	r7, #88	; 0x58
 80050fc:	f000 80a3 	beq.w	8005246 <_printf_i+0x16e>
 8005100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005108:	e03a      	b.n	8005180 <_printf_i+0xa8>
 800510a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800510e:	2b15      	cmp	r3, #21
 8005110:	d8f6      	bhi.n	8005100 <_printf_i+0x28>
 8005112:	a101      	add	r1, pc, #4	; (adr r1, 8005118 <_printf_i+0x40>)
 8005114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005118:	08005171 	.word	0x08005171
 800511c:	08005185 	.word	0x08005185
 8005120:	08005101 	.word	0x08005101
 8005124:	08005101 	.word	0x08005101
 8005128:	08005101 	.word	0x08005101
 800512c:	08005101 	.word	0x08005101
 8005130:	08005185 	.word	0x08005185
 8005134:	08005101 	.word	0x08005101
 8005138:	08005101 	.word	0x08005101
 800513c:	08005101 	.word	0x08005101
 8005140:	08005101 	.word	0x08005101
 8005144:	08005291 	.word	0x08005291
 8005148:	080051b5 	.word	0x080051b5
 800514c:	08005273 	.word	0x08005273
 8005150:	08005101 	.word	0x08005101
 8005154:	08005101 	.word	0x08005101
 8005158:	080052b3 	.word	0x080052b3
 800515c:	08005101 	.word	0x08005101
 8005160:	080051b5 	.word	0x080051b5
 8005164:	08005101 	.word	0x08005101
 8005168:	08005101 	.word	0x08005101
 800516c:	0800527b 	.word	0x0800527b
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	1d1a      	adds	r2, r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	602a      	str	r2, [r5, #0]
 8005178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800517c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005180:	2301      	movs	r3, #1
 8005182:	e0a3      	b.n	80052cc <_printf_i+0x1f4>
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	6829      	ldr	r1, [r5, #0]
 8005188:	0606      	lsls	r6, r0, #24
 800518a:	f101 0304 	add.w	r3, r1, #4
 800518e:	d50a      	bpl.n	80051a6 <_printf_i+0xce>
 8005190:	680e      	ldr	r6, [r1, #0]
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	2e00      	cmp	r6, #0
 8005196:	da03      	bge.n	80051a0 <_printf_i+0xc8>
 8005198:	232d      	movs	r3, #45	; 0x2d
 800519a:	4276      	negs	r6, r6
 800519c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a0:	485e      	ldr	r0, [pc, #376]	; (800531c <_printf_i+0x244>)
 80051a2:	230a      	movs	r3, #10
 80051a4:	e019      	b.n	80051da <_printf_i+0x102>
 80051a6:	680e      	ldr	r6, [r1, #0]
 80051a8:	602b      	str	r3, [r5, #0]
 80051aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ae:	bf18      	it	ne
 80051b0:	b236      	sxthne	r6, r6
 80051b2:	e7ef      	b.n	8005194 <_printf_i+0xbc>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	1d19      	adds	r1, r3, #4
 80051ba:	6029      	str	r1, [r5, #0]
 80051bc:	0601      	lsls	r1, r0, #24
 80051be:	d501      	bpl.n	80051c4 <_printf_i+0xec>
 80051c0:	681e      	ldr	r6, [r3, #0]
 80051c2:	e002      	b.n	80051ca <_printf_i+0xf2>
 80051c4:	0646      	lsls	r6, r0, #25
 80051c6:	d5fb      	bpl.n	80051c0 <_printf_i+0xe8>
 80051c8:	881e      	ldrh	r6, [r3, #0]
 80051ca:	4854      	ldr	r0, [pc, #336]	; (800531c <_printf_i+0x244>)
 80051cc:	2f6f      	cmp	r7, #111	; 0x6f
 80051ce:	bf0c      	ite	eq
 80051d0:	2308      	moveq	r3, #8
 80051d2:	230a      	movne	r3, #10
 80051d4:	2100      	movs	r1, #0
 80051d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051da:	6865      	ldr	r5, [r4, #4]
 80051dc:	60a5      	str	r5, [r4, #8]
 80051de:	2d00      	cmp	r5, #0
 80051e0:	bfa2      	ittt	ge
 80051e2:	6821      	ldrge	r1, [r4, #0]
 80051e4:	f021 0104 	bicge.w	r1, r1, #4
 80051e8:	6021      	strge	r1, [r4, #0]
 80051ea:	b90e      	cbnz	r6, 80051f0 <_printf_i+0x118>
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	d04d      	beq.n	800528c <_printf_i+0x1b4>
 80051f0:	4615      	mov	r5, r2
 80051f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80051f6:	fb03 6711 	mls	r7, r3, r1, r6
 80051fa:	5dc7      	ldrb	r7, [r0, r7]
 80051fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005200:	4637      	mov	r7, r6
 8005202:	42bb      	cmp	r3, r7
 8005204:	460e      	mov	r6, r1
 8005206:	d9f4      	bls.n	80051f2 <_printf_i+0x11a>
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10b      	bne.n	8005224 <_printf_i+0x14c>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	07de      	lsls	r6, r3, #31
 8005210:	d508      	bpl.n	8005224 <_printf_i+0x14c>
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6861      	ldr	r1, [r4, #4]
 8005216:	4299      	cmp	r1, r3
 8005218:	bfde      	ittt	le
 800521a:	2330      	movle	r3, #48	; 0x30
 800521c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005220:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005224:	1b52      	subs	r2, r2, r5
 8005226:	6122      	str	r2, [r4, #16]
 8005228:	f8cd a000 	str.w	sl, [sp]
 800522c:	464b      	mov	r3, r9
 800522e:	aa03      	add	r2, sp, #12
 8005230:	4621      	mov	r1, r4
 8005232:	4640      	mov	r0, r8
 8005234:	f7ff fee2 	bl	8004ffc <_printf_common>
 8005238:	3001      	adds	r0, #1
 800523a:	d14c      	bne.n	80052d6 <_printf_i+0x1fe>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b004      	add	sp, #16
 8005242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005246:	4835      	ldr	r0, [pc, #212]	; (800531c <_printf_i+0x244>)
 8005248:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800524c:	6829      	ldr	r1, [r5, #0]
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f851 6b04 	ldr.w	r6, [r1], #4
 8005254:	6029      	str	r1, [r5, #0]
 8005256:	061d      	lsls	r5, r3, #24
 8005258:	d514      	bpl.n	8005284 <_printf_i+0x1ac>
 800525a:	07df      	lsls	r7, r3, #31
 800525c:	bf44      	itt	mi
 800525e:	f043 0320 	orrmi.w	r3, r3, #32
 8005262:	6023      	strmi	r3, [r4, #0]
 8005264:	b91e      	cbnz	r6, 800526e <_printf_i+0x196>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	f023 0320 	bic.w	r3, r3, #32
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	2310      	movs	r3, #16
 8005270:	e7b0      	b.n	80051d4 <_printf_i+0xfc>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	2378      	movs	r3, #120	; 0x78
 800527c:	4828      	ldr	r0, [pc, #160]	; (8005320 <_printf_i+0x248>)
 800527e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005282:	e7e3      	b.n	800524c <_printf_i+0x174>
 8005284:	0659      	lsls	r1, r3, #25
 8005286:	bf48      	it	mi
 8005288:	b2b6      	uxthmi	r6, r6
 800528a:	e7e6      	b.n	800525a <_printf_i+0x182>
 800528c:	4615      	mov	r5, r2
 800528e:	e7bb      	b.n	8005208 <_printf_i+0x130>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	6826      	ldr	r6, [r4, #0]
 8005294:	6961      	ldr	r1, [r4, #20]
 8005296:	1d18      	adds	r0, r3, #4
 8005298:	6028      	str	r0, [r5, #0]
 800529a:	0635      	lsls	r5, r6, #24
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	d501      	bpl.n	80052a4 <_printf_i+0x1cc>
 80052a0:	6019      	str	r1, [r3, #0]
 80052a2:	e002      	b.n	80052aa <_printf_i+0x1d2>
 80052a4:	0670      	lsls	r0, r6, #25
 80052a6:	d5fb      	bpl.n	80052a0 <_printf_i+0x1c8>
 80052a8:	8019      	strh	r1, [r3, #0]
 80052aa:	2300      	movs	r3, #0
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	4615      	mov	r5, r2
 80052b0:	e7ba      	b.n	8005228 <_printf_i+0x150>
 80052b2:	682b      	ldr	r3, [r5, #0]
 80052b4:	1d1a      	adds	r2, r3, #4
 80052b6:	602a      	str	r2, [r5, #0]
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	6862      	ldr	r2, [r4, #4]
 80052bc:	2100      	movs	r1, #0
 80052be:	4628      	mov	r0, r5
 80052c0:	f7fa ffa6 	bl	8000210 <memchr>
 80052c4:	b108      	cbz	r0, 80052ca <_printf_i+0x1f2>
 80052c6:	1b40      	subs	r0, r0, r5
 80052c8:	6060      	str	r0, [r4, #4]
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	2300      	movs	r3, #0
 80052d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d4:	e7a8      	b.n	8005228 <_printf_i+0x150>
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	462a      	mov	r2, r5
 80052da:	4649      	mov	r1, r9
 80052dc:	4640      	mov	r0, r8
 80052de:	47d0      	blx	sl
 80052e0:	3001      	adds	r0, #1
 80052e2:	d0ab      	beq.n	800523c <_printf_i+0x164>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	079b      	lsls	r3, r3, #30
 80052e8:	d413      	bmi.n	8005312 <_printf_i+0x23a>
 80052ea:	68e0      	ldr	r0, [r4, #12]
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	4298      	cmp	r0, r3
 80052f0:	bfb8      	it	lt
 80052f2:	4618      	movlt	r0, r3
 80052f4:	e7a4      	b.n	8005240 <_printf_i+0x168>
 80052f6:	2301      	movs	r3, #1
 80052f8:	4632      	mov	r2, r6
 80052fa:	4649      	mov	r1, r9
 80052fc:	4640      	mov	r0, r8
 80052fe:	47d0      	blx	sl
 8005300:	3001      	adds	r0, #1
 8005302:	d09b      	beq.n	800523c <_printf_i+0x164>
 8005304:	3501      	adds	r5, #1
 8005306:	68e3      	ldr	r3, [r4, #12]
 8005308:	9903      	ldr	r1, [sp, #12]
 800530a:	1a5b      	subs	r3, r3, r1
 800530c:	42ab      	cmp	r3, r5
 800530e:	dcf2      	bgt.n	80052f6 <_printf_i+0x21e>
 8005310:	e7eb      	b.n	80052ea <_printf_i+0x212>
 8005312:	2500      	movs	r5, #0
 8005314:	f104 0619 	add.w	r6, r4, #25
 8005318:	e7f5      	b.n	8005306 <_printf_i+0x22e>
 800531a:	bf00      	nop
 800531c:	08005655 	.word	0x08005655
 8005320:	08005666 	.word	0x08005666

08005324 <memcpy>:
 8005324:	440a      	add	r2, r1
 8005326:	4291      	cmp	r1, r2
 8005328:	f100 33ff 	add.w	r3, r0, #4294967295
 800532c:	d100      	bne.n	8005330 <memcpy+0xc>
 800532e:	4770      	bx	lr
 8005330:	b510      	push	{r4, lr}
 8005332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800533a:	4291      	cmp	r1, r2
 800533c:	d1f9      	bne.n	8005332 <memcpy+0xe>
 800533e:	bd10      	pop	{r4, pc}

08005340 <memmove>:
 8005340:	4288      	cmp	r0, r1
 8005342:	b510      	push	{r4, lr}
 8005344:	eb01 0402 	add.w	r4, r1, r2
 8005348:	d902      	bls.n	8005350 <memmove+0x10>
 800534a:	4284      	cmp	r4, r0
 800534c:	4623      	mov	r3, r4
 800534e:	d807      	bhi.n	8005360 <memmove+0x20>
 8005350:	1e43      	subs	r3, r0, #1
 8005352:	42a1      	cmp	r1, r4
 8005354:	d008      	beq.n	8005368 <memmove+0x28>
 8005356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800535a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800535e:	e7f8      	b.n	8005352 <memmove+0x12>
 8005360:	4402      	add	r2, r0
 8005362:	4601      	mov	r1, r0
 8005364:	428a      	cmp	r2, r1
 8005366:	d100      	bne.n	800536a <memmove+0x2a>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800536e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005372:	e7f7      	b.n	8005364 <memmove+0x24>

08005374 <_free_r>:
 8005374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005376:	2900      	cmp	r1, #0
 8005378:	d044      	beq.n	8005404 <_free_r+0x90>
 800537a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537e:	9001      	str	r0, [sp, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f1a1 0404 	sub.w	r4, r1, #4
 8005386:	bfb8      	it	lt
 8005388:	18e4      	addlt	r4, r4, r3
 800538a:	f000 f913 	bl	80055b4 <__malloc_lock>
 800538e:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <_free_r+0x94>)
 8005390:	9801      	ldr	r0, [sp, #4]
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	b933      	cbnz	r3, 80053a4 <_free_r+0x30>
 8005396:	6063      	str	r3, [r4, #4]
 8005398:	6014      	str	r4, [r2, #0]
 800539a:	b003      	add	sp, #12
 800539c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053a0:	f000 b90e 	b.w	80055c0 <__malloc_unlock>
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d908      	bls.n	80053ba <_free_r+0x46>
 80053a8:	6825      	ldr	r5, [r4, #0]
 80053aa:	1961      	adds	r1, r4, r5
 80053ac:	428b      	cmp	r3, r1
 80053ae:	bf01      	itttt	eq
 80053b0:	6819      	ldreq	r1, [r3, #0]
 80053b2:	685b      	ldreq	r3, [r3, #4]
 80053b4:	1949      	addeq	r1, r1, r5
 80053b6:	6021      	streq	r1, [r4, #0]
 80053b8:	e7ed      	b.n	8005396 <_free_r+0x22>
 80053ba:	461a      	mov	r2, r3
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	b10b      	cbz	r3, 80053c4 <_free_r+0x50>
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	d9fa      	bls.n	80053ba <_free_r+0x46>
 80053c4:	6811      	ldr	r1, [r2, #0]
 80053c6:	1855      	adds	r5, r2, r1
 80053c8:	42a5      	cmp	r5, r4
 80053ca:	d10b      	bne.n	80053e4 <_free_r+0x70>
 80053cc:	6824      	ldr	r4, [r4, #0]
 80053ce:	4421      	add	r1, r4
 80053d0:	1854      	adds	r4, r2, r1
 80053d2:	42a3      	cmp	r3, r4
 80053d4:	6011      	str	r1, [r2, #0]
 80053d6:	d1e0      	bne.n	800539a <_free_r+0x26>
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	6053      	str	r3, [r2, #4]
 80053de:	4421      	add	r1, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	e7da      	b.n	800539a <_free_r+0x26>
 80053e4:	d902      	bls.n	80053ec <_free_r+0x78>
 80053e6:	230c      	movs	r3, #12
 80053e8:	6003      	str	r3, [r0, #0]
 80053ea:	e7d6      	b.n	800539a <_free_r+0x26>
 80053ec:	6825      	ldr	r5, [r4, #0]
 80053ee:	1961      	adds	r1, r4, r5
 80053f0:	428b      	cmp	r3, r1
 80053f2:	bf04      	itt	eq
 80053f4:	6819      	ldreq	r1, [r3, #0]
 80053f6:	685b      	ldreq	r3, [r3, #4]
 80053f8:	6063      	str	r3, [r4, #4]
 80053fa:	bf04      	itt	eq
 80053fc:	1949      	addeq	r1, r1, r5
 80053fe:	6021      	streq	r1, [r4, #0]
 8005400:	6054      	str	r4, [r2, #4]
 8005402:	e7ca      	b.n	800539a <_free_r+0x26>
 8005404:	b003      	add	sp, #12
 8005406:	bd30      	pop	{r4, r5, pc}
 8005408:	20000338 	.word	0x20000338

0800540c <sbrk_aligned>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	4e0e      	ldr	r6, [pc, #56]	; (8005448 <sbrk_aligned+0x3c>)
 8005410:	460c      	mov	r4, r1
 8005412:	6831      	ldr	r1, [r6, #0]
 8005414:	4605      	mov	r5, r0
 8005416:	b911      	cbnz	r1, 800541e <sbrk_aligned+0x12>
 8005418:	f000 f8bc 	bl	8005594 <_sbrk_r>
 800541c:	6030      	str	r0, [r6, #0]
 800541e:	4621      	mov	r1, r4
 8005420:	4628      	mov	r0, r5
 8005422:	f000 f8b7 	bl	8005594 <_sbrk_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d00a      	beq.n	8005440 <sbrk_aligned+0x34>
 800542a:	1cc4      	adds	r4, r0, #3
 800542c:	f024 0403 	bic.w	r4, r4, #3
 8005430:	42a0      	cmp	r0, r4
 8005432:	d007      	beq.n	8005444 <sbrk_aligned+0x38>
 8005434:	1a21      	subs	r1, r4, r0
 8005436:	4628      	mov	r0, r5
 8005438:	f000 f8ac 	bl	8005594 <_sbrk_r>
 800543c:	3001      	adds	r0, #1
 800543e:	d101      	bne.n	8005444 <sbrk_aligned+0x38>
 8005440:	f04f 34ff 	mov.w	r4, #4294967295
 8005444:	4620      	mov	r0, r4
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	2000033c 	.word	0x2000033c

0800544c <_malloc_r>:
 800544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005450:	1ccd      	adds	r5, r1, #3
 8005452:	f025 0503 	bic.w	r5, r5, #3
 8005456:	3508      	adds	r5, #8
 8005458:	2d0c      	cmp	r5, #12
 800545a:	bf38      	it	cc
 800545c:	250c      	movcc	r5, #12
 800545e:	2d00      	cmp	r5, #0
 8005460:	4607      	mov	r7, r0
 8005462:	db01      	blt.n	8005468 <_malloc_r+0x1c>
 8005464:	42a9      	cmp	r1, r5
 8005466:	d905      	bls.n	8005474 <_malloc_r+0x28>
 8005468:	230c      	movs	r3, #12
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	2600      	movs	r6, #0
 800546e:	4630      	mov	r0, r6
 8005470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005474:	4e2e      	ldr	r6, [pc, #184]	; (8005530 <_malloc_r+0xe4>)
 8005476:	f000 f89d 	bl	80055b4 <__malloc_lock>
 800547a:	6833      	ldr	r3, [r6, #0]
 800547c:	461c      	mov	r4, r3
 800547e:	bb34      	cbnz	r4, 80054ce <_malloc_r+0x82>
 8005480:	4629      	mov	r1, r5
 8005482:	4638      	mov	r0, r7
 8005484:	f7ff ffc2 	bl	800540c <sbrk_aligned>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	4604      	mov	r4, r0
 800548c:	d14d      	bne.n	800552a <_malloc_r+0xde>
 800548e:	6834      	ldr	r4, [r6, #0]
 8005490:	4626      	mov	r6, r4
 8005492:	2e00      	cmp	r6, #0
 8005494:	d140      	bne.n	8005518 <_malloc_r+0xcc>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4631      	mov	r1, r6
 800549a:	4638      	mov	r0, r7
 800549c:	eb04 0803 	add.w	r8, r4, r3
 80054a0:	f000 f878 	bl	8005594 <_sbrk_r>
 80054a4:	4580      	cmp	r8, r0
 80054a6:	d13a      	bne.n	800551e <_malloc_r+0xd2>
 80054a8:	6821      	ldr	r1, [r4, #0]
 80054aa:	3503      	adds	r5, #3
 80054ac:	1a6d      	subs	r5, r5, r1
 80054ae:	f025 0503 	bic.w	r5, r5, #3
 80054b2:	3508      	adds	r5, #8
 80054b4:	2d0c      	cmp	r5, #12
 80054b6:	bf38      	it	cc
 80054b8:	250c      	movcc	r5, #12
 80054ba:	4629      	mov	r1, r5
 80054bc:	4638      	mov	r0, r7
 80054be:	f7ff ffa5 	bl	800540c <sbrk_aligned>
 80054c2:	3001      	adds	r0, #1
 80054c4:	d02b      	beq.n	800551e <_malloc_r+0xd2>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	442b      	add	r3, r5
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	e00e      	b.n	80054ec <_malloc_r+0xa0>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	1b52      	subs	r2, r2, r5
 80054d2:	d41e      	bmi.n	8005512 <_malloc_r+0xc6>
 80054d4:	2a0b      	cmp	r2, #11
 80054d6:	d916      	bls.n	8005506 <_malloc_r+0xba>
 80054d8:	1961      	adds	r1, r4, r5
 80054da:	42a3      	cmp	r3, r4
 80054dc:	6025      	str	r5, [r4, #0]
 80054de:	bf18      	it	ne
 80054e0:	6059      	strne	r1, [r3, #4]
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	bf08      	it	eq
 80054e6:	6031      	streq	r1, [r6, #0]
 80054e8:	5162      	str	r2, [r4, r5]
 80054ea:	604b      	str	r3, [r1, #4]
 80054ec:	4638      	mov	r0, r7
 80054ee:	f104 060b 	add.w	r6, r4, #11
 80054f2:	f000 f865 	bl	80055c0 <__malloc_unlock>
 80054f6:	f026 0607 	bic.w	r6, r6, #7
 80054fa:	1d23      	adds	r3, r4, #4
 80054fc:	1af2      	subs	r2, r6, r3
 80054fe:	d0b6      	beq.n	800546e <_malloc_r+0x22>
 8005500:	1b9b      	subs	r3, r3, r6
 8005502:	50a3      	str	r3, [r4, r2]
 8005504:	e7b3      	b.n	800546e <_malloc_r+0x22>
 8005506:	6862      	ldr	r2, [r4, #4]
 8005508:	42a3      	cmp	r3, r4
 800550a:	bf0c      	ite	eq
 800550c:	6032      	streq	r2, [r6, #0]
 800550e:	605a      	strne	r2, [r3, #4]
 8005510:	e7ec      	b.n	80054ec <_malloc_r+0xa0>
 8005512:	4623      	mov	r3, r4
 8005514:	6864      	ldr	r4, [r4, #4]
 8005516:	e7b2      	b.n	800547e <_malloc_r+0x32>
 8005518:	4634      	mov	r4, r6
 800551a:	6876      	ldr	r6, [r6, #4]
 800551c:	e7b9      	b.n	8005492 <_malloc_r+0x46>
 800551e:	230c      	movs	r3, #12
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	4638      	mov	r0, r7
 8005524:	f000 f84c 	bl	80055c0 <__malloc_unlock>
 8005528:	e7a1      	b.n	800546e <_malloc_r+0x22>
 800552a:	6025      	str	r5, [r4, #0]
 800552c:	e7de      	b.n	80054ec <_malloc_r+0xa0>
 800552e:	bf00      	nop
 8005530:	20000338 	.word	0x20000338

08005534 <_realloc_r>:
 8005534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005538:	4680      	mov	r8, r0
 800553a:	4614      	mov	r4, r2
 800553c:	460e      	mov	r6, r1
 800553e:	b921      	cbnz	r1, 800554a <_realloc_r+0x16>
 8005540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	4611      	mov	r1, r2
 8005546:	f7ff bf81 	b.w	800544c <_malloc_r>
 800554a:	b92a      	cbnz	r2, 8005558 <_realloc_r+0x24>
 800554c:	f7ff ff12 	bl	8005374 <_free_r>
 8005550:	4625      	mov	r5, r4
 8005552:	4628      	mov	r0, r5
 8005554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005558:	f000 f838 	bl	80055cc <_malloc_usable_size_r>
 800555c:	4284      	cmp	r4, r0
 800555e:	4607      	mov	r7, r0
 8005560:	d802      	bhi.n	8005568 <_realloc_r+0x34>
 8005562:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005566:	d812      	bhi.n	800558e <_realloc_r+0x5a>
 8005568:	4621      	mov	r1, r4
 800556a:	4640      	mov	r0, r8
 800556c:	f7ff ff6e 	bl	800544c <_malloc_r>
 8005570:	4605      	mov	r5, r0
 8005572:	2800      	cmp	r0, #0
 8005574:	d0ed      	beq.n	8005552 <_realloc_r+0x1e>
 8005576:	42bc      	cmp	r4, r7
 8005578:	4622      	mov	r2, r4
 800557a:	4631      	mov	r1, r6
 800557c:	bf28      	it	cs
 800557e:	463a      	movcs	r2, r7
 8005580:	f7ff fed0 	bl	8005324 <memcpy>
 8005584:	4631      	mov	r1, r6
 8005586:	4640      	mov	r0, r8
 8005588:	f7ff fef4 	bl	8005374 <_free_r>
 800558c:	e7e1      	b.n	8005552 <_realloc_r+0x1e>
 800558e:	4635      	mov	r5, r6
 8005590:	e7df      	b.n	8005552 <_realloc_r+0x1e>
	...

08005594 <_sbrk_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d06      	ldr	r5, [pc, #24]	; (80055b0 <_sbrk_r+0x1c>)
 8005598:	2300      	movs	r3, #0
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	f7fb ff56 	bl	8001450 <_sbrk>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_sbrk_r+0x1a>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_sbrk_r+0x1a>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20000340 	.word	0x20000340

080055b4 <__malloc_lock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__malloc_lock+0x8>)
 80055b6:	f000 b811 	b.w	80055dc <__retarget_lock_acquire_recursive>
 80055ba:	bf00      	nop
 80055bc:	20000344 	.word	0x20000344

080055c0 <__malloc_unlock>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__malloc_unlock+0x8>)
 80055c2:	f000 b80c 	b.w	80055de <__retarget_lock_release_recursive>
 80055c6:	bf00      	nop
 80055c8:	20000344 	.word	0x20000344

080055cc <_malloc_usable_size_r>:
 80055cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d0:	1f18      	subs	r0, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bfbc      	itt	lt
 80055d6:	580b      	ldrlt	r3, [r1, r0]
 80055d8:	18c0      	addlt	r0, r0, r3
 80055da:	4770      	bx	lr

080055dc <__retarget_lock_acquire_recursive>:
 80055dc:	4770      	bx	lr

080055de <__retarget_lock_release_recursive>:
 80055de:	4770      	bx	lr

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr
