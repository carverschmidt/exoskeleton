
exoskeleton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f4  080061f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061fc  080061fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000070  08006274  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006274  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247e  00000000  00000000  00032974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00034df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00035e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002342e  00000000  00000000  00036e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001562e  00000000  00000000  0005a296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0262  00000000  00000000  0006f8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fb26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b30  00000000  00000000  0014fb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006078 	.word	0x08006078

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006078 	.word	0x08006078

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b09c      	sub	sp, #112	; 0x70
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fffd 	bl	80015b8 <HAL_Init>

  uint8_t msg[100]; //buffer for UART message
  int msgSize;		//variable for UART message size in bytes
  uint8_t * i2cMsg;	//8-bit value of I2C message
  uint8_t buf;
  uint8_t val = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint8_t test = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  //extern con
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f84f 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 fbd3 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 fbb1 	bl	8000d38 <MX_DMA_Init>
  MX_I2C1_Init();
 80005d6:	f000 f931 	bl	800083c <MX_I2C1_Init>
  MX_TIM2_Init();
 80005da:	f000 f95d 	bl	8000898 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005de:	f000 f9bf 	bl	8000960 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e2:	f000 fa3f 	bl	8000a64 <MX_TIM4_Init>
  MX_TIM8_Init();
 80005e6:	f000 fab3 	bl	8000b50 <MX_TIM8_Init>
  MX_UART4_Init();
 80005ea:	f000 fb51 	bl	8000c90 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 fb79 	bl	8000ce4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005f2:	f000 f8a7 	bl	8000744 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //Motor 1
 80005f6:	2104      	movs	r1, #4
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0xa0>)
 80005fa:	f003 feab 	bl	8004354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Motor 2
 80005fe:	2100      	movs	r1, #0
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <main+0xa4>)
 8000602:	f003 fea7 	bl	8004354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); //Motor 3
 8000606:	2104      	movs	r1, #4
 8000608:	4814      	ldr	r0, [pc, #80]	; (800065c <main+0xa8>)
 800060a:	f003 fea3 	bl	8004354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //Motor 4
 800060e:	2108      	movs	r1, #8
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0xac>)
 8000612:	f003 fe9f 	bl	8004354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //Motor 5
 8000616:	2100      	movs	r1, #0
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0xa0>)
 800061a:	f003 fe9b 	bl	8004354 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //Motor 6
 800061e:	2104      	movs	r1, #4
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <main+0xac>)
 8000622:	f003 fe97 	bl	8004354 <HAL_TIM_PWM_Start>
	{
		setMotorVel(1, 1, (i));
		HAL_Delay(10);
	}
	*/
	msgSize = sprintf((char *)msg, "We livin: %u\r\n", enc_read_pos(1)); //store message in msg buffer
 8000626:	2001      	movs	r0, #1
 8000628:	f000 fc24 	bl	8000e74 <enc_read_pos>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	490c      	ldr	r1, [pc, #48]	; (8000664 <main+0xb0>)
 8000634:	4618      	mov	r0, r3
 8000636:	f005 f8b1 	bl	800579c <siprintf>
 800063a:	66b8      	str	r0, [r7, #104]	; 0x68
	HAL_UART_Transmit(&huart2, msg, msgSize, 10); //Send UART message to UART2
 800063c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800063e:	b29a      	uxth	r2, r3
 8000640:	1d39      	adds	r1, r7, #4
 8000642:	230a      	movs	r3, #10
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <main+0xb4>)
 8000646:	f004 fd02 	bl	800504e <HAL_UART_Transmit>
	HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f001 f825 	bl	800169c <HAL_Delay>
	msgSize = sprintf((char *)msg, "We livin: %u\r\n", enc_read_pos(1)); //store message in msg buffer
 8000652:	e7e8      	b.n	8000626 <main+0x72>
 8000654:	200001d0 	.word	0x200001d0
 8000658:	20000218 	.word	0x20000218
 800065c:	20000260 	.word	0x20000260
 8000660:	20000188 	.word	0x20000188
 8000664:	08006090 	.word	0x08006090
 8000668:	200002ec 	.word	0x200002ec

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 f886 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a28      	ldr	r2, [pc, #160]	; (800073c <SystemClock_Config+0xd0>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b26      	ldr	r3, [pc, #152]	; (800073c <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <SystemClock_Config+0xd4>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e0:	2308      	movs	r3, #8
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006e4:	2354      	movs	r3, #84	; 0x54
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 faef 	bl	8003cdc <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000704:	f000 fbb0 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 ff8f 	bl	8003648 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000730:	f000 fb9a 	bl	8000e68 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	; 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000756:	4b36      	ldr	r3, [pc, #216]	; (8000830 <MX_ADC1_Init+0xec>)
 8000758:	4a36      	ldr	r2, [pc, #216]	; (8000834 <MX_ADC1_Init+0xf0>)
 800075a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <MX_ADC1_Init+0xec>)
 800075e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000762:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <MX_ADC1_Init+0xec>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <MX_ADC1_Init+0xec>)
 800076c:	2201      	movs	r2, #1
 800076e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_ADC1_Init+0xec>)
 8000772:	2200      	movs	r2, #0
 8000774:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_ADC1_Init+0xec>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_ADC1_Init+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_ADC1_Init+0xec>)
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_ADC1_Init+0xf4>)
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_ADC1_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_ADC1_Init+0xec>)
 8000792:	2204      	movs	r2, #4
 8000794:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC1_Init+0xec>)
 8000798:	2201      	movs	r2, #1
 800079a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_ADC1_Init+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a4:	4822      	ldr	r0, [pc, #136]	; (8000830 <MX_ADC1_Init+0xec>)
 80007a6:	f000 ff9d 	bl	80016e4 <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007b0:	f000 fb5a 	bl	8000e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	481a      	ldr	r0, [pc, #104]	; (8000830 <MX_ADC1_Init+0xec>)
 80007c6:	f000 ffd1 	bl	800176c <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007d0:	f000 fb4a 	bl	8000e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <MX_ADC1_Init+0xec>)
 80007e2:	f000 ffc3 	bl	800176c <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007ec:	f000 fb3c 	bl	8000e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007f4:	2303      	movs	r3, #3
 80007f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_ADC1_Init+0xec>)
 80007fe:	f000 ffb5 	bl	800176c <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000808:	f000 fb2e 	bl	8000e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800080c:	2308      	movs	r3, #8
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0xec>)
 800081a:	f000 ffa7 	bl	800176c <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000824:	f000 fb20 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000008c 	.word	0x2000008c
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C1_Init+0x50>)
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_I2C1_Init+0x54>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_I2C1_Init+0x50>)
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MX_I2C1_Init+0x58>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_I2C1_Init+0x50>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_I2C1_Init+0x50>)
 800087a:	f001 ff4f 	bl	800271c <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 faf0 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000134 	.word	0x20000134
 8000890:	40005400 	.word	0x40005400
 8000894:	000186a0 	.word	0x000186a0

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_TIM2_Init+0xc4>)
 80008bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_TIM2_Init+0xc4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_TIM2_Init+0xc4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_TIM2_Init+0xc4>)
 80008d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_TIM2_Init+0xc4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_TIM2_Init+0xc4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008e2:	481e      	ldr	r0, [pc, #120]	; (800095c <MX_TIM2_Init+0xc4>)
 80008e4:	f003 fce7 	bl	80042b6 <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008ee:	f000 fabb 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	4619      	mov	r1, r3
 8000900:	4816      	ldr	r0, [pc, #88]	; (800095c <MX_TIM2_Init+0xc4>)
 8000902:	f004 fa89 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800090c:	f000 faac 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000910:	2360      	movs	r3, #96	; 0x60
 8000912:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2204      	movs	r2, #4
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_TIM2_Init+0xc4>)
 8000928:	f003 fddc 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000932:	f000 fa99 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2208      	movs	r2, #8
 800093a:	4619      	mov	r1, r3
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_TIM2_Init+0xc4>)
 800093e:	f003 fdd1 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000948:	f000 fa8e 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_TIM2_Init+0xc4>)
 800094e:	f000 fc43 	bl	80011d8 <HAL_TIM_MspPostInit>

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000188 	.word	0x20000188

08000960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <MX_TIM3_Init+0xfc>)
 8000992:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <MX_TIM3_Init+0x100>)
 8000994:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MX_TIM3_Init+0xfc>)
 8000998:	2253      	movs	r2, #83	; 0x53
 800099a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <MX_TIM3_Init+0xfc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19975;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_TIM3_Init+0xfc>)
 80009a4:	f644 6207 	movw	r2, #19975	; 0x4e07
 80009a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_TIM3_Init+0xfc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM3_Init+0xfc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b6:	4829      	ldr	r0, [pc, #164]	; (8000a5c <MX_TIM3_Init+0xfc>)
 80009b8:	f003 fc2e 	bl	8004218 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009c2:	f000 fa51 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MX_TIM3_Init+0xfc>)
 80009d4:	f003 fe48 	bl	8004668 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009de:	f000 fa43 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009e2:	481e      	ldr	r0, [pc, #120]	; (8000a5c <MX_TIM3_Init+0xfc>)
 80009e4:	f003 fc67 	bl	80042b6 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009ee:	f000 fa3b 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4619      	mov	r1, r3
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <MX_TIM3_Init+0xfc>)
 8000a02:	f004 fa09 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a0c:	f000 fa2c 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	; 0x60
 8000a12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_TIM3_Init+0xfc>)
 8000a28:	f003 fd5c 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a32:	f000 fa19 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2204      	movs	r2, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM3_Init+0xfc>)
 8000a3e:	f003 fd51 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000a48:	f000 fa0e 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM3_Init+0xfc>)
 8000a4e:	f000 fbc3 	bl	80011d8 <HAL_TIM_MspPostInit>

}
 8000a52:	bf00      	nop
 8000a54:	3738      	adds	r7, #56	; 0x38
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001d0 	.word	0x200001d0
 8000a60:	40000400 	.word	0x40000400

08000a64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000a96:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_TIM4_Init+0xe8>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000aba:	4823      	ldr	r0, [pc, #140]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000abc:	f003 fbac 	bl	8004218 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ac6:	f000 f9cf 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000ad8:	f003 fdc6 	bl	8004668 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ae2:	f000 f9c1 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae6:	4818      	ldr	r0, [pc, #96]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000ae8:	f003 fbe5 	bl	80042b6 <HAL_TIM_PWM_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000af2:	f000 f9b9 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4619      	mov	r1, r3
 8000b04:	4810      	ldr	r0, [pc, #64]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000b06:	f004 f987 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000b10:	f000 f9aa 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b14:	2360      	movs	r3, #96	; 0x60
 8000b16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000b2c:	f003 fcda 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b36:	f000 f997 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <MX_TIM4_Init+0xe4>)
 8000b3c:	f000 fb4c 	bl	80011d8 <HAL_TIM_MspPostInit>

}
 8000b40:	bf00      	nop
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000218 	.word	0x20000218
 8000b4c:	40000800 	.word	0x40000800

08000b50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b096      	sub	sp, #88	; 0x58
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2220      	movs	r2, #32
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 fdff 	bl	800578c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000b90:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <MX_TIM8_Init+0x13c>)
 8000b92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ba0:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bae:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000bba:	4833      	ldr	r0, [pc, #204]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000bbc:	f003 fb2c 	bl	8004218 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000bc6:	f000 f94f 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	482c      	ldr	r0, [pc, #176]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000bd8:	f003 fd46 	bl	8004668 <HAL_TIM_ConfigClockSource>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000be2:	f000 f941 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000be6:	4828      	ldr	r0, [pc, #160]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000be8:	f003 fb65 	bl	80042b6 <HAL_TIM_PWM_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 f939 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c02:	4619      	mov	r1, r3
 8000c04:	4820      	ldr	r0, [pc, #128]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000c06:	f004 f907 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000c10:	f000 f92a 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c14:	2360      	movs	r3, #96	; 0x60
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	2204      	movs	r2, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000c3a:	f003 fc53 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000c44:	f000 f910 	bl	8000e68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000c6c:	f004 f950 	bl	8004f10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8000c76:	f000 f8f7 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM8_Init+0x138>)
 8000c7c:	f000 faac 	bl	80011d8 <HAL_TIM_MspPostInit>

}
 8000c80:	bf00      	nop
 8000c82:	3758      	adds	r7, #88	; 0x58
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000260 	.word	0x20000260
 8000c8c:	40010400 	.word	0x40010400

08000c90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_UART4_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_UART4_Init+0x4c>)
 8000cc8:	f004 f974 	bl	8004fb4 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f000 f8c9 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200002a8 	.word	0x200002a8
 8000ce0:	40004c00 	.word	0x40004c00

08000ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_USART2_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f004 f94a 	bl	8004fb4 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f89f 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200002ec 	.word	0x200002ec
 8000d34:	40004400 	.word	0x40004400

08000d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_DMA_Init+0x3c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <MX_DMA_Init+0x3c>)
 8000d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_DMA_Init+0x3c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2038      	movs	r0, #56	; 0x38
 8000d60:	f001 f80d 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d64:	2038      	movs	r0, #56	; 0x38
 8000d66:	f001 f826 	bl	8001db6 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|M2DIR_Pin|M1DIR_Pin|M4DIR_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000de8:	481c      	ldr	r0, [pc, #112]	; (8000e5c <MX_GPIO_Init+0xe4>)
 8000dea:	f001 fc7d 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M3DIR_GPIO_Port, M3DIR_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2120      	movs	r1, #32
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_GPIO_Init+0xe8>)
 8000df4:	f001 fc78 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4815      	ldr	r0, [pc, #84]	; (8000e64 <MX_GPIO_Init+0xec>)
 8000e10:	f001 fad6 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin M2DIR_Pin M1DIR_Pin M4DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|M2DIR_Pin|M1DIR_Pin|M4DIR_Pin;
 8000e14:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <MX_GPIO_Init+0xe4>)
 8000e2e:	f001 fac7 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3DIR_Pin */
  GPIO_InitStruct.Pin = M3DIR_Pin;
 8000e32:	2320      	movs	r3, #32
 8000e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(M3DIR_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_GPIO_Init+0xe8>)
 8000e4a:	f001 fab9 	bl	80023c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40020800 	.word	0x40020800

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <enc_read_pos>:

/*
 * Read position of the encoder
 */
uint8_t enc_read_pos(uint8_t enc_num)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;
	uint8_t raw;
	HAL_I2C_Master_Transmit(&hi2c1, (ENC1ADD + (enc_num - 1)) << 1, NULL, 0, HAL_MAX_DELAY);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	331f      	adds	r3, #31
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	b299      	uxth	r1, r3
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <enc_read_pos+0x74>)
 8000e96:	f001 fd85 	bl	80029a4 <HAL_I2C_Master_Transmit>
	// Read data from the PCF8574
	HAL_I2C_Master_Receive(&hi2c1, (ENC1ADD + (enc_num - 1)) << 1, &buf, 1, HAL_MAX_DELAY);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	331f      	adds	r3, #31
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	f107 020e 	add.w	r2, r7, #14
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <enc_read_pos+0x74>)
 8000eb4:	f001 fe74 	bl	8002ba0 <HAL_I2C_Master_Receive>
	raw = encoderMap_87654321[buf] - 71;
 8000eb8:	7bbb      	ldrb	r3, [r7, #14]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <enc_read_pos+0x78>)
 8000ebe:	5c9b      	ldrb	r3, [r3, r2]
 8000ec0:	3b47      	subs	r3, #71	; 0x47
 8000ec2:	73fb      	strb	r3, [r7, #15]
	return raw % 127 ;
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <enc_read_pos+0x7c>)
 8000ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8000ecc:	1ad1      	subs	r1, r2, r3
 8000ece:	0849      	lsrs	r1, r1, #1
 8000ed0:	440b      	add	r3, r1
 8000ed2:	0999      	lsrs	r1, r3, #6
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	01db      	lsls	r3, r3, #7
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b2db      	uxtb	r3, r3
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000134 	.word	0x20000134
 8000eec:	080060a0 	.word	0x080060a0
 8000ef0:	02040811 	.word	0x02040811

08000ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f32:	2007      	movs	r0, #7
 8000f34:	f000 ff18 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800

08000f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <HAL_ADC_MspInit+0x110>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d172      	bne.n	800104c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a3a      	ldr	r2, [pc, #232]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a33      	ldr	r2, [pc, #204]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HAL_ADC_MspInit+0x114>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000fba:	2313      	movs	r3, #19
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4823      	ldr	r0, [pc, #140]	; (800105c <HAL_ADC_MspInit+0x118>)
 8000fce:	f001 f9f7 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <HAL_ADC_MspInit+0x11c>)
 8000fe6:	f001 f9eb 	bl	80023c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8000fec:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_ADC_MspInit+0x124>)
 8000fee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8001004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001008:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_ADC_MspInit+0x120>)
 800100c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001010:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8001014:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001018:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_ADC_MspInit+0x120>)
 800101c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001020:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8001024:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001028:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_ADC_MspInit+0x120>)
 800102c:	2200      	movs	r2, #0
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8001032:	f000 fedb 	bl	8001dec <HAL_DMA_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800103c:	f7ff ff14 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_ADC_MspInit+0x120>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40012000 	.word	0x40012000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	200000d4 	.word	0x200000d4
 8001068:	40026410 	.word	0x40026410

0800106c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HAL_I2C_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12c      	bne.n	80010e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_I2C_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <HAL_I2C_MspInit+0x88>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_I2C_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010bc:	2304      	movs	r3, #4
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <HAL_I2C_MspInit+0x8c>)
 80010c8:	f001 f97a 	bl	80023c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_I2C_MspInit+0x88>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_I2C_MspInit+0x88>)
 80010d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_I2C_MspInit+0x88>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40005400 	.word	0x40005400
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020400 	.word	0x40020400

080010fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d10d      	bne.n	800112a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_TIM_PWM_MspInit+0x3c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_TIM_PWM_MspInit+0x3c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_TIM_PWM_MspInit+0x3c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_TIM_Base_MspInit+0x8c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10e      	bne.n	800116c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800116a:	e026      	b.n	80011ba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_TIM_Base_MspInit+0x94>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10e      	bne.n	8001194 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
}
 8001192:	e012      	b.n	80011ba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM8)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_TIM_Base_MspInit+0x98>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10d      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_TIM_Base_MspInit+0x90>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40000400 	.word	0x40000400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40000800 	.word	0x40000800
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d11f      	bne.n	800123a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a54      	ldr	r2, [pc, #336]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M4PWM_Pin|M6PWM_Pin;
 8001216:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001228:	2301      	movs	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4849      	ldr	r0, [pc, #292]	; (8001358 <HAL_TIM_MspPostInit+0x180>)
 8001234:	f001 f8c4 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001238:	e088      	b.n	800134c <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM3)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a47      	ldr	r2, [pc, #284]	; (800135c <HAL_TIM_MspPostInit+0x184>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d13c      	bne.n	80012be <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a41      	ldr	r2, [pc, #260]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b38      	ldr	r3, [pc, #224]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128c:	2302      	movs	r3, #2
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4832      	ldr	r0, [pc, #200]	; (8001360 <HAL_TIM_MspPostInit+0x188>)
 8001298:	f001 f892 	bl	80023c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M5PWM_Pin;
 800129c:	2310      	movs	r3, #16
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M5PWM_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4828      	ldr	r0, [pc, #160]	; (8001358 <HAL_TIM_MspPostInit+0x180>)
 80012b8:	f001 f882 	bl	80023c0 <HAL_GPIO_Init>
}
 80012bc:	e046      	b.n	800134c <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM4)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a28      	ldr	r2, [pc, #160]	; (8001364 <HAL_TIM_MspPostInit+0x18c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d11e      	bne.n	8001306 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a20      	ldr	r2, [pc, #128]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2PWM_Pin;
 80012e4:	2340      	movs	r3, #64	; 0x40
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4816      	ldr	r0, [pc, #88]	; (8001358 <HAL_TIM_MspPostInit+0x180>)
 8001300:	f001 f85e 	bl	80023c0 <HAL_GPIO_Init>
}
 8001304:	e022      	b.n	800134c <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM8)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_TIM_MspPostInit+0x190>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d11d      	bne.n	800134c <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_TIM_MspPostInit+0x17c>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3PWM_Pin;
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800133c:	2303      	movs	r3, #3
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <HAL_TIM_MspPostInit+0x194>)
 8001348:	f001 f83a 	bl	80023c0 <HAL_GPIO_Init>
}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400
 800135c:	40000400 	.word	0x40000400
 8001360:	40020000 	.word	0x40020000
 8001364:	40000800 	.word	0x40000800
 8001368:	40010400 	.word	0x40010400
 800136c:	40020800 	.word	0x40020800

08001370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_UART_MspInit+0xe8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12d      	bne.n	80013ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_UART_MspInit+0xec>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a30      	ldr	r2, [pc, #192]	; (800145c <HAL_UART_MspInit+0xec>)
 800139c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_UART_MspInit+0xec>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_UART_MspInit+0xec>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_UART_MspInit+0xec>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_UART_MspInit+0xec>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013dc:	2308      	movs	r3, #8
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	481e      	ldr	r0, [pc, #120]	; (8001460 <HAL_UART_MspInit+0xf0>)
 80013e8:	f000 ffea 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ec:	e030      	b.n	8001450 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_UART_MspInit+0xf4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d12b      	bne.n	8001450 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_UART_MspInit+0xec>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_UART_MspInit+0xec>)
 8001402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_UART_MspInit+0xec>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_UART_MspInit+0xec>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_UART_MspInit+0xec>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_UART_MspInit+0xec>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001430:	230c      	movs	r3, #12
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001440:	2307      	movs	r3, #7
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <HAL_UART_MspInit+0xf8>)
 800144c:	f000 ffb8 	bl	80023c0 <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3730      	adds	r7, #48	; 0x30
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40004c00 	.word	0x40004c00
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800
 8001464:	40004400 	.word	0x40004400
 8001468:	40020000 	.word	0x40020000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f8d0 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <DMA2_Stream0_IRQHandler+0x10>)
 80014c6:	f000 fd3f 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000d4 	.word	0x200000d4

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f004 f918 	bl	8005738 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20020000 	.word	0x20020000
 8001534:	00000400 	.word	0x00000400
 8001538:	20000330 	.word	0x20000330
 800153c:	20000348 	.word	0x20000348

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SystemInit+0x20>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SystemInit+0x20>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <Reset_Handler>:
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
 800156e:	2300      	movs	r3, #0
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:
 8001572:	58d4      	ldr	r4, [r2, r3]
 8001574:	50c4      	str	r4, [r0, r3]
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:
 8001578:	18c4      	adds	r4, r0, r3
 800157a:	428c      	cmp	r4, r1
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
 8001582:	2300      	movs	r3, #0
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:
 800158a:	42a2      	cmp	r2, r4
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>
 800158e:	f7ff ffd7 	bl	8001540 <SystemInit>
 8001592:	f004 f8d7 	bl	8005744 <__libc_init_array>
 8001596:	f7ff f80d 	bl	80005b4 <main>
 800159a:	4770      	bx	lr
 800159c:	20020000 	.word	0x20020000
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000070 	.word	0x20000070
 80015a8:	08006204 	.word	0x08006204
 80015ac:	20000070 	.word	0x20000070
 80015b0:	20000348 	.word	0x20000348

080015b4 <ADC_IRQHandler>:
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 fbc1 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fc82 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fbd9 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 fba1 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000334 	.word	0x20000334

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000334 	.word	0x20000334

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e033      	b.n	8001762 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fc1e 	bl	8000f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2b00      	cmp	r3, #0
 8001720:	d118      	bne.n	8001754 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	f043 0202 	orr.w	r2, r3, #2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f94a 	bl	80019d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f023 0303 	bic.w	r3, r3, #3
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
 8001752:	e001      	b.n	8001758 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1c>
 8001784:	2302      	movs	r3, #2
 8001786:	e113      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x244>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d925      	bls.n	80017e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68d9      	ldr	r1, [r3, #12]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	3b1e      	subs	r3, #30
 80017ae:	2207      	movs	r2, #7
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43da      	mvns	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	400a      	ands	r2, r1
 80017bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68d9      	ldr	r1, [r3, #12]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4403      	add	r3, r0
 80017d6:	3b1e      	subs	r3, #30
 80017d8:	409a      	lsls	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	e022      	b.n	800182a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6919      	ldr	r1, [r3, #16]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	2207      	movs	r2, #7
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	400a      	ands	r2, r1
 8001806:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6919      	ldr	r1, [r3, #16]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	4603      	mov	r3, r0
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4403      	add	r3, r0
 8001820:	409a      	lsls	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b06      	cmp	r3, #6
 8001830:	d824      	bhi.n	800187c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b05      	subs	r3, #5
 8001844:	221f      	movs	r2, #31
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	400a      	ands	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3b05      	subs	r3, #5
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
 800187a:	e04c      	b.n	8001916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d824      	bhi.n	80018ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3b23      	subs	r3, #35	; 0x23
 8001896:	221f      	movs	r2, #31
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43da      	mvns	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	400a      	ands	r2, r1
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b23      	subs	r3, #35	; 0x23
 80018c0:	fa00 f203 	lsl.w	r2, r0, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
 80018cc:	e023      	b.n	8001916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b41      	subs	r3, #65	; 0x41
 80018e0:	221f      	movs	r2, #31
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b41      	subs	r3, #65	; 0x41
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_ADC_ConfigChannel+0x250>)
 8001918:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_ADC_ConfigChannel+0x254>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d10f      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x1d8>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d10b      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <HAL_ADC_ConfigChannel+0x254>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12b      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x23a>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_ADC_ConfigChannel+0x258>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d003      	beq.n	8001960 <HAL_ADC_ConfigChannel+0x1f4>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b11      	cmp	r3, #17
 800195e:	d122      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_ADC_ConfigChannel+0x258>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d111      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_ADC_ConfigChannel+0x260>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	0c9a      	lsrs	r2, r3, #18
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3b01      	subs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40012300 	.word	0x40012300
 80019c0:	40012000 	.word	0x40012000
 80019c4:	10000012 	.word	0x10000012
 80019c8:	20000000 	.word	0x20000000
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d8:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <ADC_Init+0x1f0>)
 80019da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	021a      	lsls	r2, r3, #8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <ADC_Init+0x1f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6899      	ldr	r1, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6899      	ldr	r1, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e00f      	b.n	8001ace <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0202 	bic.w	r2, r2, #2
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7e1b      	ldrb	r3, [r3, #24]
 8001ae8:	005a      	lsls	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01b      	beq.n	8001b34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	3b01      	subs	r3, #1
 8001b28:	035a      	lsls	r2, r3, #13
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	e007      	b.n	8001b44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	051a      	lsls	r2, r3, #20
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6899      	ldr	r1, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b86:	025a      	lsls	r2, r3, #9
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	029a      	lsls	r2, r3, #10
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40012300 	.word	0x40012300
 8001bc4:	0f000001 	.word	0x0f000001

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <__NVIC_EnableIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff29 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff3e 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff31 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fc44 	bl	8001684 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e099      	b.n	8001f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	e00f      	b.n	8001e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2a:	f7ff fc2b 	bl	8001684 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d908      	bls.n	8001e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e078      	b.n	8001f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e8      	bne.n	8001e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_DMA_Init+0x158>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4313      	orrs	r3, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0307 	bic.w	r3, r3, #7
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d117      	bne.n	8001f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f9e9 	bl	80022c8 <DMA_CheckFifoParam>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f9a0 	bl	800225c <DMA_CalcBaseAndBitshift>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	f010803f 	.word	0xf010803f

08001f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f54:	4b8e      	ldr	r3, [pc, #568]	; (8002190 <HAL_DMA_IRQHandler+0x248>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a8e      	ldr	r2, [pc, #568]	; (8002194 <HAL_DMA_IRQHandler+0x24c>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2208      	movs	r2, #8
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2204      	movs	r2, #4
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2204      	movs	r2, #4
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2210      	movs	r2, #16
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d043      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2210      	movs	r2, #16
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d018      	beq.n	800208a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e01f      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e016      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2220      	movs	r2, #32
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 808f 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8087 	beq.w	80021e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2220      	movs	r2, #32
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d136      	bne.n	8002160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0216 	bic.w	r2, r2, #22
 8002100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_DMA_IRQHandler+0x1da>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0208 	bic.w	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d07e      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
        }
        return;
 800215e:	e079      	b.n	8002254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01d      	beq.n	80021aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d031      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e02c      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
 800218e:	bf00      	nop
 8002190:	20000000 	.word	0x20000000
 8002194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e01e      	b.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10f      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0210 	bic.w	r2, r2, #16
 80021c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d032      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d022      	beq.n	8002242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2205      	movs	r2, #5
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3301      	adds	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	d307      	bcc.n	8002230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f2      	bne.n	8002214 <HAL_DMA_IRQHandler+0x2cc>
 800222e:	e000      	b.n	8002232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
 8002252:	e000      	b.n	8002256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002254:	bf00      	nop
    }
  }
}
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3b10      	subs	r3, #16
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <DMA_CalcBaseAndBitshift+0x64>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002276:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d909      	bls.n	800229e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	1d1a      	adds	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	659a      	str	r2, [r3, #88]	; 0x58
 800229c:	e007      	b.n	80022ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	aaaaaaab 	.word	0xaaaaaaab
 80022c4:	080061b8 	.word	0x080061b8

080022c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11f      	bne.n	8002322 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d856      	bhi.n	8002396 <DMA_CheckFifoParam+0xce>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <DMA_CheckFifoParam+0x28>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002301 	.word	0x08002301
 80022f4:	08002313 	.word	0x08002313
 80022f8:	08002301 	.word	0x08002301
 80022fc:	08002397 	.word	0x08002397
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d046      	beq.n	800239a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002310:	e043      	b.n	800239a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800231a:	d140      	bne.n	800239e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002320:	e03d      	b.n	800239e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232a:	d121      	bne.n	8002370 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d837      	bhi.n	80023a2 <DMA_CheckFifoParam+0xda>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <DMA_CheckFifoParam+0x70>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002349 	.word	0x08002349
 800233c:	0800234f 	.word	0x0800234f
 8002340:	08002349 	.word	0x08002349
 8002344:	08002361 	.word	0x08002361
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      break;
 800234c:	e030      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d025      	beq.n	80023a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235e:	e022      	b.n	80023a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800236e:	e01c      	b.n	80023aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d903      	bls.n	800237e <DMA_CheckFifoParam+0xb6>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d003      	beq.n	8002384 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800237c:	e018      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
      break;
 8002382:	e015      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00e      	beq.n	80023ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      break;
 8002394:	e00b      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;
 8002396:	bf00      	nop
 8002398:	e00a      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e008      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e006      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e004      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
 80023a8:	e002      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023aa:	bf00      	nop
 80023ac:	e000      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ae:	bf00      	nop
    }
  } 
  
  return status; 
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e165      	b.n	80026a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8154 	bne.w	80026a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80ae 	beq.w	80026a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_GPIO_Init+0x300>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a5c      	ldr	r2, [pc, #368]	; (80026c0 <HAL_GPIO_Init+0x300>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <HAL_GPIO_Init+0x300>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <HAL_GPIO_Init+0x304>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4f      	ldr	r2, [pc, #316]	; (80026c8 <HAL_GPIO_Init+0x308>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x21a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_GPIO_Init+0x30c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x216>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4d      	ldr	r2, [pc, #308]	; (80026d0 <HAL_GPIO_Init+0x310>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x212>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <HAL_GPIO_Init+0x314>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x20e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4b      	ldr	r2, [pc, #300]	; (80026d8 <HAL_GPIO_Init+0x318>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x20a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4a      	ldr	r2, [pc, #296]	; (80026dc <HAL_GPIO_Init+0x31c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x206>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a49      	ldr	r2, [pc, #292]	; (80026e0 <HAL_GPIO_Init+0x320>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x202>
 80025be:	2306      	movs	r3, #6
 80025c0:	e00c      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025c2:	2307      	movs	r3, #7
 80025c4:	e00a      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x304>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_GPIO_Init+0x324>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_GPIO_Init+0x324>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_GPIO_Init+0x324>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <HAL_GPIO_Init+0x324>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f ae96 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40021400 	.word	0x40021400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e12b      	b.n	8002986 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fc92 	bl	800106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	; 0x24
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800277e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002780:	f001 f854 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8002784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a81      	ldr	r2, [pc, #516]	; (8002990 <HAL_I2C_Init+0x274>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d807      	bhi.n	80027a0 <HAL_I2C_Init+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a80      	ldr	r2, [pc, #512]	; (8002994 <HAL_I2C_Init+0x278>)
 8002794:	4293      	cmp	r3, r2
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e006      	b.n	80027ae <HAL_I2C_Init+0x92>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a7d      	ldr	r2, [pc, #500]	; (8002998 <HAL_I2C_Init+0x27c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0e7      	b.n	8002986 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a78      	ldr	r2, [pc, #480]	; (800299c <HAL_I2C_Init+0x280>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	; (8002990 <HAL_I2C_Init+0x274>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <HAL_I2C_Init+0xd4>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	e009      	b.n	8002804 <HAL_I2C_Init+0xe8>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	4a69      	ldr	r2, [pc, #420]	; (80029a0 <HAL_I2C_Init+0x284>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002816:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	495c      	ldr	r1, [pc, #368]	; (8002990 <HAL_I2C_Init+0x274>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d819      	bhi.n	8002858 <HAL_I2C_Init+0x13c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e59      	subs	r1, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002838:	400b      	ands	r3, r1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_I2C_Init+0x138>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e59      	subs	r1, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fbb1 f3f3 	udiv	r3, r1, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002852:	e051      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002854:	2304      	movs	r3, #4
 8002856:	e04f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_I2C_Init+0x168>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_I2C_Init+0x18e>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	0099      	lsls	r1, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x196>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_I2C_Init+0x1bc>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6809      	ldr	r1, [r1, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002926:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6911      	ldr	r1, [r2, #16]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	000186a0 	.word	0x000186a0
 8002994:	001e847f 	.word	0x001e847f
 8002998:	003d08ff 	.word	0x003d08ff
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	460b      	mov	r3, r1
 80029b2:	817b      	strh	r3, [r7, #10]
 80029b4:	4613      	mov	r3, r2
 80029b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7fe fe64 	bl	8001684 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	f040 80e0 	bne.w	8002b8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2319      	movs	r3, #25
 80029d2:	2201      	movs	r2, #1
 80029d4:	4970      	ldr	r1, [pc, #448]	; (8002b98 <HAL_I2C_Master_Transmit+0x1f4>)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fc58 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0d3      	b.n	8002b8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_I2C_Master_Transmit+0x50>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0cc      	b.n	8002b8e <HAL_I2C_Master_Transmit+0x1ea>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d007      	beq.n	8002a1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2221      	movs	r2, #33	; 0x21
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2210      	movs	r2, #16
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	893a      	ldrh	r2, [r7, #8]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <HAL_I2C_Master_Transmit+0x1f8>)
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a5c:	8979      	ldrh	r1, [r7, #10]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	6a3a      	ldr	r2, [r7, #32]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fac2 	bl	8002fec <I2C_MasterRequestWrite>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e08d      	b.n	8002b8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a88:	e066      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	6a39      	ldr	r1, [r7, #32]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fcd2 	bl	8003438 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d107      	bne.n	8002ab2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06b      	b.n	8002b8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d11b      	bne.n	8002b2c <HAL_I2C_Master_Transmit+0x188>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d017      	beq.n	8002b2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	6a39      	ldr	r1, [r7, #32]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fcc2 	bl	80034ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00d      	beq.n	8002b58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d107      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e01a      	b.n	8002b8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d194      	bne.n	8002a8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e000      	b.n	8002b8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	00100002 	.word	0x00100002
 8002b9c:	ffff0000 	.word	0xffff0000

08002ba0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	; 0x30
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	461a      	mov	r2, r3
 8002bac:	460b      	mov	r3, r1
 8002bae:	817b      	strh	r3, [r7, #10]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7fe fd66 	bl	8001684 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	f040 820b 	bne.w	8002fde <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2319      	movs	r3, #25
 8002bce:	2201      	movs	r2, #1
 8002bd0:	497c      	ldr	r1, [pc, #496]	; (8002dc4 <HAL_I2C_Master_Receive+0x224>)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fb5a 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	e1fe      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2C_Master_Receive+0x50>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e1f7      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d007      	beq.n	8002c16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2222      	movs	r2, #34	; 0x22
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2210      	movs	r2, #16
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	893a      	ldrh	r2, [r7, #8]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <HAL_I2C_Master_Receive+0x228>)
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fa46 	bl	80030f0 <I2C_MasterRequestRead>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1b8      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d113      	bne.n	8002c9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e18c      	b.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d11b      	bne.n	8002cde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e16c      	b.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d11b      	bne.n	8002d1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	e14c      	b.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d44:	e138      	b.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	f200 80f1 	bhi.w	8002f32 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d123      	bne.n	8002da0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fbed 	bl	800353c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e139      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d9e:	e10b      	b.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d14e      	bne.n	8002e46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <HAL_I2C_Master_Receive+0x22c>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fa6a 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e10e      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
 8002dc2:	bf00      	nop
 8002dc4:	00100002 	.word	0x00100002
 8002dc8:	ffff0000 	.word	0xffff0000
 8002dcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e44:	e0b8      	b.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4966      	ldr	r1, [pc, #408]	; (8002fe8 <HAL_I2C_Master_Receive+0x448>)
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fa1b 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0bf      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	494f      	ldr	r1, [pc, #316]	; (8002fe8 <HAL_I2C_Master_Receive+0x448>)
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f9ed 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e091      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f30:	e042      	b.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fb00 	bl	800353c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e04c      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d118      	bne.n	8002fb8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f aec2 	bne.w	8002d46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00010004 	.word	0x00010004

08002fec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d006      	beq.n	8003016 <I2C_MasterRequestWrite+0x2a>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d003      	beq.n	8003016 <I2C_MasterRequestWrite+0x2a>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003014:	d108      	bne.n	8003028 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e00b      	b.n	8003040 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	2b12      	cmp	r3, #18
 800302e:	d107      	bne.n	8003040 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f91d 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003066:	d103      	bne.n	8003070 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e035      	b.n	80030e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800307c:	d108      	bne.n	8003090 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800308c:	611a      	str	r2, [r3, #16]
 800308e:	e01b      	b.n	80030c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003090:	897b      	ldrh	r3, [r7, #10]
 8003092:	11db      	asrs	r3, r3, #7
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 0306 	and.w	r3, r3, #6
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f063 030f 	orn	r3, r3, #15
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <I2C_MasterRequestWrite+0xfc>)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f943 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e010      	b.n	80030e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <I2C_MasterRequestWrite+0x100>)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f933 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	00010008 	.word	0x00010008
 80030ec:	00010002 	.word	0x00010002

080030f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	460b      	mov	r3, r1
 80030fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003114:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d006      	beq.n	800312a <I2C_MasterRequestRead+0x3a>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d003      	beq.n	800312a <I2C_MasterRequestRead+0x3a>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003128:	d108      	bne.n	800313c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e00b      	b.n	8003154 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	2b11      	cmp	r3, #17
 8003142:	d107      	bne.n	8003154 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f893 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800317a:	d103      	bne.n	8003184 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e079      	b.n	800327c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003190:	d108      	bne.n	80031a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	e05f      	b.n	8003264 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031a4:	897b      	ldrh	r3, [r7, #10]
 80031a6:	11db      	asrs	r3, r3, #7
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f003 0306 	and.w	r3, r3, #6
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f063 030f 	orn	r3, r3, #15
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4930      	ldr	r1, [pc, #192]	; (8003284 <I2C_MasterRequestRead+0x194>)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8b9 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e054      	b.n	800327c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4929      	ldr	r1, [pc, #164]	; (8003288 <I2C_MasterRequestRead+0x198>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f8a9 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e044      	b.n	800327c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003216:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f831 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323e:	d103      	bne.n	8003248 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e017      	b.n	800327c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	11db      	asrs	r3, r3, #7
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 0306 	and.w	r3, r3, #6
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f063 030e 	orn	r3, r3, #14
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4907      	ldr	r1, [pc, #28]	; (8003288 <I2C_MasterRequestRead+0x198>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f865 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00010008 	.word	0x00010008
 8003288:	00010002 	.word	0x00010002

0800328c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	e025      	b.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d021      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe f9ed 	bl	8001684 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d116      	bne.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e023      	b.n	8003332 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10d      	bne.n	8003310 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	e00c      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	429a      	cmp	r2, r3
 800332e:	d0b6      	beq.n	800329e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003348:	e051      	b.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d123      	bne.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003368:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003372:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e046      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe f96b 	bl	8001684 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e020      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10c      	bne.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	e00b      	b.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d18d      	bne.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003444:	e02d      	b.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f8ce 	bl	80035e8 <I2C_IsAcknowledgeFailed>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e02d      	b.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d021      	beq.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345e:	f7fe f911 	bl	8001684 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e007      	b.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d1ca      	bne.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c6:	e02d      	b.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f88d 	bl	80035e8 <I2C_IsAcknowledgeFailed>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e02d      	b.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d021      	beq.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7fe f8d0 	bl	8001684 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e007      	b.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b04      	cmp	r3, #4
 8003530:	d1ca      	bne.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003548:	e042      	b.n	80035d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b10      	cmp	r3, #16
 8003556:	d119      	bne.n	800358c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0210 	mvn.w	r2, #16
 8003560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e029      	b.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358c:	f7fe f87a 	bl	8001684 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d1b5      	bne.n	800354a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	d11b      	bne.n	8003638 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003608:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0cc      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d90c      	bls.n	8003684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a58      	ldr	r2, [pc, #352]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a52      	ldr	r2, [pc, #328]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d044      	beq.n	8003768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d119      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d003      	beq.n	8003706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003702:	2b03      	cmp	r3, #3
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	4b3f      	ldr	r3, [pc, #252]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e067      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f023 0203 	bic.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4934      	ldr	r1, [pc, #208]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003738:	f7fd ffa4 	bl	8001684 <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003740:	f7fd ffa0 	bl	8001684 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e04f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 020c 	and.w	r2, r3, #12
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	429a      	cmp	r2, r3
 8003766:	d1eb      	bne.n	8003740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003768:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d20c      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f855 	bl	800387c <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	; (8003808 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_ClockConfig+0x1c8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd ff04 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
 8003808:	080061a0 	.word	0x080061a0
 800380c:	20000000 	.word	0x20000000
 8003810:	20000004 	.word	0x20000004

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_RCC_GetHCLKFreq+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000000 	.word	0x20000000

0800382c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003830:	f7ff fff0 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	080061b0 	.word	0x080061b0

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff ffdc 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0b5b      	lsrs	r3, r3, #13
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	080061b0 	.word	0x080061b0

0800387c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800387c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003880:	b0ae      	sub	sp, #184	; 0xb8
 8003882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a2:	4bcb      	ldr	r3, [pc, #812]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	f200 8206 	bhi.w	8003cbc <HAL_RCC_GetSysClockFreq+0x440>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	08003cbd 	.word	0x08003cbd
 80038c0:	08003cbd 	.word	0x08003cbd
 80038c4:	08003cbd 	.word	0x08003cbd
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	08003cbd 	.word	0x08003cbd
 80038d0:	08003cbd 	.word	0x08003cbd
 80038d4:	08003cbd 	.word	0x08003cbd
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	08003cbd 	.word	0x08003cbd
 80038e0:	08003cbd 	.word	0x08003cbd
 80038e4:	08003cbd 	.word	0x08003cbd
 80038e8:	08003aed 	.word	0x08003aed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4bb9      	ldr	r3, [pc, #740]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80038f2:	e1e7      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f4:	4bb8      	ldr	r3, [pc, #736]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80038fa:	e1e3      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038fc:	4bb4      	ldr	r3, [pc, #720]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003908:	4bb1      	ldr	r3, [pc, #708]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d071      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003914:	4bae      	ldr	r3, [pc, #696]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003920:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	0159      	lsls	r1, r3, #5
 8003948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394c:	0150      	lsls	r0, r2, #5
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4621      	mov	r1, r4
 8003954:	1a51      	subs	r1, r2, r1
 8003956:	6439      	str	r1, [r7, #64]	; 0x40
 8003958:	4629      	mov	r1, r5
 800395a:	eb63 0301 	sbc.w	r3, r3, r1
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800396c:	4649      	mov	r1, r9
 800396e:	018b      	lsls	r3, r1, #6
 8003970:	4641      	mov	r1, r8
 8003972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003976:	4641      	mov	r1, r8
 8003978:	018a      	lsls	r2, r1, #6
 800397a:	4641      	mov	r1, r8
 800397c:	1a51      	subs	r1, r2, r1
 800397e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003980:	4649      	mov	r1, r9
 8003982:	eb63 0301 	sbc.w	r3, r3, r1
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003994:	4649      	mov	r1, r9
 8003996:	00cb      	lsls	r3, r1, #3
 8003998:	4641      	mov	r1, r8
 800399a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800399e:	4641      	mov	r1, r8
 80039a0:	00ca      	lsls	r2, r1, #3
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	4622      	mov	r2, r4
 80039aa:	189b      	adds	r3, r3, r2
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
 80039ae:	462b      	mov	r3, r5
 80039b0:	460a      	mov	r2, r1
 80039b2:	eb42 0303 	adc.w	r3, r2, r3
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039c4:	4629      	mov	r1, r5
 80039c6:	024b      	lsls	r3, r1, #9
 80039c8:	4621      	mov	r1, r4
 80039ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039ce:	4621      	mov	r1, r4
 80039d0:	024a      	lsls	r2, r1, #9
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80039e8:	f7fc fc62 	bl	80002b0 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039f6:	e067      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f8:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a12:	2300      	movs	r3, #0
 8003a14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	0159      	lsls	r1, r3, #5
 8003a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2c:	0150      	lsls	r0, r2, #5
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4621      	mov	r1, r4
 8003a34:	1a51      	subs	r1, r2, r1
 8003a36:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a38:	4629      	mov	r1, r5
 8003a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	018b      	lsls	r3, r1, #6
 8003a50:	4641      	mov	r1, r8
 8003a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a56:	4641      	mov	r1, r8
 8003a58:	018a      	lsls	r2, r1, #6
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a60:	4649      	mov	r1, r9
 8003a62:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a7a:	4692      	mov	sl, r2
 8003a7c:	469b      	mov	fp, r3
 8003a7e:	4623      	mov	r3, r4
 8003a80:	eb1a 0303 	adds.w	r3, sl, r3
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	462b      	mov	r3, r5
 8003a88:	eb4b 0303 	adc.w	r3, fp, r3
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	028b      	lsls	r3, r1, #10
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	028a      	lsls	r2, r1, #10
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ab4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ab6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003aba:	f7fc fbf9 	bl	80002b0 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003aea:	e0eb      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aec:	4b38      	ldr	r3, [pc, #224]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af8:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d06b      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b04:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b16:	663b      	str	r3, [r7, #96]	; 0x60
 8003b18:	2300      	movs	r3, #0
 8003b1a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b20:	4622      	mov	r2, r4
 8003b22:	462b      	mov	r3, r5
 8003b24:	f04f 0000 	mov.w	r0, #0
 8003b28:	f04f 0100 	mov.w	r1, #0
 8003b2c:	0159      	lsls	r1, r3, #5
 8003b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b32:	0150      	lsls	r0, r2, #5
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4621      	mov	r1, r4
 8003b3a:	1a51      	subs	r1, r2, r1
 8003b3c:	61b9      	str	r1, [r7, #24]
 8003b3e:	4629      	mov	r1, r5
 8003b40:	eb63 0301 	sbc.w	r3, r3, r1
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b52:	4659      	mov	r1, fp
 8003b54:	018b      	lsls	r3, r1, #6
 8003b56:	4651      	mov	r1, sl
 8003b58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	018a      	lsls	r2, r1, #6
 8003b60:	4651      	mov	r1, sl
 8003b62:	ebb2 0801 	subs.w	r8, r2, r1
 8003b66:	4659      	mov	r1, fp
 8003b68:	eb63 0901 	sbc.w	r9, r3, r1
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b80:	4690      	mov	r8, r2
 8003b82:	4699      	mov	r9, r3
 8003b84:	4623      	mov	r3, r4
 8003b86:	eb18 0303 	adds.w	r3, r8, r3
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	eb49 0303 	adc.w	r3, r9, r3
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	024b      	lsls	r3, r1, #9
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003baa:	4621      	mov	r1, r4
 8003bac:	024a      	lsls	r2, r1, #9
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bc0:	f7fc fb76 	bl	80002b0 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bce:	e065      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x420>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bdc:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	2200      	movs	r2, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	4611      	mov	r1, r2
 8003be8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bec:	653b      	str	r3, [r7, #80]	; 0x50
 8003bee:	2300      	movs	r3, #0
 8003bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003bf6:	4642      	mov	r2, r8
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	0159      	lsls	r1, r3, #5
 8003c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c08:	0150      	lsls	r0, r2, #5
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4641      	mov	r1, r8
 8003c10:	1a51      	subs	r1, r2, r1
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	4649      	mov	r1, r9
 8003c16:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c28:	4659      	mov	r1, fp
 8003c2a:	018b      	lsls	r3, r1, #6
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c32:	4651      	mov	r1, sl
 8003c34:	018a      	lsls	r2, r1, #6
 8003c36:	4651      	mov	r1, sl
 8003c38:	1a54      	subs	r4, r2, r1
 8003c3a:	4659      	mov	r1, fp
 8003c3c:	eb63 0501 	sbc.w	r5, r3, r1
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	00eb      	lsls	r3, r5, #3
 8003c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c4e:	00e2      	lsls	r2, r4, #3
 8003c50:	4614      	mov	r4, r2
 8003c52:	461d      	mov	r5, r3
 8003c54:	4643      	mov	r3, r8
 8003c56:	18e3      	adds	r3, r4, r3
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	eb45 0303 	adc.w	r3, r5, r3
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	028b      	lsls	r3, r1, #10
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c78:	4621      	mov	r1, r4
 8003c7a:	028a      	lsls	r2, r1, #10
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c84:	2200      	movs	r2, #0
 8003c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c8e:	f7fc fb0f 	bl	80002b0 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4613      	mov	r3, r2
 8003c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0f1b      	lsrs	r3, r3, #28
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	37b8      	adds	r7, #184	; 0xb8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	00f42400 	.word	0x00f42400

08003cdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e28d      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8083 	beq.w	8003e02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cfc:	4b94      	ldr	r3, [pc, #592]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d019      	beq.n	8003d3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d08:	4b91      	ldr	r3, [pc, #580]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d14:	4b8e      	ldr	r3, [pc, #568]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d20:	d00c      	beq.n	8003d3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d22:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d112      	bne.n	8003d54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2e:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3c:	4b84      	ldr	r3, [pc, #528]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d05b      	beq.n	8003e00 <HAL_RCC_OscConfig+0x124>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d157      	bne.n	8003e00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e25a      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCC_OscConfig+0x90>
 8003d5e:	4b7c      	ldr	r3, [pc, #496]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7b      	ldr	r2, [pc, #492]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e01d      	b.n	8003da8 <HAL_RCC_OscConfig+0xcc>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0xb4>
 8003d76:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a75      	ldr	r2, [pc, #468]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b73      	ldr	r3, [pc, #460]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a72      	ldr	r2, [pc, #456]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0xcc>
 8003d90:	4b6f      	ldr	r3, [pc, #444]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a6e      	ldr	r2, [pc, #440]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6b      	ldr	r2, [pc, #428]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd fc68 	bl	8001684 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fd fc64 	bl	8001684 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e21f      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0xdc>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fd fc54 	bl	8001684 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de0:	f7fd fc50 	bl	8001684 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e20b      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	4b57      	ldr	r3, [pc, #348]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x104>
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d06f      	beq.n	8003eee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e0e:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e1a:	4b4d      	ldr	r3, [pc, #308]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d105      	bne.n	8003e32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e26:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d11c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3e:	4b44      	ldr	r3, [pc, #272]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d116      	bne.n	8003e78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_RCC_OscConfig+0x186>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e1d3      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4937      	ldr	r1, [pc, #220]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	e03a      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e80:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_OscConfig+0x278>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fd fbfd 	bl	8001684 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8e:	f7fd fbf9 	bl	8001684 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e1b4      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eac:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4925      	ldr	r1, [pc, #148]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
 8003ec0:	e015      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCC_OscConfig+0x278>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fbdc 	bl	8001684 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fd fbd8 	bl	8001684 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e193      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d036      	beq.n	8003f68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d016      	beq.n	8003f30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd fbbc 	bl	8001684 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f10:	f7fd fbb8 	bl	8001684 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e173      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_OscConfig+0x274>)
 8003f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x234>
 8003f2e:	e01b      	b.n	8003f68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7fd fba5 	bl	8001684 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	e00e      	b.n	8003f5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3e:	f7fd fba1 	bl	8001684 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d907      	bls.n	8003f5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e15c      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
 8003f50:	40023800 	.word	0x40023800
 8003f54:	42470000 	.word	0x42470000
 8003f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	4b8a      	ldr	r3, [pc, #552]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ea      	bne.n	8003f3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8097 	beq.w	80040a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b83      	ldr	r3, [pc, #524]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a7e      	ldr	r2, [pc, #504]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
 8003f96:	4b7c      	ldr	r3, [pc, #496]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b79      	ldr	r3, [pc, #484]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a75      	ldr	r2, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fd fb61 	bl	8001684 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fd fb5d 	bl	8001684 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e118      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b6c      	ldr	r3, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x4b0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x31e>
 8003fec:	4b66      	ldr	r3, [pc, #408]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a65      	ldr	r2, [pc, #404]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff8:	e01c      	b.n	8004034 <HAL_RCC_OscConfig+0x358>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x340>
 8004002:	4b61      	ldr	r3, [pc, #388]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a60      	ldr	r2, [pc, #384]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004008:	f043 0304 	orr.w	r3, r3, #4
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
 800400e:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a5d      	ldr	r2, [pc, #372]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0x358>
 800401c:	4b5a      	ldr	r3, [pc, #360]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a59      	ldr	r2, [pc, #356]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	4b57      	ldr	r3, [pc, #348]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a56      	ldr	r2, [pc, #344]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 800402e:	f023 0304 	bic.w	r3, r3, #4
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d015      	beq.n	8004068 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd fb22 	bl	8001684 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	e00a      	b.n	800405a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7fd fb1e 	bl	8001684 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0d7      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ee      	beq.n	8004044 <HAL_RCC_OscConfig+0x368>
 8004066:	e014      	b.n	8004092 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fd fb0c 	bl	8001684 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fd fb08 	bl	8001684 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0c1      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	4b40      	ldr	r3, [pc, #256]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1ee      	bne.n	8004070 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d105      	bne.n	80040a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004098:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	4a3a      	ldr	r2, [pc, #232]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 800409e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80ad 	beq.w	8004208 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ae:	4b36      	ldr	r3, [pc, #216]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d060      	beq.n	800417c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d145      	bne.n	800414e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b33      	ldr	r3, [pc, #204]	; (8004190 <HAL_RCC_OscConfig+0x4b4>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fd fadc 	bl	8001684 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fd fad8 	bl	8001684 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e093      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	4b29      	ldr	r3, [pc, #164]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	491b      	ldr	r1, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x4b4>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd faad 	bl	8001684 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412e:	f7fd faa9 	bl	8001684 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e064      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x452>
 800414c:	e05c      	b.n	8004208 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x4b4>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd fa96 	bl	8001684 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fa92 	bl	8001684 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e04d      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x4ac>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x480>
 800417a:	e045      	b.n	8004208 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e040      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
 8004190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <HAL_RCC_OscConfig+0x538>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d030      	beq.n	8004204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d129      	bne.n	8004204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d122      	bne.n	8004204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d119      	bne.n	8004204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d10f      	bne.n	8004204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800

08004218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e041      	b.n	80042ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc ff7c 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 face 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e041      	b.n	800434c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fc ff0d 	bl	80010fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 fa7f 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_TIM_PWM_Start+0x24>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e022      	b.n	80043be <HAL_TIM_PWM_Start+0x6a>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d109      	bne.n	8004392 <HAL_TIM_PWM_Start+0x3e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e015      	b.n	80043be <HAL_TIM_PWM_Start+0x6a>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b08      	cmp	r3, #8
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start+0x58>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e008      	b.n	80043be <HAL_TIM_PWM_Start+0x6a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07c      	b.n	80044c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x82>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d4:	e013      	b.n	80043fe <HAL_TIM_PWM_Start+0xaa>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0x92>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	e00b      	b.n	80043fe <HAL_TIM_PWM_Start+0xaa>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f4:	e003      	b.n	80043fe <HAL_TIM_PWM_Start+0xaa>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fce0 	bl	8004dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <HAL_TIM_PWM_Start+0x174>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_TIM_PWM_Start+0xcc>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2c      	ldr	r2, [pc, #176]	; (80044cc <HAL_TIM_PWM_Start+0x178>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <HAL_TIM_PWM_Start+0xd0>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_TIM_PWM_Start+0xd2>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004438:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <HAL_TIM_PWM_Start+0x174>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_TIM_PWM_Start+0x136>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d01d      	beq.n	800448a <HAL_TIM_PWM_Start+0x136>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <HAL_TIM_PWM_Start+0x17c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d018      	beq.n	800448a <HAL_TIM_PWM_Start+0x136>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_TIM_PWM_Start+0x180>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_TIM_PWM_Start+0x136>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <HAL_TIM_PWM_Start+0x184>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00e      	beq.n	800448a <HAL_TIM_PWM_Start+0x136>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_TIM_PWM_Start+0x178>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_TIM_PWM_Start+0x136>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_TIM_PWM_Start+0x188>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_TIM_PWM_Start+0x136>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <HAL_TIM_PWM_Start+0x18c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d111      	bne.n	80044ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b06      	cmp	r3, #6
 800449a:	d010      	beq.n	80044be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ac:	e007      	b.n	80044be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40001800 	.word	0x40001800

080044e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044fe:	2302      	movs	r3, #2
 8004500:	e0ae      	b.n	8004660 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b0c      	cmp	r3, #12
 800450e:	f200 809f 	bhi.w	8004650 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800454d 	.word	0x0800454d
 800451c:	08004651 	.word	0x08004651
 8004520:	08004651 	.word	0x08004651
 8004524:	08004651 	.word	0x08004651
 8004528:	0800458d 	.word	0x0800458d
 800452c:	08004651 	.word	0x08004651
 8004530:	08004651 	.word	0x08004651
 8004534:	08004651 	.word	0x08004651
 8004538:	080045cf 	.word	0x080045cf
 800453c:	08004651 	.word	0x08004651
 8004540:	08004651 	.word	0x08004651
 8004544:	08004651 	.word	0x08004651
 8004548:	0800460f 	.word	0x0800460f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f9f0 	bl	8004938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0208 	orr.w	r2, r2, #8
 8004566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6999      	ldr	r1, [r3, #24]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	619a      	str	r2, [r3, #24]
      break;
 800458a:	e064      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fa40 	bl	8004a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6999      	ldr	r1, [r3, #24]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
      break;
 80045cc:	e043      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fa95 	bl	8004b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0208 	orr.w	r2, r2, #8
 80045e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0204 	bic.w	r2, r2, #4
 80045f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69d9      	ldr	r1, [r3, #28]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	61da      	str	r2, [r3, #28]
      break;
 800460c:	e023      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fae9 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	021a      	lsls	r2, r3, #8
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	61da      	str	r2, [r3, #28]
      break;
 800464e:	e002      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
      break;
 8004654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIM_ConfigClockSource+0x1c>
 8004680:	2302      	movs	r3, #2
 8004682:	e0b4      	b.n	80047ee <HAL_TIM_ConfigClockSource+0x186>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046bc:	d03e      	beq.n	800473c <HAL_TIM_ConfigClockSource+0xd4>
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	f200 8087 	bhi.w	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	f000 8086 	beq.w	80047da <HAL_TIM_ConfigClockSource+0x172>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d2:	d87f      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d01a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0xa6>
 80046d8:	2b70      	cmp	r3, #112	; 0x70
 80046da:	d87b      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d050      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x11a>
 80046e0:	2b60      	cmp	r3, #96	; 0x60
 80046e2:	d877      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d03c      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0xfa>
 80046e8:	2b50      	cmp	r3, #80	; 0x50
 80046ea:	d873      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d058      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x13a>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d86f      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d064      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d86b      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d060      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d867      	bhi.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05c      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004708:	2b10      	cmp	r3, #16
 800470a:	d05a      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	e062      	b.n	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f000 fb35 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004730:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]
      break;
 800473a:	e04f      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f000 fb1e 	bl	8004d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475e:	609a      	str	r2, [r3, #8]
      break;
 8004760:	e03c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	461a      	mov	r2, r3
 8004770:	f000 fa92 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2150      	movs	r1, #80	; 0x50
 800477a:	4618      	mov	r0, r3
 800477c:	f000 faeb 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004780:	e02c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	461a      	mov	r2, r3
 8004790:	f000 fab1 	bl	8004cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2160      	movs	r1, #96	; 0x60
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fadb 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 80047a0:	e01c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 fa72 	bl	8004c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 facb 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 80047c0:	e00c      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 fac2 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 80047d2:	e003      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e000      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a40      	ldr	r2, [pc, #256]	; (800490c <TIM_Base_SetConfig+0x114>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d00f      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3d      	ldr	r2, [pc, #244]	; (8004910 <TIM_Base_SetConfig+0x118>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3c      	ldr	r2, [pc, #240]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3b      	ldr	r2, [pc, #236]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3a      	ldr	r2, [pc, #232]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2f      	ldr	r2, [pc, #188]	; (800490c <TIM_Base_SetConfig+0x114>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d02b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d027      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <TIM_Base_SetConfig+0x118>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d023      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01f      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a29      	ldr	r2, [pc, #164]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d017      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a28      	ldr	r2, [pc, #160]	; (8004920 <TIM_Base_SetConfig+0x128>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_Base_SetConfig+0x12c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00f      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_Base_SetConfig+0x130>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00b      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a25      	ldr	r2, [pc, #148]	; (800492c <TIM_Base_SetConfig+0x134>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d007      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <TIM_Base_SetConfig+0x138>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a23      	ldr	r2, [pc, #140]	; (8004934 <TIM_Base_SetConfig+0x13c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d108      	bne.n	80048bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <TIM_Base_SetConfig+0x114>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a0c      	ldr	r2, [pc, #48]	; (800491c <TIM_Base_SetConfig+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40010400 	.word	0x40010400
 8004920:	40014000 	.word	0x40014000
 8004924:	40014400 	.word	0x40014400
 8004928:	40014800 	.word	0x40014800
 800492c:	40001800 	.word	0x40001800
 8004930:	40001c00 	.word	0x40001c00
 8004934:	40002000 	.word	0x40002000

08004938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <TIM_OC1_SetConfig+0xd8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_OC1_SetConfig+0x64>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <TIM_OC1_SetConfig+0xdc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10c      	bne.n	80049b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0308 	bic.w	r3, r3, #8
 80049a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 0304 	bic.w	r3, r3, #4
 80049b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <TIM_OC1_SetConfig+0xd8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_OC1_SetConfig+0x8e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <TIM_OC1_SetConfig+0xdc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d111      	bne.n	80049ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40010400 	.word	0x40010400

08004a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0320 	bic.w	r3, r3, #32
 8004a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a22      	ldr	r2, [pc, #136]	; (8004afc <TIM_OC2_SetConfig+0xe4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC2_SetConfig+0x68>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <TIM_OC2_SetConfig+0xe8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10d      	bne.n	8004a9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <TIM_OC2_SetConfig+0xe4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_OC2_SetConfig+0x94>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <TIM_OC2_SetConfig+0xe8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d113      	bne.n	8004ad4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40010400 	.word	0x40010400

08004b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <TIM_OC3_SetConfig+0xe0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_OC3_SetConfig+0x66>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <TIM_OC3_SetConfig+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10d      	bne.n	8004b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <TIM_OC3_SetConfig+0xe0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC3_SetConfig+0x92>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_OC3_SetConfig+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d113      	bne.n	8004bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <TIM_OC4_SetConfig+0xa4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_OC4_SetConfig+0x68>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <TIM_OC4_SetConfig+0xa8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d109      	bne.n	8004c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	019b      	lsls	r3, r3, #6
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0210 	bic.w	r2, r3, #16
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2201      	movs	r2, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e05a      	b.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d01d      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d018      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1a      	ldr	r2, [pc, #104]	; (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40001800 	.word	0x40001800

08004f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e03d      	b.n	8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e03f      	b.n	8005046 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc f9c8 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2224      	movs	r2, #36	; 0x24
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f929 	bl	8005250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800500c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800501c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800502c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08a      	sub	sp, #40	; 0x28
 8005052:	af02      	add	r7, sp, #8
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b20      	cmp	r3, #32
 800506c:	d17c      	bne.n	8005168 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_UART_Transmit+0x2c>
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e075      	b.n	800516a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_UART_Transmit+0x3e>
 8005088:	2302      	movs	r3, #2
 800508a:	e06e      	b.n	800516a <HAL_UART_Transmit+0x11c>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2221      	movs	r2, #33	; 0x21
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050a2:	f7fc faef 	bl	8001684 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050bc:	d108      	bne.n	80050d0 <HAL_UART_Transmit+0x82>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	e003      	b.n	80050d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050e0:	e02a      	b.n	8005138 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f840 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e036      	b.n	800516a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	3302      	adds	r3, #2
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	e007      	b.n	800512a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	781a      	ldrb	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	3301      	adds	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1cf      	bne.n	80050e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2200      	movs	r2, #0
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f810 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e006      	b.n	800516a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b090      	sub	sp, #64	; 0x40
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	e050      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d04c      	beq.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005192:	f7fc fa77 	bl	8001684 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800519e:	429a      	cmp	r2, r3
 80051a0:	d241      	bcs.n	8005226 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051c2:	637a      	str	r2, [r7, #52]	; 0x34
 80051c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e5      	bne.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	613b      	str	r3, [r7, #16]
   return(result);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051f6:	623a      	str	r2, [r7, #32]
 80051f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	69f9      	ldr	r1, [r7, #28]
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	61bb      	str	r3, [r7, #24]
   return(result);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e00f      	b.n	8005246 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	429a      	cmp	r2, r3
 8005242:	d09f      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3740      	adds	r7, #64	; 0x40
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005254:	b0c0      	sub	sp, #256	; 0x100
 8005256:	af00      	add	r7, sp, #0
 8005258:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	68d9      	ldr	r1, [r3, #12]
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	ea40 0301 	orr.w	r3, r0, r1
 8005278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	431a      	orrs	r2, r3
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	431a      	orrs	r2, r3
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052a8:	f021 010c 	bic.w	r1, r1, #12
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052b6:	430b      	orrs	r3, r1
 80052b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	6999      	ldr	r1, [r3, #24]
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	ea40 0301 	orr.w	r3, r0, r1
 80052d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b8f      	ldr	r3, [pc, #572]	; (800551c <UART_SetConfig+0x2cc>)
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d005      	beq.n	80052f0 <UART_SetConfig+0xa0>
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b8d      	ldr	r3, [pc, #564]	; (8005520 <UART_SetConfig+0x2d0>)
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d104      	bne.n	80052fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe fab0 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 80052f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052f8:	e003      	b.n	8005302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052fa:	f7fe fa97 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 80052fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530c:	f040 810c 	bne.w	8005528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800531a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800531e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005322:	4622      	mov	r2, r4
 8005324:	462b      	mov	r3, r5
 8005326:	1891      	adds	r1, r2, r2
 8005328:	65b9      	str	r1, [r7, #88]	; 0x58
 800532a:	415b      	adcs	r3, r3
 800532c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800532e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005332:	4621      	mov	r1, r4
 8005334:	eb12 0801 	adds.w	r8, r2, r1
 8005338:	4629      	mov	r1, r5
 800533a:	eb43 0901 	adc.w	r9, r3, r1
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800534a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800534e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005352:	4690      	mov	r8, r2
 8005354:	4699      	mov	r9, r3
 8005356:	4623      	mov	r3, r4
 8005358:	eb18 0303 	adds.w	r3, r8, r3
 800535c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005360:	462b      	mov	r3, r5
 8005362:	eb49 0303 	adc.w	r3, r9, r3
 8005366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005376:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800537a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800537e:	460b      	mov	r3, r1
 8005380:	18db      	adds	r3, r3, r3
 8005382:	653b      	str	r3, [r7, #80]	; 0x50
 8005384:	4613      	mov	r3, r2
 8005386:	eb42 0303 	adc.w	r3, r2, r3
 800538a:	657b      	str	r3, [r7, #84]	; 0x54
 800538c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005394:	f7fa ff8c 	bl	80002b0 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4b61      	ldr	r3, [pc, #388]	; (8005524 <UART_SetConfig+0x2d4>)
 800539e:	fba3 2302 	umull	r2, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	011c      	lsls	r4, r3, #4
 80053a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	1891      	adds	r1, r2, r2
 80053be:	64b9      	str	r1, [r7, #72]	; 0x48
 80053c0:	415b      	adcs	r3, r3
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053c8:	4641      	mov	r1, r8
 80053ca:	eb12 0a01 	adds.w	sl, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb43 0b01 	adc.w	fp, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053e8:	4692      	mov	sl, r2
 80053ea:	469b      	mov	fp, r3
 80053ec:	4643      	mov	r3, r8
 80053ee:	eb1a 0303 	adds.w	r3, sl, r3
 80053f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053f6:	464b      	mov	r3, r9
 80053f8:	eb4b 0303 	adc.w	r3, fp, r3
 80053fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800540c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005414:	460b      	mov	r3, r1
 8005416:	18db      	adds	r3, r3, r3
 8005418:	643b      	str	r3, [r7, #64]	; 0x40
 800541a:	4613      	mov	r3, r2
 800541c:	eb42 0303 	adc.w	r3, r2, r3
 8005420:	647b      	str	r3, [r7, #68]	; 0x44
 8005422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800542a:	f7fa ff41 	bl	80002b0 <__aeabi_uldivmod>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4611      	mov	r1, r2
 8005434:	4b3b      	ldr	r3, [pc, #236]	; (8005524 <UART_SetConfig+0x2d4>)
 8005436:	fba3 2301 	umull	r2, r3, r3, r1
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	2264      	movs	r2, #100	; 0x64
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	1acb      	subs	r3, r1, r3
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800544a:	4b36      	ldr	r3, [pc, #216]	; (8005524 <UART_SetConfig+0x2d4>)
 800544c:	fba3 2302 	umull	r2, r3, r3, r2
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005458:	441c      	add	r4, r3
 800545a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545e:	2200      	movs	r2, #0
 8005460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005464:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	1891      	adds	r1, r2, r2
 8005472:	63b9      	str	r1, [r7, #56]	; 0x38
 8005474:	415b      	adcs	r3, r3
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800547c:	4641      	mov	r1, r8
 800547e:	1851      	adds	r1, r2, r1
 8005480:	6339      	str	r1, [r7, #48]	; 0x30
 8005482:	4649      	mov	r1, r9
 8005484:	414b      	adcs	r3, r1
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005494:	4659      	mov	r1, fp
 8005496:	00cb      	lsls	r3, r1, #3
 8005498:	4651      	mov	r1, sl
 800549a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549e:	4651      	mov	r1, sl
 80054a0:	00ca      	lsls	r2, r1, #3
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	4642      	mov	r2, r8
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b0:	464b      	mov	r3, r9
 80054b2:	460a      	mov	r2, r1
 80054b4:	eb42 0303 	adc.w	r3, r2, r3
 80054b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054d0:	460b      	mov	r3, r1
 80054d2:	18db      	adds	r3, r3, r3
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d6:	4613      	mov	r3, r2
 80054d8:	eb42 0303 	adc.w	r3, r2, r3
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054e6:	f7fa fee3 	bl	80002b0 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <UART_SetConfig+0x2d4>)
 80054f0:	fba3 1302 	umull	r1, r3, r3, r2
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	2164      	movs	r1, #100	; 0x64
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	3332      	adds	r3, #50	; 0x32
 8005502:	4a08      	ldr	r2, [pc, #32]	; (8005524 <UART_SetConfig+0x2d4>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	f003 0207 	and.w	r2, r3, #7
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4422      	add	r2, r4
 8005516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005518:	e105      	b.n	8005726 <UART_SetConfig+0x4d6>
 800551a:	bf00      	nop
 800551c:	40011000 	.word	0x40011000
 8005520:	40011400 	.word	0x40011400
 8005524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552c:	2200      	movs	r2, #0
 800552e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005532:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800553a:	4642      	mov	r2, r8
 800553c:	464b      	mov	r3, r9
 800553e:	1891      	adds	r1, r2, r2
 8005540:	6239      	str	r1, [r7, #32]
 8005542:	415b      	adcs	r3, r3
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800554a:	4641      	mov	r1, r8
 800554c:	1854      	adds	r4, r2, r1
 800554e:	4649      	mov	r1, r9
 8005550:	eb43 0501 	adc.w	r5, r3, r1
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	00eb      	lsls	r3, r5, #3
 800555e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005562:	00e2      	lsls	r2, r4, #3
 8005564:	4614      	mov	r4, r2
 8005566:	461d      	mov	r5, r3
 8005568:	4643      	mov	r3, r8
 800556a:	18e3      	adds	r3, r4, r3
 800556c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005570:	464b      	mov	r3, r9
 8005572:	eb45 0303 	adc.w	r3, r5, r3
 8005576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800557a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005596:	4629      	mov	r1, r5
 8005598:	008b      	lsls	r3, r1, #2
 800559a:	4621      	mov	r1, r4
 800559c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055a0:	4621      	mov	r1, r4
 80055a2:	008a      	lsls	r2, r1, #2
 80055a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055a8:	f7fa fe82 	bl	80002b0 <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4b60      	ldr	r3, [pc, #384]	; (8005734 <UART_SetConfig+0x4e4>)
 80055b2:	fba3 2302 	umull	r2, r3, r3, r2
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	011c      	lsls	r4, r3, #4
 80055ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	1891      	adds	r1, r2, r2
 80055d2:	61b9      	str	r1, [r7, #24]
 80055d4:	415b      	adcs	r3, r3
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055dc:	4641      	mov	r1, r8
 80055de:	1851      	adds	r1, r2, r1
 80055e0:	6139      	str	r1, [r7, #16]
 80055e2:	4649      	mov	r1, r9
 80055e4:	414b      	adcs	r3, r1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f4:	4659      	mov	r1, fp
 80055f6:	00cb      	lsls	r3, r1, #3
 80055f8:	4651      	mov	r1, sl
 80055fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055fe:	4651      	mov	r1, sl
 8005600:	00ca      	lsls	r2, r1, #3
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	4603      	mov	r3, r0
 8005608:	4642      	mov	r2, r8
 800560a:	189b      	adds	r3, r3, r2
 800560c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005610:	464b      	mov	r3, r9
 8005612:	460a      	mov	r2, r1
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	67bb      	str	r3, [r7, #120]	; 0x78
 8005626:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005634:	4649      	mov	r1, r9
 8005636:	008b      	lsls	r3, r1, #2
 8005638:	4641      	mov	r1, r8
 800563a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800563e:	4641      	mov	r1, r8
 8005640:	008a      	lsls	r2, r1, #2
 8005642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005646:	f7fa fe33 	bl	80002b0 <__aeabi_uldivmod>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4b39      	ldr	r3, [pc, #228]	; (8005734 <UART_SetConfig+0x4e4>)
 8005650:	fba3 1302 	umull	r1, r3, r3, r2
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	2164      	movs	r1, #100	; 0x64
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	3332      	adds	r3, #50	; 0x32
 8005662:	4a34      	ldr	r2, [pc, #208]	; (8005734 <UART_SetConfig+0x4e4>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566e:	441c      	add	r4, r3
 8005670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005674:	2200      	movs	r2, #0
 8005676:	673b      	str	r3, [r7, #112]	; 0x70
 8005678:	677a      	str	r2, [r7, #116]	; 0x74
 800567a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800567e:	4642      	mov	r2, r8
 8005680:	464b      	mov	r3, r9
 8005682:	1891      	adds	r1, r2, r2
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	415b      	adcs	r3, r3
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800568e:	4641      	mov	r1, r8
 8005690:	1851      	adds	r1, r2, r1
 8005692:	6039      	str	r1, [r7, #0]
 8005694:	4649      	mov	r1, r9
 8005696:	414b      	adcs	r3, r1
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056a6:	4659      	mov	r1, fp
 80056a8:	00cb      	lsls	r3, r1, #3
 80056aa:	4651      	mov	r1, sl
 80056ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b0:	4651      	mov	r1, sl
 80056b2:	00ca      	lsls	r2, r1, #3
 80056b4:	4610      	mov	r0, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	4603      	mov	r3, r0
 80056ba:	4642      	mov	r2, r8
 80056bc:	189b      	adds	r3, r3, r2
 80056be:	66bb      	str	r3, [r7, #104]	; 0x68
 80056c0:	464b      	mov	r3, r9
 80056c2:	460a      	mov	r2, r1
 80056c4:	eb42 0303 	adc.w	r3, r2, r3
 80056c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	663b      	str	r3, [r7, #96]	; 0x60
 80056d4:	667a      	str	r2, [r7, #100]	; 0x64
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056e2:	4649      	mov	r1, r9
 80056e4:	008b      	lsls	r3, r1, #2
 80056e6:	4641      	mov	r1, r8
 80056e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ec:	4641      	mov	r1, r8
 80056ee:	008a      	lsls	r2, r1, #2
 80056f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056f4:	f7fa fddc 	bl	80002b0 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <UART_SetConfig+0x4e4>)
 80056fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2164      	movs	r1, #100	; 0x64
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	3332      	adds	r3, #50	; 0x32
 8005710:	4a08      	ldr	r2, [pc, #32]	; (8005734 <UART_SetConfig+0x4e4>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	f003 020f 	and.w	r2, r3, #15
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4422      	add	r2, r4
 8005724:	609a      	str	r2, [r3, #8]
}
 8005726:	bf00      	nop
 8005728:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800572c:	46bd      	mov	sp, r7
 800572e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005732:	bf00      	nop
 8005734:	51eb851f 	.word	0x51eb851f

08005738 <__errno>:
 8005738:	4b01      	ldr	r3, [pc, #4]	; (8005740 <__errno+0x8>)
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	2000000c 	.word	0x2000000c

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4d0d      	ldr	r5, [pc, #52]	; (800577c <__libc_init_array+0x38>)
 8005748:	4c0d      	ldr	r4, [pc, #52]	; (8005780 <__libc_init_array+0x3c>)
 800574a:	1b64      	subs	r4, r4, r5
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	2600      	movs	r6, #0
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	4d0b      	ldr	r5, [pc, #44]	; (8005784 <__libc_init_array+0x40>)
 8005756:	4c0c      	ldr	r4, [pc, #48]	; (8005788 <__libc_init_array+0x44>)
 8005758:	f000 fc8e 	bl	8006078 <_init>
 800575c:	1b64      	subs	r4, r4, r5
 800575e:	10a4      	asrs	r4, r4, #2
 8005760:	2600      	movs	r6, #0
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f855 3b04 	ldr.w	r3, [r5], #4
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f855 3b04 	ldr.w	r3, [r5], #4
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	080061fc 	.word	0x080061fc
 8005780:	080061fc 	.word	0x080061fc
 8005784:	080061fc 	.word	0x080061fc
 8005788:	08006200 	.word	0x08006200

0800578c <memset>:
 800578c:	4402      	add	r2, r0
 800578e:	4603      	mov	r3, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <siprintf>:
 800579c:	b40e      	push	{r1, r2, r3}
 800579e:	b500      	push	{lr}
 80057a0:	b09c      	sub	sp, #112	; 0x70
 80057a2:	ab1d      	add	r3, sp, #116	; 0x74
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	9006      	str	r0, [sp, #24]
 80057a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ac:	4809      	ldr	r0, [pc, #36]	; (80057d4 <siprintf+0x38>)
 80057ae:	9107      	str	r1, [sp, #28]
 80057b0:	9104      	str	r1, [sp, #16]
 80057b2:	4909      	ldr	r1, [pc, #36]	; (80057d8 <siprintf+0x3c>)
 80057b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b8:	9105      	str	r1, [sp, #20]
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	a902      	add	r1, sp, #8
 80057c0:	f000 f868 	bl	8005894 <_svfiprintf_r>
 80057c4:	9b02      	ldr	r3, [sp, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	b01c      	add	sp, #112	; 0x70
 80057cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d0:	b003      	add	sp, #12
 80057d2:	4770      	bx	lr
 80057d4:	2000000c 	.word	0x2000000c
 80057d8:	ffff0208 	.word	0xffff0208

080057dc <__ssputs_r>:
 80057dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	688e      	ldr	r6, [r1, #8]
 80057e2:	429e      	cmp	r6, r3
 80057e4:	4682      	mov	sl, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	4690      	mov	r8, r2
 80057ea:	461f      	mov	r7, r3
 80057ec:	d838      	bhi.n	8005860 <__ssputs_r+0x84>
 80057ee:	898a      	ldrh	r2, [r1, #12]
 80057f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057f4:	d032      	beq.n	800585c <__ssputs_r+0x80>
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	6909      	ldr	r1, [r1, #16]
 80057fa:	eba5 0901 	sub.w	r9, r5, r1
 80057fe:	6965      	ldr	r5, [r4, #20]
 8005800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005808:	3301      	adds	r3, #1
 800580a:	444b      	add	r3, r9
 800580c:	106d      	asrs	r5, r5, #1
 800580e:	429d      	cmp	r5, r3
 8005810:	bf38      	it	cc
 8005812:	461d      	movcc	r5, r3
 8005814:	0553      	lsls	r3, r2, #21
 8005816:	d531      	bpl.n	800587c <__ssputs_r+0xa0>
 8005818:	4629      	mov	r1, r5
 800581a:	f000 fb63 	bl	8005ee4 <_malloc_r>
 800581e:	4606      	mov	r6, r0
 8005820:	b950      	cbnz	r0, 8005838 <__ssputs_r+0x5c>
 8005822:	230c      	movs	r3, #12
 8005824:	f8ca 3000 	str.w	r3, [sl]
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	6921      	ldr	r1, [r4, #16]
 800583a:	464a      	mov	r2, r9
 800583c:	f000 fabe 	bl	8005dbc <memcpy>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	6126      	str	r6, [r4, #16]
 800584e:	6165      	str	r5, [r4, #20]
 8005850:	444e      	add	r6, r9
 8005852:	eba5 0509 	sub.w	r5, r5, r9
 8005856:	6026      	str	r6, [r4, #0]
 8005858:	60a5      	str	r5, [r4, #8]
 800585a:	463e      	mov	r6, r7
 800585c:	42be      	cmp	r6, r7
 800585e:	d900      	bls.n	8005862 <__ssputs_r+0x86>
 8005860:	463e      	mov	r6, r7
 8005862:	6820      	ldr	r0, [r4, #0]
 8005864:	4632      	mov	r2, r6
 8005866:	4641      	mov	r1, r8
 8005868:	f000 fab6 	bl	8005dd8 <memmove>
 800586c:	68a3      	ldr	r3, [r4, #8]
 800586e:	1b9b      	subs	r3, r3, r6
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	4433      	add	r3, r6
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	2000      	movs	r0, #0
 800587a:	e7db      	b.n	8005834 <__ssputs_r+0x58>
 800587c:	462a      	mov	r2, r5
 800587e:	f000 fba5 	bl	8005fcc <_realloc_r>
 8005882:	4606      	mov	r6, r0
 8005884:	2800      	cmp	r0, #0
 8005886:	d1e1      	bne.n	800584c <__ssputs_r+0x70>
 8005888:	6921      	ldr	r1, [r4, #16]
 800588a:	4650      	mov	r0, sl
 800588c:	f000 fabe 	bl	8005e0c <_free_r>
 8005890:	e7c7      	b.n	8005822 <__ssputs_r+0x46>
	...

08005894 <_svfiprintf_r>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	4698      	mov	r8, r3
 800589a:	898b      	ldrh	r3, [r1, #12]
 800589c:	061b      	lsls	r3, r3, #24
 800589e:	b09d      	sub	sp, #116	; 0x74
 80058a0:	4607      	mov	r7, r0
 80058a2:	460d      	mov	r5, r1
 80058a4:	4614      	mov	r4, r2
 80058a6:	d50e      	bpl.n	80058c6 <_svfiprintf_r+0x32>
 80058a8:	690b      	ldr	r3, [r1, #16]
 80058aa:	b963      	cbnz	r3, 80058c6 <_svfiprintf_r+0x32>
 80058ac:	2140      	movs	r1, #64	; 0x40
 80058ae:	f000 fb19 	bl	8005ee4 <_malloc_r>
 80058b2:	6028      	str	r0, [r5, #0]
 80058b4:	6128      	str	r0, [r5, #16]
 80058b6:	b920      	cbnz	r0, 80058c2 <_svfiprintf_r+0x2e>
 80058b8:	230c      	movs	r3, #12
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	e0d1      	b.n	8005a66 <_svfiprintf_r+0x1d2>
 80058c2:	2340      	movs	r3, #64	; 0x40
 80058c4:	616b      	str	r3, [r5, #20]
 80058c6:	2300      	movs	r3, #0
 80058c8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ca:	2320      	movs	r3, #32
 80058cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d4:	2330      	movs	r3, #48	; 0x30
 80058d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a80 <_svfiprintf_r+0x1ec>
 80058da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058de:	f04f 0901 	mov.w	r9, #1
 80058e2:	4623      	mov	r3, r4
 80058e4:	469a      	mov	sl, r3
 80058e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ea:	b10a      	cbz	r2, 80058f0 <_svfiprintf_r+0x5c>
 80058ec:	2a25      	cmp	r2, #37	; 0x25
 80058ee:	d1f9      	bne.n	80058e4 <_svfiprintf_r+0x50>
 80058f0:	ebba 0b04 	subs.w	fp, sl, r4
 80058f4:	d00b      	beq.n	800590e <_svfiprintf_r+0x7a>
 80058f6:	465b      	mov	r3, fp
 80058f8:	4622      	mov	r2, r4
 80058fa:	4629      	mov	r1, r5
 80058fc:	4638      	mov	r0, r7
 80058fe:	f7ff ff6d 	bl	80057dc <__ssputs_r>
 8005902:	3001      	adds	r0, #1
 8005904:	f000 80aa 	beq.w	8005a5c <_svfiprintf_r+0x1c8>
 8005908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800590a:	445a      	add	r2, fp
 800590c:	9209      	str	r2, [sp, #36]	; 0x24
 800590e:	f89a 3000 	ldrb.w	r3, [sl]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80a2 	beq.w	8005a5c <_svfiprintf_r+0x1c8>
 8005918:	2300      	movs	r3, #0
 800591a:	f04f 32ff 	mov.w	r2, #4294967295
 800591e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005922:	f10a 0a01 	add.w	sl, sl, #1
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	9307      	str	r3, [sp, #28]
 800592a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800592e:	931a      	str	r3, [sp, #104]	; 0x68
 8005930:	4654      	mov	r4, sl
 8005932:	2205      	movs	r2, #5
 8005934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005938:	4851      	ldr	r0, [pc, #324]	; (8005a80 <_svfiprintf_r+0x1ec>)
 800593a:	f7fa fc69 	bl	8000210 <memchr>
 800593e:	9a04      	ldr	r2, [sp, #16]
 8005940:	b9d8      	cbnz	r0, 800597a <_svfiprintf_r+0xe6>
 8005942:	06d0      	lsls	r0, r2, #27
 8005944:	bf44      	itt	mi
 8005946:	2320      	movmi	r3, #32
 8005948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594c:	0711      	lsls	r1, r2, #28
 800594e:	bf44      	itt	mi
 8005950:	232b      	movmi	r3, #43	; 0x2b
 8005952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005956:	f89a 3000 	ldrb.w	r3, [sl]
 800595a:	2b2a      	cmp	r3, #42	; 0x2a
 800595c:	d015      	beq.n	800598a <_svfiprintf_r+0xf6>
 800595e:	9a07      	ldr	r2, [sp, #28]
 8005960:	4654      	mov	r4, sl
 8005962:	2000      	movs	r0, #0
 8005964:	f04f 0c0a 	mov.w	ip, #10
 8005968:	4621      	mov	r1, r4
 800596a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800596e:	3b30      	subs	r3, #48	; 0x30
 8005970:	2b09      	cmp	r3, #9
 8005972:	d94e      	bls.n	8005a12 <_svfiprintf_r+0x17e>
 8005974:	b1b0      	cbz	r0, 80059a4 <_svfiprintf_r+0x110>
 8005976:	9207      	str	r2, [sp, #28]
 8005978:	e014      	b.n	80059a4 <_svfiprintf_r+0x110>
 800597a:	eba0 0308 	sub.w	r3, r0, r8
 800597e:	fa09 f303 	lsl.w	r3, r9, r3
 8005982:	4313      	orrs	r3, r2
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	46a2      	mov	sl, r4
 8005988:	e7d2      	b.n	8005930 <_svfiprintf_r+0x9c>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	1d19      	adds	r1, r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	9103      	str	r1, [sp, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	bfbb      	ittet	lt
 8005996:	425b      	neglt	r3, r3
 8005998:	f042 0202 	orrlt.w	r2, r2, #2
 800599c:	9307      	strge	r3, [sp, #28]
 800599e:	9307      	strlt	r3, [sp, #28]
 80059a0:	bfb8      	it	lt
 80059a2:	9204      	strlt	r2, [sp, #16]
 80059a4:	7823      	ldrb	r3, [r4, #0]
 80059a6:	2b2e      	cmp	r3, #46	; 0x2e
 80059a8:	d10c      	bne.n	80059c4 <_svfiprintf_r+0x130>
 80059aa:	7863      	ldrb	r3, [r4, #1]
 80059ac:	2b2a      	cmp	r3, #42	; 0x2a
 80059ae:	d135      	bne.n	8005a1c <_svfiprintf_r+0x188>
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	1d1a      	adds	r2, r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	9203      	str	r2, [sp, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bfb8      	it	lt
 80059bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c0:	3402      	adds	r4, #2
 80059c2:	9305      	str	r3, [sp, #20]
 80059c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a90 <_svfiprintf_r+0x1fc>
 80059c8:	7821      	ldrb	r1, [r4, #0]
 80059ca:	2203      	movs	r2, #3
 80059cc:	4650      	mov	r0, sl
 80059ce:	f7fa fc1f 	bl	8000210 <memchr>
 80059d2:	b140      	cbz	r0, 80059e6 <_svfiprintf_r+0x152>
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	eba0 000a 	sub.w	r0, r0, sl
 80059da:	fa03 f000 	lsl.w	r0, r3, r0
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	4303      	orrs	r3, r0
 80059e2:	3401      	adds	r4, #1
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ea:	4826      	ldr	r0, [pc, #152]	; (8005a84 <_svfiprintf_r+0x1f0>)
 80059ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f0:	2206      	movs	r2, #6
 80059f2:	f7fa fc0d 	bl	8000210 <memchr>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d038      	beq.n	8005a6c <_svfiprintf_r+0x1d8>
 80059fa:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <_svfiprintf_r+0x1f4>)
 80059fc:	bb1b      	cbnz	r3, 8005a46 <_svfiprintf_r+0x1b2>
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	3307      	adds	r3, #7
 8005a02:	f023 0307 	bic.w	r3, r3, #7
 8005a06:	3308      	adds	r3, #8
 8005a08:	9303      	str	r3, [sp, #12]
 8005a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0c:	4433      	add	r3, r6
 8005a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a10:	e767      	b.n	80058e2 <_svfiprintf_r+0x4e>
 8005a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a16:	460c      	mov	r4, r1
 8005a18:	2001      	movs	r0, #1
 8005a1a:	e7a5      	b.n	8005968 <_svfiprintf_r+0xd4>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	3401      	adds	r4, #1
 8005a20:	9305      	str	r3, [sp, #20]
 8005a22:	4619      	mov	r1, r3
 8005a24:	f04f 0c0a 	mov.w	ip, #10
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a2e:	3a30      	subs	r2, #48	; 0x30
 8005a30:	2a09      	cmp	r2, #9
 8005a32:	d903      	bls.n	8005a3c <_svfiprintf_r+0x1a8>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0c5      	beq.n	80059c4 <_svfiprintf_r+0x130>
 8005a38:	9105      	str	r1, [sp, #20]
 8005a3a:	e7c3      	b.n	80059c4 <_svfiprintf_r+0x130>
 8005a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a40:	4604      	mov	r4, r0
 8005a42:	2301      	movs	r3, #1
 8005a44:	e7f0      	b.n	8005a28 <_svfiprintf_r+0x194>
 8005a46:	ab03      	add	r3, sp, #12
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <_svfiprintf_r+0x1f8>)
 8005a4e:	a904      	add	r1, sp, #16
 8005a50:	4638      	mov	r0, r7
 8005a52:	f3af 8000 	nop.w
 8005a56:	1c42      	adds	r2, r0, #1
 8005a58:	4606      	mov	r6, r0
 8005a5a:	d1d6      	bne.n	8005a0a <_svfiprintf_r+0x176>
 8005a5c:	89ab      	ldrh	r3, [r5, #12]
 8005a5e:	065b      	lsls	r3, r3, #25
 8005a60:	f53f af2c 	bmi.w	80058bc <_svfiprintf_r+0x28>
 8005a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a66:	b01d      	add	sp, #116	; 0x74
 8005a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6c:	ab03      	add	r3, sp, #12
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	462a      	mov	r2, r5
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <_svfiprintf_r+0x1f8>)
 8005a74:	a904      	add	r1, sp, #16
 8005a76:	4638      	mov	r0, r7
 8005a78:	f000 f87a 	bl	8005b70 <_printf_i>
 8005a7c:	e7eb      	b.n	8005a56 <_svfiprintf_r+0x1c2>
 8005a7e:	bf00      	nop
 8005a80:	080061c0 	.word	0x080061c0
 8005a84:	080061ca 	.word	0x080061ca
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	080057dd 	.word	0x080057dd
 8005a90:	080061c6 	.word	0x080061c6

08005a94 <_printf_common>:
 8005a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	4616      	mov	r6, r2
 8005a9a:	4699      	mov	r9, r3
 8005a9c:	688a      	ldr	r2, [r1, #8]
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bfb8      	it	lt
 8005aa8:	4613      	movlt	r3, r2
 8005aaa:	6033      	str	r3, [r6, #0]
 8005aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	b10a      	cbz	r2, 8005aba <_printf_common+0x26>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	0699      	lsls	r1, r3, #26
 8005abe:	bf42      	ittt	mi
 8005ac0:	6833      	ldrmi	r3, [r6, #0]
 8005ac2:	3302      	addmi	r3, #2
 8005ac4:	6033      	strmi	r3, [r6, #0]
 8005ac6:	6825      	ldr	r5, [r4, #0]
 8005ac8:	f015 0506 	ands.w	r5, r5, #6
 8005acc:	d106      	bne.n	8005adc <_printf_common+0x48>
 8005ace:	f104 0a19 	add.w	sl, r4, #25
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	6832      	ldr	r2, [r6, #0]
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dc26      	bgt.n	8005b2a <_printf_common+0x96>
 8005adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae0:	1e13      	subs	r3, r2, #0
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	bf18      	it	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	0692      	lsls	r2, r2, #26
 8005aea:	d42b      	bmi.n	8005b44 <_printf_common+0xb0>
 8005aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af0:	4649      	mov	r1, r9
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c0      	blx	r8
 8005af6:	3001      	adds	r0, #1
 8005af8:	d01e      	beq.n	8005b38 <_printf_common+0xa4>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	68e5      	ldr	r5, [r4, #12]
 8005afe:	6832      	ldr	r2, [r6, #0]
 8005b00:	f003 0306 	and.w	r3, r3, #6
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	bf08      	it	eq
 8005b08:	1aad      	subeq	r5, r5, r2
 8005b0a:	68a3      	ldr	r3, [r4, #8]
 8005b0c:	6922      	ldr	r2, [r4, #16]
 8005b0e:	bf0c      	ite	eq
 8005b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b14:	2500      	movne	r5, #0
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bfc4      	itt	gt
 8005b1a:	1a9b      	subgt	r3, r3, r2
 8005b1c:	18ed      	addgt	r5, r5, r3
 8005b1e:	2600      	movs	r6, #0
 8005b20:	341a      	adds	r4, #26
 8005b22:	42b5      	cmp	r5, r6
 8005b24:	d11a      	bne.n	8005b5c <_printf_common+0xc8>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e008      	b.n	8005b3c <_printf_common+0xa8>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4638      	mov	r0, r7
 8005b32:	47c0      	blx	r8
 8005b34:	3001      	adds	r0, #1
 8005b36:	d103      	bne.n	8005b40 <_printf_common+0xac>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	3501      	adds	r5, #1
 8005b42:	e7c6      	b.n	8005ad2 <_printf_common+0x3e>
 8005b44:	18e1      	adds	r1, r4, r3
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	2030      	movs	r0, #48	; 0x30
 8005b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b4e:	4422      	add	r2, r4
 8005b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b58:	3302      	adds	r3, #2
 8005b5a:	e7c7      	b.n	8005aec <_printf_common+0x58>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4622      	mov	r2, r4
 8005b60:	4649      	mov	r1, r9
 8005b62:	4638      	mov	r0, r7
 8005b64:	47c0      	blx	r8
 8005b66:	3001      	adds	r0, #1
 8005b68:	d0e6      	beq.n	8005b38 <_printf_common+0xa4>
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	e7d9      	b.n	8005b22 <_printf_common+0x8e>
	...

08005b70 <_printf_i>:
 8005b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	7e0f      	ldrb	r7, [r1, #24]
 8005b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b78:	2f78      	cmp	r7, #120	; 0x78
 8005b7a:	4691      	mov	r9, r2
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	469a      	mov	sl, r3
 8005b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b86:	d807      	bhi.n	8005b98 <_printf_i+0x28>
 8005b88:	2f62      	cmp	r7, #98	; 0x62
 8005b8a:	d80a      	bhi.n	8005ba2 <_printf_i+0x32>
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	f000 80d8 	beq.w	8005d42 <_printf_i+0x1d2>
 8005b92:	2f58      	cmp	r7, #88	; 0x58
 8005b94:	f000 80a3 	beq.w	8005cde <_printf_i+0x16e>
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba0:	e03a      	b.n	8005c18 <_printf_i+0xa8>
 8005ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ba6:	2b15      	cmp	r3, #21
 8005ba8:	d8f6      	bhi.n	8005b98 <_printf_i+0x28>
 8005baa:	a101      	add	r1, pc, #4	; (adr r1, 8005bb0 <_printf_i+0x40>)
 8005bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005b99 	.word	0x08005b99
 8005bbc:	08005b99 	.word	0x08005b99
 8005bc0:	08005b99 	.word	0x08005b99
 8005bc4:	08005b99 	.word	0x08005b99
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005b99 	.word	0x08005b99
 8005bd0:	08005b99 	.word	0x08005b99
 8005bd4:	08005b99 	.word	0x08005b99
 8005bd8:	08005b99 	.word	0x08005b99
 8005bdc:	08005d29 	.word	0x08005d29
 8005be0:	08005c4d 	.word	0x08005c4d
 8005be4:	08005d0b 	.word	0x08005d0b
 8005be8:	08005b99 	.word	0x08005b99
 8005bec:	08005b99 	.word	0x08005b99
 8005bf0:	08005d4b 	.word	0x08005d4b
 8005bf4:	08005b99 	.word	0x08005b99
 8005bf8:	08005c4d 	.word	0x08005c4d
 8005bfc:	08005b99 	.word	0x08005b99
 8005c00:	08005b99 	.word	0x08005b99
 8005c04:	08005d13 	.word	0x08005d13
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	602a      	str	r2, [r5, #0]
 8005c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0a3      	b.n	8005d64 <_printf_i+0x1f4>
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	6829      	ldr	r1, [r5, #0]
 8005c20:	0606      	lsls	r6, r0, #24
 8005c22:	f101 0304 	add.w	r3, r1, #4
 8005c26:	d50a      	bpl.n	8005c3e <_printf_i+0xce>
 8005c28:	680e      	ldr	r6, [r1, #0]
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	2e00      	cmp	r6, #0
 8005c2e:	da03      	bge.n	8005c38 <_printf_i+0xc8>
 8005c30:	232d      	movs	r3, #45	; 0x2d
 8005c32:	4276      	negs	r6, r6
 8005c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c38:	485e      	ldr	r0, [pc, #376]	; (8005db4 <_printf_i+0x244>)
 8005c3a:	230a      	movs	r3, #10
 8005c3c:	e019      	b.n	8005c72 <_printf_i+0x102>
 8005c3e:	680e      	ldr	r6, [r1, #0]
 8005c40:	602b      	str	r3, [r5, #0]
 8005c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c46:	bf18      	it	ne
 8005c48:	b236      	sxthne	r6, r6
 8005c4a:	e7ef      	b.n	8005c2c <_printf_i+0xbc>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	1d19      	adds	r1, r3, #4
 8005c52:	6029      	str	r1, [r5, #0]
 8005c54:	0601      	lsls	r1, r0, #24
 8005c56:	d501      	bpl.n	8005c5c <_printf_i+0xec>
 8005c58:	681e      	ldr	r6, [r3, #0]
 8005c5a:	e002      	b.n	8005c62 <_printf_i+0xf2>
 8005c5c:	0646      	lsls	r6, r0, #25
 8005c5e:	d5fb      	bpl.n	8005c58 <_printf_i+0xe8>
 8005c60:	881e      	ldrh	r6, [r3, #0]
 8005c62:	4854      	ldr	r0, [pc, #336]	; (8005db4 <_printf_i+0x244>)
 8005c64:	2f6f      	cmp	r7, #111	; 0x6f
 8005c66:	bf0c      	ite	eq
 8005c68:	2308      	moveq	r3, #8
 8005c6a:	230a      	movne	r3, #10
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c72:	6865      	ldr	r5, [r4, #4]
 8005c74:	60a5      	str	r5, [r4, #8]
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	bfa2      	ittt	ge
 8005c7a:	6821      	ldrge	r1, [r4, #0]
 8005c7c:	f021 0104 	bicge.w	r1, r1, #4
 8005c80:	6021      	strge	r1, [r4, #0]
 8005c82:	b90e      	cbnz	r6, 8005c88 <_printf_i+0x118>
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d04d      	beq.n	8005d24 <_printf_i+0x1b4>
 8005c88:	4615      	mov	r5, r2
 8005c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c92:	5dc7      	ldrb	r7, [r0, r7]
 8005c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c98:	4637      	mov	r7, r6
 8005c9a:	42bb      	cmp	r3, r7
 8005c9c:	460e      	mov	r6, r1
 8005c9e:	d9f4      	bls.n	8005c8a <_printf_i+0x11a>
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d10b      	bne.n	8005cbc <_printf_i+0x14c>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	07de      	lsls	r6, r3, #31
 8005ca8:	d508      	bpl.n	8005cbc <_printf_i+0x14c>
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	6861      	ldr	r1, [r4, #4]
 8005cae:	4299      	cmp	r1, r3
 8005cb0:	bfde      	ittt	le
 8005cb2:	2330      	movle	r3, #48	; 0x30
 8005cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cbc:	1b52      	subs	r2, r2, r5
 8005cbe:	6122      	str	r2, [r4, #16]
 8005cc0:	f8cd a000 	str.w	sl, [sp]
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	aa03      	add	r2, sp, #12
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f7ff fee2 	bl	8005a94 <_printf_common>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d14c      	bne.n	8005d6e <_printf_i+0x1fe>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	b004      	add	sp, #16
 8005cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cde:	4835      	ldr	r0, [pc, #212]	; (8005db4 <_printf_i+0x244>)
 8005ce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ce4:	6829      	ldr	r1, [r5, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cec:	6029      	str	r1, [r5, #0]
 8005cee:	061d      	lsls	r5, r3, #24
 8005cf0:	d514      	bpl.n	8005d1c <_printf_i+0x1ac>
 8005cf2:	07df      	lsls	r7, r3, #31
 8005cf4:	bf44      	itt	mi
 8005cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cfa:	6023      	strmi	r3, [r4, #0]
 8005cfc:	b91e      	cbnz	r6, 8005d06 <_printf_i+0x196>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	f023 0320 	bic.w	r3, r3, #32
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	2310      	movs	r3, #16
 8005d08:	e7b0      	b.n	8005c6c <_printf_i+0xfc>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f043 0320 	orr.w	r3, r3, #32
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	2378      	movs	r3, #120	; 0x78
 8005d14:	4828      	ldr	r0, [pc, #160]	; (8005db8 <_printf_i+0x248>)
 8005d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d1a:	e7e3      	b.n	8005ce4 <_printf_i+0x174>
 8005d1c:	0659      	lsls	r1, r3, #25
 8005d1e:	bf48      	it	mi
 8005d20:	b2b6      	uxthmi	r6, r6
 8005d22:	e7e6      	b.n	8005cf2 <_printf_i+0x182>
 8005d24:	4615      	mov	r5, r2
 8005d26:	e7bb      	b.n	8005ca0 <_printf_i+0x130>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	6826      	ldr	r6, [r4, #0]
 8005d2c:	6961      	ldr	r1, [r4, #20]
 8005d2e:	1d18      	adds	r0, r3, #4
 8005d30:	6028      	str	r0, [r5, #0]
 8005d32:	0635      	lsls	r5, r6, #24
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	d501      	bpl.n	8005d3c <_printf_i+0x1cc>
 8005d38:	6019      	str	r1, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <_printf_i+0x1d2>
 8005d3c:	0670      	lsls	r0, r6, #25
 8005d3e:	d5fb      	bpl.n	8005d38 <_printf_i+0x1c8>
 8005d40:	8019      	strh	r1, [r3, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	4615      	mov	r5, r2
 8005d48:	e7ba      	b.n	8005cc0 <_printf_i+0x150>
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	1d1a      	adds	r2, r3, #4
 8005d4e:	602a      	str	r2, [r5, #0]
 8005d50:	681d      	ldr	r5, [r3, #0]
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	2100      	movs	r1, #0
 8005d56:	4628      	mov	r0, r5
 8005d58:	f7fa fa5a 	bl	8000210 <memchr>
 8005d5c:	b108      	cbz	r0, 8005d62 <_printf_i+0x1f2>
 8005d5e:	1b40      	subs	r0, r0, r5
 8005d60:	6060      	str	r0, [r4, #4]
 8005d62:	6863      	ldr	r3, [r4, #4]
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	2300      	movs	r3, #0
 8005d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6c:	e7a8      	b.n	8005cc0 <_printf_i+0x150>
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	462a      	mov	r2, r5
 8005d72:	4649      	mov	r1, r9
 8005d74:	4640      	mov	r0, r8
 8005d76:	47d0      	blx	sl
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d0ab      	beq.n	8005cd4 <_printf_i+0x164>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	079b      	lsls	r3, r3, #30
 8005d80:	d413      	bmi.n	8005daa <_printf_i+0x23a>
 8005d82:	68e0      	ldr	r0, [r4, #12]
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	4298      	cmp	r0, r3
 8005d88:	bfb8      	it	lt
 8005d8a:	4618      	movlt	r0, r3
 8005d8c:	e7a4      	b.n	8005cd8 <_printf_i+0x168>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4632      	mov	r2, r6
 8005d92:	4649      	mov	r1, r9
 8005d94:	4640      	mov	r0, r8
 8005d96:	47d0      	blx	sl
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d09b      	beq.n	8005cd4 <_printf_i+0x164>
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	9903      	ldr	r1, [sp, #12]
 8005da2:	1a5b      	subs	r3, r3, r1
 8005da4:	42ab      	cmp	r3, r5
 8005da6:	dcf2      	bgt.n	8005d8e <_printf_i+0x21e>
 8005da8:	e7eb      	b.n	8005d82 <_printf_i+0x212>
 8005daa:	2500      	movs	r5, #0
 8005dac:	f104 0619 	add.w	r6, r4, #25
 8005db0:	e7f5      	b.n	8005d9e <_printf_i+0x22e>
 8005db2:	bf00      	nop
 8005db4:	080061d1 	.word	0x080061d1
 8005db8:	080061e2 	.word	0x080061e2

08005dbc <memcpy>:
 8005dbc:	440a      	add	r2, r1
 8005dbe:	4291      	cmp	r1, r2
 8005dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc4:	d100      	bne.n	8005dc8 <memcpy+0xc>
 8005dc6:	4770      	bx	lr
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	d1f9      	bne.n	8005dca <memcpy+0xe>
 8005dd6:	bd10      	pop	{r4, pc}

08005dd8 <memmove>:
 8005dd8:	4288      	cmp	r0, r1
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	eb01 0402 	add.w	r4, r1, r2
 8005de0:	d902      	bls.n	8005de8 <memmove+0x10>
 8005de2:	4284      	cmp	r4, r0
 8005de4:	4623      	mov	r3, r4
 8005de6:	d807      	bhi.n	8005df8 <memmove+0x20>
 8005de8:	1e43      	subs	r3, r0, #1
 8005dea:	42a1      	cmp	r1, r4
 8005dec:	d008      	beq.n	8005e00 <memmove+0x28>
 8005dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005df6:	e7f8      	b.n	8005dea <memmove+0x12>
 8005df8:	4402      	add	r2, r0
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	428a      	cmp	r2, r1
 8005dfe:	d100      	bne.n	8005e02 <memmove+0x2a>
 8005e00:	bd10      	pop	{r4, pc}
 8005e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e0a:	e7f7      	b.n	8005dfc <memmove+0x24>

08005e0c <_free_r>:
 8005e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	d044      	beq.n	8005e9c <_free_r+0x90>
 8005e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e16:	9001      	str	r0, [sp, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e1e:	bfb8      	it	lt
 8005e20:	18e4      	addlt	r4, r4, r3
 8005e22:	f000 f913 	bl	800604c <__malloc_lock>
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <_free_r+0x94>)
 8005e28:	9801      	ldr	r0, [sp, #4]
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	b933      	cbnz	r3, 8005e3c <_free_r+0x30>
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6014      	str	r4, [r2, #0]
 8005e32:	b003      	add	sp, #12
 8005e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e38:	f000 b90e 	b.w	8006058 <__malloc_unlock>
 8005e3c:	42a3      	cmp	r3, r4
 8005e3e:	d908      	bls.n	8005e52 <_free_r+0x46>
 8005e40:	6825      	ldr	r5, [r4, #0]
 8005e42:	1961      	adds	r1, r4, r5
 8005e44:	428b      	cmp	r3, r1
 8005e46:	bf01      	itttt	eq
 8005e48:	6819      	ldreq	r1, [r3, #0]
 8005e4a:	685b      	ldreq	r3, [r3, #4]
 8005e4c:	1949      	addeq	r1, r1, r5
 8005e4e:	6021      	streq	r1, [r4, #0]
 8005e50:	e7ed      	b.n	8005e2e <_free_r+0x22>
 8005e52:	461a      	mov	r2, r3
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	b10b      	cbz	r3, 8005e5c <_free_r+0x50>
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d9fa      	bls.n	8005e52 <_free_r+0x46>
 8005e5c:	6811      	ldr	r1, [r2, #0]
 8005e5e:	1855      	adds	r5, r2, r1
 8005e60:	42a5      	cmp	r5, r4
 8005e62:	d10b      	bne.n	8005e7c <_free_r+0x70>
 8005e64:	6824      	ldr	r4, [r4, #0]
 8005e66:	4421      	add	r1, r4
 8005e68:	1854      	adds	r4, r2, r1
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	6011      	str	r1, [r2, #0]
 8005e6e:	d1e0      	bne.n	8005e32 <_free_r+0x26>
 8005e70:	681c      	ldr	r4, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	6053      	str	r3, [r2, #4]
 8005e76:	4421      	add	r1, r4
 8005e78:	6011      	str	r1, [r2, #0]
 8005e7a:	e7da      	b.n	8005e32 <_free_r+0x26>
 8005e7c:	d902      	bls.n	8005e84 <_free_r+0x78>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	6003      	str	r3, [r0, #0]
 8005e82:	e7d6      	b.n	8005e32 <_free_r+0x26>
 8005e84:	6825      	ldr	r5, [r4, #0]
 8005e86:	1961      	adds	r1, r4, r5
 8005e88:	428b      	cmp	r3, r1
 8005e8a:	bf04      	itt	eq
 8005e8c:	6819      	ldreq	r1, [r3, #0]
 8005e8e:	685b      	ldreq	r3, [r3, #4]
 8005e90:	6063      	str	r3, [r4, #4]
 8005e92:	bf04      	itt	eq
 8005e94:	1949      	addeq	r1, r1, r5
 8005e96:	6021      	streq	r1, [r4, #0]
 8005e98:	6054      	str	r4, [r2, #4]
 8005e9a:	e7ca      	b.n	8005e32 <_free_r+0x26>
 8005e9c:	b003      	add	sp, #12
 8005e9e:	bd30      	pop	{r4, r5, pc}
 8005ea0:	20000338 	.word	0x20000338

08005ea4 <sbrk_aligned>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	4e0e      	ldr	r6, [pc, #56]	; (8005ee0 <sbrk_aligned+0x3c>)
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	6831      	ldr	r1, [r6, #0]
 8005eac:	4605      	mov	r5, r0
 8005eae:	b911      	cbnz	r1, 8005eb6 <sbrk_aligned+0x12>
 8005eb0:	f000 f8bc 	bl	800602c <_sbrk_r>
 8005eb4:	6030      	str	r0, [r6, #0]
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f000 f8b7 	bl	800602c <_sbrk_r>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d00a      	beq.n	8005ed8 <sbrk_aligned+0x34>
 8005ec2:	1cc4      	adds	r4, r0, #3
 8005ec4:	f024 0403 	bic.w	r4, r4, #3
 8005ec8:	42a0      	cmp	r0, r4
 8005eca:	d007      	beq.n	8005edc <sbrk_aligned+0x38>
 8005ecc:	1a21      	subs	r1, r4, r0
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f8ac 	bl	800602c <_sbrk_r>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d101      	bne.n	8005edc <sbrk_aligned+0x38>
 8005ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8005edc:	4620      	mov	r0, r4
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	2000033c 	.word	0x2000033c

08005ee4 <_malloc_r>:
 8005ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee8:	1ccd      	adds	r5, r1, #3
 8005eea:	f025 0503 	bic.w	r5, r5, #3
 8005eee:	3508      	adds	r5, #8
 8005ef0:	2d0c      	cmp	r5, #12
 8005ef2:	bf38      	it	cc
 8005ef4:	250c      	movcc	r5, #12
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	4607      	mov	r7, r0
 8005efa:	db01      	blt.n	8005f00 <_malloc_r+0x1c>
 8005efc:	42a9      	cmp	r1, r5
 8005efe:	d905      	bls.n	8005f0c <_malloc_r+0x28>
 8005f00:	230c      	movs	r3, #12
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	2600      	movs	r6, #0
 8005f06:	4630      	mov	r0, r6
 8005f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f0c:	4e2e      	ldr	r6, [pc, #184]	; (8005fc8 <_malloc_r+0xe4>)
 8005f0e:	f000 f89d 	bl	800604c <__malloc_lock>
 8005f12:	6833      	ldr	r3, [r6, #0]
 8005f14:	461c      	mov	r4, r3
 8005f16:	bb34      	cbnz	r4, 8005f66 <_malloc_r+0x82>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	f7ff ffc2 	bl	8005ea4 <sbrk_aligned>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	4604      	mov	r4, r0
 8005f24:	d14d      	bne.n	8005fc2 <_malloc_r+0xde>
 8005f26:	6834      	ldr	r4, [r6, #0]
 8005f28:	4626      	mov	r6, r4
 8005f2a:	2e00      	cmp	r6, #0
 8005f2c:	d140      	bne.n	8005fb0 <_malloc_r+0xcc>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	4631      	mov	r1, r6
 8005f32:	4638      	mov	r0, r7
 8005f34:	eb04 0803 	add.w	r8, r4, r3
 8005f38:	f000 f878 	bl	800602c <_sbrk_r>
 8005f3c:	4580      	cmp	r8, r0
 8005f3e:	d13a      	bne.n	8005fb6 <_malloc_r+0xd2>
 8005f40:	6821      	ldr	r1, [r4, #0]
 8005f42:	3503      	adds	r5, #3
 8005f44:	1a6d      	subs	r5, r5, r1
 8005f46:	f025 0503 	bic.w	r5, r5, #3
 8005f4a:	3508      	adds	r5, #8
 8005f4c:	2d0c      	cmp	r5, #12
 8005f4e:	bf38      	it	cc
 8005f50:	250c      	movcc	r5, #12
 8005f52:	4629      	mov	r1, r5
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff ffa5 	bl	8005ea4 <sbrk_aligned>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d02b      	beq.n	8005fb6 <_malloc_r+0xd2>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	442b      	add	r3, r5
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	e00e      	b.n	8005f84 <_malloc_r+0xa0>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	1b52      	subs	r2, r2, r5
 8005f6a:	d41e      	bmi.n	8005faa <_malloc_r+0xc6>
 8005f6c:	2a0b      	cmp	r2, #11
 8005f6e:	d916      	bls.n	8005f9e <_malloc_r+0xba>
 8005f70:	1961      	adds	r1, r4, r5
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	6025      	str	r5, [r4, #0]
 8005f76:	bf18      	it	ne
 8005f78:	6059      	strne	r1, [r3, #4]
 8005f7a:	6863      	ldr	r3, [r4, #4]
 8005f7c:	bf08      	it	eq
 8005f7e:	6031      	streq	r1, [r6, #0]
 8005f80:	5162      	str	r2, [r4, r5]
 8005f82:	604b      	str	r3, [r1, #4]
 8005f84:	4638      	mov	r0, r7
 8005f86:	f104 060b 	add.w	r6, r4, #11
 8005f8a:	f000 f865 	bl	8006058 <__malloc_unlock>
 8005f8e:	f026 0607 	bic.w	r6, r6, #7
 8005f92:	1d23      	adds	r3, r4, #4
 8005f94:	1af2      	subs	r2, r6, r3
 8005f96:	d0b6      	beq.n	8005f06 <_malloc_r+0x22>
 8005f98:	1b9b      	subs	r3, r3, r6
 8005f9a:	50a3      	str	r3, [r4, r2]
 8005f9c:	e7b3      	b.n	8005f06 <_malloc_r+0x22>
 8005f9e:	6862      	ldr	r2, [r4, #4]
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	bf0c      	ite	eq
 8005fa4:	6032      	streq	r2, [r6, #0]
 8005fa6:	605a      	strne	r2, [r3, #4]
 8005fa8:	e7ec      	b.n	8005f84 <_malloc_r+0xa0>
 8005faa:	4623      	mov	r3, r4
 8005fac:	6864      	ldr	r4, [r4, #4]
 8005fae:	e7b2      	b.n	8005f16 <_malloc_r+0x32>
 8005fb0:	4634      	mov	r4, r6
 8005fb2:	6876      	ldr	r6, [r6, #4]
 8005fb4:	e7b9      	b.n	8005f2a <_malloc_r+0x46>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	4638      	mov	r0, r7
 8005fbc:	f000 f84c 	bl	8006058 <__malloc_unlock>
 8005fc0:	e7a1      	b.n	8005f06 <_malloc_r+0x22>
 8005fc2:	6025      	str	r5, [r4, #0]
 8005fc4:	e7de      	b.n	8005f84 <_malloc_r+0xa0>
 8005fc6:	bf00      	nop
 8005fc8:	20000338 	.word	0x20000338

08005fcc <_realloc_r>:
 8005fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4614      	mov	r4, r2
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	b921      	cbnz	r1, 8005fe2 <_realloc_r+0x16>
 8005fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	4611      	mov	r1, r2
 8005fde:	f7ff bf81 	b.w	8005ee4 <_malloc_r>
 8005fe2:	b92a      	cbnz	r2, 8005ff0 <_realloc_r+0x24>
 8005fe4:	f7ff ff12 	bl	8005e0c <_free_r>
 8005fe8:	4625      	mov	r5, r4
 8005fea:	4628      	mov	r0, r5
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	f000 f838 	bl	8006064 <_malloc_usable_size_r>
 8005ff4:	4284      	cmp	r4, r0
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	d802      	bhi.n	8006000 <_realloc_r+0x34>
 8005ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ffe:	d812      	bhi.n	8006026 <_realloc_r+0x5a>
 8006000:	4621      	mov	r1, r4
 8006002:	4640      	mov	r0, r8
 8006004:	f7ff ff6e 	bl	8005ee4 <_malloc_r>
 8006008:	4605      	mov	r5, r0
 800600a:	2800      	cmp	r0, #0
 800600c:	d0ed      	beq.n	8005fea <_realloc_r+0x1e>
 800600e:	42bc      	cmp	r4, r7
 8006010:	4622      	mov	r2, r4
 8006012:	4631      	mov	r1, r6
 8006014:	bf28      	it	cs
 8006016:	463a      	movcs	r2, r7
 8006018:	f7ff fed0 	bl	8005dbc <memcpy>
 800601c:	4631      	mov	r1, r6
 800601e:	4640      	mov	r0, r8
 8006020:	f7ff fef4 	bl	8005e0c <_free_r>
 8006024:	e7e1      	b.n	8005fea <_realloc_r+0x1e>
 8006026:	4635      	mov	r5, r6
 8006028:	e7df      	b.n	8005fea <_realloc_r+0x1e>
	...

0800602c <_sbrk_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d06      	ldr	r5, [pc, #24]	; (8006048 <_sbrk_r+0x1c>)
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	f7fb fa4c 	bl	80014d4 <_sbrk>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_sbrk_r+0x1a>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_sbrk_r+0x1a>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000340 	.word	0x20000340

0800604c <__malloc_lock>:
 800604c:	4801      	ldr	r0, [pc, #4]	; (8006054 <__malloc_lock+0x8>)
 800604e:	f000 b811 	b.w	8006074 <__retarget_lock_acquire_recursive>
 8006052:	bf00      	nop
 8006054:	20000344 	.word	0x20000344

08006058 <__malloc_unlock>:
 8006058:	4801      	ldr	r0, [pc, #4]	; (8006060 <__malloc_unlock+0x8>)
 800605a:	f000 b80c 	b.w	8006076 <__retarget_lock_release_recursive>
 800605e:	bf00      	nop
 8006060:	20000344 	.word	0x20000344

08006064 <_malloc_usable_size_r>:
 8006064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006068:	1f18      	subs	r0, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfbc      	itt	lt
 800606e:	580b      	ldrlt	r3, [r1, r0]
 8006070:	18c0      	addlt	r0, r0, r3
 8006072:	4770      	bx	lr

08006074 <__retarget_lock_acquire_recursive>:
 8006074:	4770      	bx	lr

08006076 <__retarget_lock_release_recursive>:
 8006076:	4770      	bx	lr

08006078 <_init>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr

08006084 <_fini>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr
